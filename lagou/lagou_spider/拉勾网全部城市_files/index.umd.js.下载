(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.index = factory());
}(this, (function () { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  /**
   * Callback index.
   */
  var count = 0;
  /**
   * Noop function.
   */

  function noop() {}
  /**
   * JSONP handler
   *
   * Options:
   *  - param {String} qs parameter (`callback`)
   *  - prefix {String} qs parameter (`__jp`)
   *  - name {String} qs parameter (`prefix` + incr)
   *  - timeout {Number} how long after a timeout error is emitted (`60000`)
   *
   * @param {String} url
   * @param {Object|Function} optional options / callback
   * @param {Function} optional callback
   */


  function jsonp(url, opts, fn) {
    if ('function' == typeof opts) {
      fn = opts;
      opts = {};
    }

    if (!opts) opts = {};
    var prefix = opts.prefix || '__jp'; // use the callback name that was passed if one was provided.
    // otherwise generate a unique name by incrementing our counter.

    var id = opts.name || prefix + count++;
    var param = opts.param || 'callback';
    var timeout = null != opts.timeout ? opts.timeout : 60000;
    var enc = encodeURIComponent;
    var target = document.getElementsByTagName('script')[0] || document.head;
    var script;
    var timer;

    if (timeout) {
      timer = setTimeout(function () {
        cleanup();
        if (fn) fn(new Error('Timeout'));
      }, timeout);
    }

    function cleanup() {
      if (script.parentNode) script.parentNode.removeChild(script);
      window[id] = noop;
      if (timer) clearTimeout(timer);
    }

    function cancel() {
      if (window[id]) {
        cleanup();
      }
    }

    window[id] = function (data) {
      cleanup();
      if (fn) fn(null, data);
    }; // add qs component


    url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);
    url = url.replace('?&', '?');

    script = document.createElement('script');
    script.src = url;
    target.parentNode.insertBefore(script, target);
    return cancel;
  }

  var protocol = "".concat(document.location.protocol);
  console.log('jsonp');

  function fetchJsonp(url, params) {
    var requestUrl = url;

    if (params) {
      params._ = Date.parse(new Date());
      var dataString = url.indexOf('?') === -1 ? '?' : '&';
      requestUrl = "".concat(requestUrl).concat(dataString);

      for (var k in params) {
        requestUrl += "&".concat(k, "=").concat(params[k]);
      }
    }

    return new Promise(function (resolve, reject) {
      jsonp(requestUrl, null, function (err, res) {
        if (err) {
          reject(err);
        } else {
          resolve(res);
        }
      });
    });
  }

  var fetchAd = function fetchAd(params) {
    return fetchJsonp("".concat(protocol, "//ggservice.lagou.com/promotionSpace/data"), params);
  };
  var fetchIframe = function fetchIframe(params) {
    return fetchJsonp("".concat(protocol, "//ggservice.lagou.com/promotionSpace/haveData"), params);
  };
  var fetchHtmlData = function fetchHtmlData(params) {
    return fetchJsonp("".concat(protocol, "////ggservice.lagou.com/promotionSpace/htmldata"), params);
  };
  /**
   * 查询接口
   * @param {*} param0 
   * @returns 
   */

  var fnFetchUrl = function fnFetchUrl(_ref) {
    var url = _ref.url,
        method = _ref.method,
        params = _ref.params;
    return new Promise(function (resolve, reject) {
      var xmlHttp = null;

      var fnXmlHttpChange = function fnXmlHttpChange() {
        if (xmlHttp.readyState === 4) {
          if (xmlHttp.response) {
            var res = JSON.parse(xmlHttp.response);
            resolve(res);
          } else {
            reject();
          }
        }
      };

      if (window.XMLHttpRequest) {
        xmlHttp = new window.XMLHttpRequest();
      } else if (window.ActiveXObject) {
        xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');
      }

      if (xmlHttp) {
        xmlHttp.onreadystatechange = fnXmlHttpChange;
        xmlHttp.open(method || "GET", url, true);
        xmlHttp.setRequestHeader("X-L-REQ-HEADER", '{deviceType: 10}');
        xmlHttp.send(params);
      }
    });
  };
  /**
   * 广告系统查询广告
   * @param {广告位编码（必传} adSpaceCode 
   * @returns 
   */


  var fetchAdvertisingByKey = function fetchAdvertisingByKey(adSpaceCode) {
    return fnFetchUrl({
      url: "https://gate.lagou.com/v1/entry/activity/ad/new/query?adSpaceCode=".concat(adSpaceCode, "&t=").concat(Date.parse(new Date()))
    });
  };

  /*
   * 曝光量统计
   *
   * 接口地址
   * http://a.lagou.com/json
   *
   * 参数示例：
   * 参数 - 值 - 含义
   * lt - trackshow - 日志输出类型
   * a - 9R00_idnull_0_id34_1992,9R00_idnull_0_id34_1993,9R00_idnull_0_id34_1994 - 编码id组
   * t - p - 曝光类型
   * v - 0 - 版本号
   * dl - http://www.lagou.com/jobs/618831.html - 当前URL
   * dr - http://www.lagou.com - referrer
   * time - new Date().getTime() - 随机码
   *
   *
   */
  var analyseUri = {
    jsonURL: document.location.protocol + '//a.lagou.com/json'
  };
  /**
   * [发送广告曝光量统计]
   * @param  {Array} tjCodes  [要统计的编码code组，每一项均为'[tgId, tgNo, tgCid]'格式的统计编码组]
   * @param  {String} type    [曝光统计的类型]
   * @param  {Array} abts     [a/b-test类型，可选]
   */

  function exposure(tjCodes, type, abts) {
    var tjCodesStrs = [];

    for (var i = 0; i < tjCodes.length; i++) {
      tjCodesStrs.push(getTjId(tjCodes[i][0], tjCodes[i][1], tjCodes[i][2]));
    }
    var imgGet = new Image();
    var params = {
      "lt": 'trackshow',
      "a": tjCodesStrs.join(','),
      "t": type || '',
      "v": 0,
      "dl": encodeURIComponent(window.location.href),
      "dr": encodeURIComponent(window.location.protocol + '//' + window.location.hostname),
      "time": new Date().getTime()
    };
    typeof abts !== 'undefined' && (params.abt = abts.join(','));
    var paramsArr = [];

    for (var item in params) {
      paramsArr.push(item + '=' + params[item]);
    }

    imgGet.src = analyseUri.jsonURL + '?' + paramsArr.join('&');
  }
  /* 获取编码统计ID */

  function getTjId(id, no, cid) {
    return [$.trim(id), $.trim(no), 0, $.trim(cid), Math.round(Math.random() * 10000)].join('_');
  }

  var baseOption = {
    subsite: document.getElementById('UserCityName') && document.getElementById('UserCityName').value || ''
  };
  /**
   *  type {string} [渲染类型 默认single] single：渲染单图 multiple：渲染多图 iframe：渲染iframe
   *  containerClass {string} [渲染的外部容器 必填]
   *  childClass {string} [内部渲染出来的dom classname  非必填]
   *  linkClass {string} [a标签的class 非必填]
   *  spaceKey {string} [广告请求时的key 必填]
   *  keyword {string} [为搜索结果页可选项 非必填]
   *  subsite {string} [城市 非必填]
   *  needUseLink {boole} [是否自动添加a链接]
   *  callBack {function} [回调函数 请求成功时会传递参数 参数为请求结果]
   */

  var itemDefaultOption = {
    type: 'single',
    //multiple || iframe
    containerClass: 'lgad_container',
    childClass: 'lgad_container-item',
    linkClass: 'lgad_container-link-item',
    spaceKey: '',
    keyword: '',
    subsite: baseOption.subsite,
    needUseLink: true,
    needExposure: true,
    callBack: function callBack() {}
  };
  /**
   * 广告系统的广告位,埋点
   * @param {*} params 
   */

  var fnFetchAdvertising = function fnFetchAdvertising(params) {
    fetchAdvertisingByKey(params.spaceKey).then(function (res) {
      if (res && res.state === 1 && res.content) {
        if (res.content.length) {
          var advertising = res.content[0];
          var callBack = params.callBack,
              childClass = params.childClass,
              containerClass = params.containerClass;
          var url = advertising.url,
              pictureList = advertising.pictureList;
          var aEl = document.createElement("a");
          aEl.setAttribute('href', url);
          aEl.setAttribute('target', '_blank');
          aEl.setAttribute('rel', 'nofollow');

          if (pictureList && pictureList.length) {
            var imgEl = document.createElement("img");
            imgEl.src = pictureList[0];
            imgEl.className = childClass;
            aEl.appendChild(imgEl);
            var parentEl = document.querySelectorAll(".".concat(containerClass));

            if (parentEl.length) {
              parentEl = parentEl[0];
              parentEl.appendChild(aEl);
              var trackData = {
                page_id: advertising.pageId,
                _address_id: advertising.aId,
                _content_id: advertising.adId,
                added_props: {
                  URL: advertising.url
                }
              };

              if (window.LGWebTj) {
                aEl.addEventListener("click", function () {
                  window.LGWebTj(_objectSpread2({
                    _lt: 'pcclick'
                  }, trackData));
                }); // 曝光埋点

                setTimeout(function () {
                  window.LGWebTj(_objectSpread2({
                    _lt: 'pcshow'
                  }, trackData));
                }, 1000);
              }

              if (typeof callBack === "function") {
                callBack(advertising);
              }
            }
          }
        }
      }
    });
  };

  function creationAdvertising() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [{}];

    var option = _toConsumableArray(params);

    option.forEach(function (item, index) {
      var assignItem = Object.assign({}, itemDefaultOption, item);
      option[index] = assignItem;
      var type = assignItem.type;

      switch (type) {
        case 'advertising-system':
          fnFetchAdvertising(assignItem);
          break;

        case 'single':
        case 'multiple':
          getAd(assignItem);
          break;

        case 'iframe':
          getIframe(assignItem);
      }
    });
  }

  function getAd() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    console.log('getAd', params);
    var containerClass = params.containerClass,
        spaceKey = params.spaceKey,
        keyword = params.keyword,
        subsite = params.subsite,
        type = params.type,
        needUseLink = params.needUseLink,
        callBack = params.callBack,
        childClass = params.childClass,
        linkClass = params.linkClass,
        needExposure = params.needExposure,
        address_id = params.address_id;
    var containerClassDom = document.querySelectorAll(".".concat(containerClass));
    if (containerClassDom.length < 1) return;
    fetchAd({
      spaceKey: spaceKey,
      keyword: keyword,
      subsite: subsite
    }).then(function (res) {
      var _ref = res && res.data || {},
          _ref$promotionAds = _ref.promotionAds,
          promotionAds = _ref$promotionAds === void 0 ? [] : _ref$promotionAds,
          tgCode = _ref.tgCode;

      var copyResList = _toConsumableArray(promotionAds);

      var exposureList = [];
      console.log('fetchAd success', res.data);

      if (type === 'single') {
        copyResList = copyResList.slice(0, 1);
      }

      containerClassDom.forEach(function (containerDomObj) {
        containerDomObj.innerHTML = '';

        if (copyResList.length === 0) {
          deleteDom(containerDomObj);
          return;
        }

        copyResList.forEach(function (item, itemIndex) {
          var img1 = item.img1,
              link1 = item.link1,
              _item$id = item.id,
              tjCid = _item$id === void 0 ? 'idnull' : _item$id;
          if (!img1) return;
          var finalObj = null;
          var imgObj = document.createElement('img');
          imgObj.src = img1;
          imgObj.className = childClass;
          finalObj = imgObj;

          if (needUseLink && link1) {
            var aObj = document.createElement('a');
            aObj.setAttribute('href', link1);
            aObj.setAttribute('target', '_blank');
            aObj.setAttribute('rel', 'nofollow');
            aObj.className = linkClass;

            if (tgCode) {
              var tjNo = type === 'single' ? 'idnull' : '00' + (itemIndex + 1 > 9 ? itemIndex + 1 : '0' + (itemIndex + 1));
              aObj.setAttribute('data-lg-tj-id', tgCode);
              aObj.setAttribute('data-lg-tj-no', tjNo);
              aObj.setAttribute('data-lg-tj-cid', tjCid);

              if (needExposure) {
                exposureList.push([tgCode, tjNo, tjCid]);
              }
            }

            aObj.appendChild(imgObj);
            finalObj = aObj;
            window.LGWebTj && window.LGWebTj({
              _lt: 'pcshow',
              _address_id: address_id,
              added_props: {
                URL: link1
              }
            });
          }

          containerDomObj.appendChild(finalObj);
        });
      });
      console.log('exposureList', exposureList);
      exposureList.length > 0 && exposure(exposureList, 'ad');
      callBack(res.data);
    })["catch"](function (err) {
      containerClassDom.forEach(function (containerDomObj) {
        deleteDom(containerDomObj);
      });
      console.log('fetchAd 失败', err);
    });
  }

  function getIframe(params) {
    console.log('getIframe', params);
    var spaceKey = params.spaceKey,
        keyword = params.keyword,
        containerClass = params.containerClass,
        childClass = params.childClass;
    var containerClassDom = document.querySelector(".".concat(containerClass));
    if (!containerClassDom) return;
    fetchIframe({
      spaceKey: spaceKey,
      keyword: keyword
    }).then(function (res) {
      if (!res.success) {
        deleteDom(containerClassDom);
        return;
      }

      var resSpaceKey = res.spaceKey,
          data = res.data,
          _res$width = res.width,
          width = _res$width === void 0 ? '' : _res$width,
          _res$height = res.height,
          height = _res$height === void 0 ? '' : _res$height,
          _res$htmlType = res.htmlType,
          htmlType = _res$htmlType === void 0 ? '' : _res$htmlType;

      if (!htmlType || htmlType == 'iframe') {
        var iframeUrl = "".concat(window.location.protocol, "//ggservice.lagou.com/promotionSpace/htmlPage?spaceKey=").concat(resSpaceKey).concat(data ? "&keyword=".concat(encodeURIComponent(data)) : '');
        var iframeObj = document.createElement('iframe');
        iframeObj.setAttribute('frameborder', '0');
        iframeObj.setAttribute('marginwidth', '0');
        iframeObj.setAttribute('marginheight', '0');
        iframeObj.setAttribute('vspace', '0');
        iframeObj.setAttribute('hspace', '0');
        iframeObj.setAttribute('src', iframeUrl);
        iframeObj.setAttribute('width', width);
        iframeObj.setAttribute('height', height);
        iframeObj.setAttribute('style', 'display:block;border:0');
        containerClassDom.appendChild(iframeObj);
      } else {
        containerClassDom.setAttribute('style', "overflow:hidden;width:".concat(width, ";height:").concat(height));
        var childDom = document.createElement('div');
        childDom.className = childClass;
        fetchHtmlData({
          spaceKey: resSpaceKey,
          keyword: encodeURIComponent(data)
        }).then(function (res) {
          childDom.innerHTML = res.data;
          containerClassDom.appendChild(childDom);
        })["catch"](function (res) {
          deleteDom(containerClassDom);
        });
      }
    })["catch"](function (res) {
      deleteDom(containerClassDom);
      console.log('获取iframe失败');
    });
  }

  function deleteDom(node) {
    // node.parentNode.removeChild(node);
    node.style.display = 'none';
  }

  return creationAdvertising;

})));
