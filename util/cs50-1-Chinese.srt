1
00:00:00,000 --> 00:00:02,988


2
00:00:02,988 --> 00:00:06,474
[MUSIC PLAYING]
[放歌！]

3
00:00:06,474 --> 00:00:13,310
This is CS50 Harvard University.
这是哈佛大学的CS50课程。

4
00:01:13,310 --> 00:01:15,260
DAVID J. MALAN: All right.
大卫 鸡. 马兰：好的。

5
00:01:15,260 --> 00:01:19,220
This is CS50, Harvard University's introduction
这是CS50，哈佛大学的介绍

6
00:01:19,220 --> 00:01:21,560
to the intellectual enterprises of computer science
致计算机科学的智力企业

7
00:01:21,560 --> 00:01:22,940
and the arts of programming.
和编程艺术。

8
00:01:22,940 --> 00:01:27,660
My name is David Malan, and I actually took this course myself, back in 1996.
我的名字是大卫 马兰，实际上我自己在1996年参加了这门课程。

9
00:01:27,660 --> 00:01:29,382
I was a sophomore at the time.
那时候我是大二学生。

10
00:01:29,382 --> 00:01:32,090
I was actually concentrating in government, because a year prior,
我实际上专注于政府，因为一年前，

11
00:01:32,090 --> 00:01:34,550
as a first year, I'd come into Harvard thinking
第一年，我进入哈佛时思考

12
00:01:34,550 --> 00:01:40,200
that I liked history and constitutional law and similar classes in high school.
我喜欢历史和宪法以及高中的类似课程。

13
00:01:40,200 --> 00:01:42,320
And so when I got here, I rather gravitated
所以当我来到这里时，我宁愿被吸引

14
00:01:42,320 --> 00:01:44,180
toward that which was familiar.
向着熟悉的方向。

15
00:01:44,180 --> 00:01:47,508
I figured, if I liked and if I were good at that particular subject
我想，如果我喜欢，如果我擅长那个特定的主题

16
00:01:47,508 --> 00:01:50,300
in high school, then that's presumably who I'm supposed to be here.
在高中，那大概就是我应该在这里的人。

17
00:01:50,300 --> 00:01:52,910
But it wasn't until sophomore year that I got up
但直到大二，我才

18
00:01:52,910 --> 00:01:55,847
the nerve to step foot in the CS50 classroom,
鼓起勇气踏进CS50的教室

19
00:01:55,847 --> 00:01:57,680
and even then, it was only out of curiosity.
即使如此，也只是出于好奇。

20
00:01:57,680 --> 00:02:02,295
Like I had no intention of studying computer science of even taking CS50
就像我甚至不打算学习计算机科学一样 CS50

21
00:02:02,295 --> 00:02:03,170
when I got to campus.
当我到了校园。

22
00:02:03,170 --> 00:02:07,400
But people were talking about it, and there was a lot of beware.
但是人们在谈论它，有很多人要注意。

23
00:02:07,400 --> 00:02:10,070
And it was perhaps for the initiated only,
这也许只适用于发起者，

24
00:02:10,070 --> 00:02:12,560
and I didn't really ultimately what computer science was.
我最终并不知道计算机科学是什么。

25
00:02:12,560 --> 00:02:15,800
But for me, the light bulb went off.
但对我来说，灯泡熄灭了。

26
00:02:15,800 --> 00:02:18,260
I found that, contrary to what I'd seen in high school,
我发现，与我在高中时看到的相反，

27
00:02:18,260 --> 00:02:21,230
where I saw friends of mine like programming away in the computer lab,
在那里我看到我的朋友喜欢在计算机实验室撸代码，

28
00:02:21,230 --> 00:02:24,830
heads down, antisocially just doing whatever it was they were doing,
低着头，反社会只是做他们正在做的事情，

29
00:02:24,830 --> 00:02:28,100
it really wasn't that, once I got to this particular class
真的不是这样，当我上了这门课之后

30
00:02:28,100 --> 00:02:29,280
and this particular place.
和这个特殊的地方。

31
00:02:29,280 --> 00:02:32,240
It was much more about problem solving more generally and just learning
更多的是关于更普遍地解决问题和只是学习

32
00:02:32,240 --> 00:02:34,852
how to express yourself in code, in different languages.
如何用代码、不同的语言表达自己。

33
00:02:34,852 --> 00:02:37,310
So that you can actually solve problems of interest to you.
这样你就能真正解决你感兴趣的问题。

34
00:02:37,310 --> 00:02:41,060
Even if you have no intention of being a computer scientist or an engineer,
即使你无意成为一名计算机科学家或工程师，

35
00:02:41,060 --> 00:02:43,140
but just want to be able to solve problems,
但只想能够解决问题，

36
00:02:43,140 --> 00:02:47,280
analyze data do interesting things, in the arts, humanities, social sciences,
分析数据做有趣的事情，在艺术，人文，社会科学，

37
00:02:47,280 --> 00:02:49,710
physical sciences, or really any other field.
物理科学，或者任何其他领域。

38
00:02:49,710 --> 00:02:52,700
And indeed, this particular path led me to computer science,
事实上，这条特殊的道路把我带到了计算机科学，

39
00:02:52,700 --> 00:02:56,090
but the hope for CS50 more generally is that, indeed, you
但对 CS50 更普遍的希望是，确实，你

40
00:02:56,090 --> 00:02:58,453
just find your way to applying principles
只要找到应用原则的方法

41
00:02:58,453 --> 00:03:00,620
that you'll learn over the coming months to whatever
在接下来的几个月里你会学到什么

42
00:03:00,620 --> 00:03:02,370
field is of interest to you.
菲尔德是你感兴趣的。

43
00:03:02,370 --> 00:03:05,720
With that said, it was definitely a lot of work and not
话虽如此，这绝对是很多工作，而不是

44
00:03:05,720 --> 00:03:07,500
without its frustrations for me.
没有它对我的挫败感。

45
00:03:07,500 --> 00:03:10,940
But there was no better feeling than like banging your head proverbial
但是没有比像belike着你的头更好的感觉了

46
00:03:10,940 --> 00:03:14,180
against the wall for some number of hours, even days, trying to fix a bug,
在墙上呆了几个小时，甚至几天，试图修复一个bug，

47
00:03:14,180 --> 00:03:15,630
a mistake in your code.
代码中的错误。

48
00:03:15,630 --> 00:03:19,160
And then, oh my God, the rush of emotion of accomplishment
然后，哦，我的老天爷，成就感喷薄而出

49
00:03:19,160 --> 00:03:22,433
of pride of exhaustion when you finally solve some problem that's
当你终于解决了一些问题

50
00:03:22,433 --> 00:03:23,600
really been weighing on you.
真的一直在操着你。

51
00:03:23,600 --> 00:03:26,570
It's just so incredibly gratifying but also empowering.
这真是令人难以置信的满足，但也赋予了力量。

52
00:03:26,570 --> 00:03:28,910
Because unlike a lot of fields, like computer science
因为不像很多领域，比如计算机科学

53
00:03:28,910 --> 00:03:31,200
was built by humans themselves.
是人类自己建造的。

54
00:03:31,200 --> 00:03:33,620
And so if a human built this, surely, you, another human,
因此，如果一个人建造了这个，当然，你，另一个人，

55
00:03:33,620 --> 00:03:35,460
can understand it as well.
也能理解。

56
00:03:35,460 --> 00:03:38,570
And so even though there's going to be some distractions along the way,
所以即使一路上会有一些分心的事情，

57
00:03:38,570 --> 00:03:41,420
you're going to see what looks incredibly cryptic, if you've never
你会看到看起来令人难以置信的神秘，如果你从来没有

58
00:03:41,420 --> 00:03:42,440
programmed before.
之前编程。

59
00:03:42,440 --> 00:03:46,402
Over time and with practice, everything just starts to make more sense.
随着时间的推移和实践，一切都开始变得更有意义。

60
00:03:46,402 --> 00:03:48,110
And with time and with practice, you just
随着时间的推移和练习，你只是

61
00:03:48,110 --> 00:03:49,950
get better at this particular field.
在这个特定领域做得更好。

62
00:03:49,950 --> 00:03:53,210
And indeed, really, the key to success in programming in general
事实上，实际上，编程成功的关键是

63
00:03:53,210 --> 00:03:55,530
is just to allow yourself enough time.
只是为了给自己足够的时间。

64
00:03:55,530 --> 00:03:57,575
And so at least, thankfully, I quickly got
所以至少，谢天谢地，我很快就得到了

65
00:03:57,575 --> 00:03:59,450
into the habit of starting early in the week,
养成在一周初开始的习惯，

66
00:03:59,450 --> 00:04:00,950
for instance, when writing actual code.
例如，在编写实际代码时。

67
00:04:00,950 --> 00:04:01,400
Why?
为什么？

68
00:04:01,400 --> 00:04:03,200
Because you're going to run up against a wall.
因为你会撞墙。

69
00:04:03,200 --> 00:04:04,460
You're not going to see some bug.
你不会看到一些错误。

70
00:04:04,460 --> 00:04:06,470
Something's not going to jump out at you, and that's fine.
有些东西不会向你扑来，这很好。

71
00:04:06,470 --> 00:04:09,780
That's when you call it a day, take a break, move onto something else,
那就是你今天到此的时候，休息一下，转移到别的事情上，

72
00:04:09,780 --> 00:04:11,030
and then just come back to it.
然后回到它。

73
00:04:11,030 --> 00:04:14,393
And that's what keeps programming fun for me, even all of these years later,
这就是让我保持编程乐趣的原因，即使在这么多年后，

74
00:04:14,393 --> 00:04:16,310
whether it's teaching or actually applying it.
无论是教学还是实际应用。

75
00:04:16,310 --> 00:04:19,753
But there's, down the road, a history of an MIT hack,
但是，沿着这条路走下去，麻省理工学院黑客的历史，

76
00:04:19,753 --> 00:04:22,170
and it looked a little something like this, in yesteryear.
它看起来有点像这样，在过去。

77
00:04:22,170 --> 00:04:25,280
And there was a little sigh the MIT students, when they made this hack.
当麻省理工学院的学生进行此黑客攻击时，他们叹了口气。

78
00:04:25,280 --> 00:04:27,800
On the wall it says, getting an education from MIT
墙上写着，从麻省理工学院接受教育

79
00:04:27,800 --> 00:04:30,680
is like drinking from a fire hose, which indeed they
就像从消防水带上喝水一样，他们确实

80
00:04:30,680 --> 00:04:33,890
have connected to what should have been otherwise just a water fountain.
已经连接到本来应该只是一个喷泉的东西。

81
00:04:33,890 --> 00:04:36,170
And that's going to be what it feels like, sometimes,
有时候，这就是它的感觉，

82
00:04:36,170 --> 00:04:39,560
not just in computer science per se, but just an unfamiliar field.
不仅仅是计算机科学本身，而只是一个陌生的领域。

83
00:04:39,560 --> 00:04:42,740
If you're not from STEM, if you're not from CS, that's fine.
如果你不是来自STEM，如果你不是来自CS，那很好。

84
00:04:42,740 --> 00:04:46,370
But so much of it, ultimately, is going to be absorbed by you
但这么多，最终，会被你吸收

85
00:04:46,370 --> 00:04:49,430
and going to be within your grasp by terms end.
并且将在条款结束时在你的掌握之中。

86
00:04:49,430 --> 00:04:52,110
So just keep in mind, that's very much the intent,
所以请记住，这很大程度上是我们的意图，

87
00:04:52,110 --> 00:04:55,580
but you'll be amazed what you're able to create, to accomplish,
但你会惊讶于你能够创造什么，完成什么，

88
00:04:55,580 --> 00:04:57,440
just three or so months hence.
仅仅三个月左右的时间。

89
00:04:57,440 --> 00:05:01,100
Indeed, 2/3 of you, contrary to what you might think are assume,
事实上，你们2/3人，与你们可能认为的相反，

90
00:05:01,100 --> 00:05:03,140
have never taken a CS class before.
以前从未上过CS课。

91
00:05:03,140 --> 00:05:06,140
So it's absolutely not the case that the person to the left or the right
所以绝对不是左边或右边的人

92
00:05:06,140 --> 00:05:07,550
surely must know more than you.
肯定比你知道的更多。

93
00:05:07,550 --> 00:05:09,462
Indeed, it's quite the opposite.
事实上，情况恰恰相反。

94
00:05:09,462 --> 00:05:12,170
And as you'll see in the coming weeks, as you write your own code
正如你将在未来几周内看到的那样，当你编写自己的代码时

95
00:05:12,170 --> 00:05:14,992
and solve your own problems, what ultimately matters in this course
并解决你自己的问题，这门课程最终重要的事情

96
00:05:14,992 --> 00:05:17,450
is not so much where you end up relative to your classmates
与其说是你最终相对于你的同学

97
00:05:17,450 --> 00:05:20,783
but where you end up relative to yourself when you began.
但是当你开始时，你最终相对于自己的地方。

98
00:05:20,783 --> 00:05:23,450
And it really is all about that delta, whether you've programmed
这真的是关于三角洲的，无论你是否已经编程

99
00:05:23,450 --> 00:05:27,380
or not, just getting something out of a class like this.
或者不是，只是从这样的课堂上得到一些东西。

100
00:05:27,380 --> 00:05:30,140
And if it does take time, and if you do feel those frustrations,
如果确实需要时间，而且你确实感到沮丧，

101
00:05:30,140 --> 00:05:32,973
but you simultaneously eventually feel that sense of accomplishment,
但同时你最终会感受到那种成就感，

102
00:05:32,973 --> 00:05:34,520
that just means it's all working.
这只是意味着一切都在工作。

103
00:05:34,520 --> 00:05:38,570
And indeed, hopefully, all the more worthwhile and gratifying, ultimately,
事实上，希望最终更有价值和令人满意的是，

104
00:05:38,570 --> 00:05:39,712
as a result.
结果。

105
00:05:39,712 --> 00:05:41,670
So what are we going to do in the coming weeks?
那么，在接下来的几周里，我们要做点啥呢？

106
00:05:41,670 --> 00:05:43,550
So here we are in week zero.
所以这里是第0周。

107
00:05:43,550 --> 00:05:46,520
We'll soon see why computers and computer scientists start counting,
我们很快就会明白为什么计算机和计算机科学家开始计数，

108
00:05:46,520 --> 00:05:47,480
if you will, from 0.
如果你愿意，从 0.

109
00:05:47,480 --> 00:05:51,740
But week 0, is one in which we explore computational thinking,
但是第 0 周，是我们探索计算思维的一周，

110
00:05:51,740 --> 00:05:54,860
thinking like a computer, and starting to clean up your thought processes.
像计算机一样思考，并开始清理你的思维过程。

111
00:05:54,860 --> 00:05:57,360
Getting you to think, to solve problems more methodically,
让你思考，更有条理地解决问题，

112
00:05:57,360 --> 00:05:59,360
and then ultimately, translating that into code.
然后最终将其转换为代码。

113
00:05:59,360 --> 00:06:02,390
And some of you might recognize this environment here, a.k.a.
你们中的一些人可能认识这里的环境，也就是

114
00:06:02,390 --> 00:06:04,520
Scratch, coincidentally also from MIT.
也就是scratch，巧合也来自麻省理工学院。

115
00:06:04,520 --> 00:06:06,350
You might have used it in grade school.
你可能在小学用过它。

116
00:06:06,350 --> 00:06:09,860
We'll use it today and a little bit this weekend in the course's first homework
我们今天将使用它，本周末将在课程的第一个家庭作业中使用它

117
00:06:09,860 --> 00:06:11,760
assignment or problem set.
作业或问题集。

118
00:06:11,760 --> 00:06:14,040
But not so much to play around in a way that you
但与其说是以一种你的方式玩耍

119
00:06:14,040 --> 00:06:15,960
might have if you did use it in yesteryears,
如果你在过去使用它，

120
00:06:15,960 --> 00:06:18,990
but to explore ideas of computer science and programming
而是探索计算机科学和编程的思想

121
00:06:18,990 --> 00:06:22,650
that we're going to use and reuse every week hereafter as well.
此后，我们每周也将使用和重用。

122
00:06:22,650 --> 00:06:24,900
Thereafter, we're going to transition just next week
此后，我们将在下周过渡

123
00:06:24,900 --> 00:06:26,800
to week one, so to speak.
可以这么说，到第一周。

124
00:06:26,800 --> 00:06:30,030
Whereby, we'll introduce you to a more traditional language, a lower level
由此，我们将向你介绍一种更传统的语言，一种较低的水平

125
00:06:30,030 --> 00:06:32,702
language, an older language called C. And in C, you're
语言，一种称为C的较旧语言。在C中，你是

126
00:06:32,702 --> 00:06:35,910
going to use your keyboard, not so much your mouse and pointing and clicking,
去使用你的键盘，而不是你的鼠标和点击，

127
00:06:35,910 --> 00:06:37,680
but you're going to write code that soto look a little something like this.
但是你要写的代码看起来有点像这样。

129
00:06:39,030 --> 00:06:41,040
And if you've programmed before, you can probably
如果你以前撸过代码，你可能

130
00:06:41,040 --> 00:06:42,120
glean what this is going to do.
知道这是怎么回事。

131
00:06:42,120 --> 00:06:45,090
If you've never programmed before, which is the case for most of you,
如果你以前从未编程过，对你们大多数人来说都是这种情况，

132
00:06:45,090 --> 00:06:47,560
this too will soon make sense.
这也很快就会有意义。

133
00:06:47,560 --> 00:06:51,120
But this is the most canonical program that most any programmer ever writes
但这是大多数程序员编写的最规范的程序

134
00:06:51,120 --> 00:06:54,060
called Hello, World, and indeed, that and all
叫Hello, World，事实上，这和所有

135
00:06:54,060 --> 00:06:57,660
of the surrounding syntax above and below just that sentence Hello, World,
在该句子的上方和下方的周围语法Hello，World，

136
00:06:57,660 --> 00:06:59,430
will soon make all the more sense.
很快就会变得更有意义。

137
00:06:59,430 --> 00:07:02,250
You'll learn how to use industry-standard tools, so to speak.
可以说，你将学习如何使用行业标准工具。

138
00:07:02,250 --> 00:07:04,980
Pictured here is something called Visual Studio code, or VS Code.
图为Visual Studio code或VS Code。

139
00:07:04,980 --> 00:07:07,262
You'll use a cloud based version of it initially,
你最初将使用基于云的版本，

140
00:07:07,262 --> 00:07:09,720
so you don't have to suffer with any technical difficulties
所以你不必忍受任何技术上的困难

141
00:07:09,720 --> 00:07:10,678
or headaches like that.
或者像那样头痛。

142
00:07:10,678 --> 00:07:12,900
It'll just work right off the bat, but we'll
它会马上工作，但我们会

143
00:07:12,900 --> 00:07:14,760
use that to [INAUDIBLE] others ultimately
最终将其用于 [听不清] 其他人

144
00:07:14,760 --> 00:07:18,840
to then explore ideas in computer science, principles that you can apply.
然后探索计算机科学的想法，你可以应用的原则。

145
00:07:18,840 --> 00:07:20,590
And we'll take a look underneath the hood,
我们将看看引擎盖下，

146
00:07:20,590 --> 00:07:24,900
so to speak, of your computer at your memory or RAM, Random Access Memory,
可以这么说，你的电脑在你的内存或RAM，随机存取存储器，

147
00:07:24,900 --> 00:07:27,210
where all of the data is ultimately going to be stored.
所有的数据最终都将被存储在那里。

148
00:07:27,210 --> 00:07:29,880
We'll also take a look thereafter at bugs.
之后我们还会看看bug。

149
00:07:29,880 --> 00:07:31,470
A bug is a mistake in a program.
错误是程序中的错误。

150
00:07:31,470 --> 00:07:34,380
Here is an actual bug in an actual computer in yesteryear,
这是过去实际计算机中的一个实际错误，

151
00:07:34,380 --> 00:07:38,190
but we'll teach you how to debug programs, find your own mistakes,
但是我们会教你如何调试程序，发现自己的错误，

152
00:07:38,190 --> 00:07:41,040
find others' mistakes, and improve that code as well.
找出其他人的错误，并改进代码。

153
00:07:41,040 --> 00:07:44,520
We'll transition then to algorithms, step-by-step instructions
我们将过渡到算法，一步一步的指令

154
00:07:44,520 --> 00:07:47,340
for solving some problems, which we'll touch on today too.
为了解决一些问题，我们今天也会涉及到。

155
00:07:47,340 --> 00:07:49,590
And if you picture here, this is actually
如果你在这里想象一下，这实际上是

156
00:07:49,590 --> 00:07:51,120
a pretty representative problem.
一个非常有代表性的问题。

157
00:07:51,120 --> 00:07:53,578
Odds are, you haven't had to deal with something like this,
很有可能，你不必处理这样的事情，

158
00:07:53,578 --> 00:07:55,510
but it's representative sorting, for instance.
但例如，它是代表性排序。

159
00:07:55,510 --> 00:07:58,530
If you think of each of these small bars as being a small number,
如果你把这些小酒吧都看作是一个小数字，

160
00:07:58,530 --> 00:08:00,810
each of the bigger bars is being a bigger number,
每个更大的酒吧都是一个更大的数字，

161
00:08:00,810 --> 00:08:05,250
you might wonder, well, how could you as a human sort all of these bars,
你可能会想，作为一个人，你怎么能整理所有这些酒吧，

162
00:08:05,250 --> 00:08:08,478
like get all the short bars over here, all the big bars over there?
就像把所有的短酒吧都拿到这里，所有的大酒吧都在那边？

163
00:08:08,478 --> 00:08:11,520
Well, odds are, if you're like me, you would probably kind of eyeball it,
好吧，很有可能，如果你像我一样，你可能会盯着它，

164
00:08:11,520 --> 00:08:13,230
and if you could physically interact, you
如果你能进行身体互动，你

165
00:08:13,230 --> 00:08:15,450
might just start grabbing the smallest elements first,
可能只是先开始抓住最小的元素，

166
00:08:15,450 --> 00:08:16,533
put them over on the left.
把它们放在左边。

167
00:08:16,533 --> 00:08:19,330
Maybe grab the biggest elements, put them over on the right.
也许抓住最大的元素，把它们放在右边。

168
00:08:19,330 --> 00:08:20,880
But what's your algorithm there?
但是你的算法是什么？

169
00:08:20,880 --> 00:08:24,388
Like how would you teach someone younger than you, who's never done that before,
比如你怎么教一个比你年轻的人，以前从来没有这样做过，

170
00:08:24,388 --> 00:08:24,930
how to do it?
怎么办？

171
00:08:24,930 --> 00:08:28,740
How would you compel your Mac or PC or phone to do something like that?
你会如何强迫你的Mac或PC或手机做这样的事情？

172
00:08:28,740 --> 00:08:31,650
You can't just wave your hand, and say, oh, figure it out.
你不能只是挥挥手，说，哦，想办法。

173
00:08:31,650 --> 00:08:32,572
Move things around.
四处移动东西。

174
00:08:32,572 --> 00:08:34,530
You have to express yourself more methodically.
你必须更有条理地表达自己。

175
00:08:34,530 --> 00:08:36,815
So we'll translate even ideas like this into code too.
所以我们也会把这样的想法翻译成代码。

176
00:08:36,815 --> 00:08:38,940
And that's what the Googles and others of the world
这就是谷歌和世界上其他人

177
00:08:38,940 --> 00:08:42,780
are doing constantly, as they sort and organize the world's information.
他们不断地整理和组织世界的信息。

178
00:08:42,780 --> 00:08:45,490
We'll use metaphors along the way, if it helps.
如果有帮助的话，我们会沿途使用隐喻。

179
00:08:45,490 --> 00:08:48,990
We'll talk about your computer's memory as being like a postal address.
我们将讨论你的计算机的内存就像一个邮政地址。

180
00:08:48,990 --> 00:08:53,062
Like every mailbox in the world has some form of postal address, street, city,
就像世界上每个邮箱都有某种形式的邮政地址，街道，城市，

181
00:08:53,062 --> 00:08:55,020
state, country, and the like, and it turns out,
州、国家等等，事实证明，

182
00:08:55,020 --> 00:08:57,560
that's how your Mac, your PC, and your phone also work.
这就是你的Mac，PC和手机的工作方式。

183
00:08:57,560 --> 00:09:00,060
You've got a whole bunch of memory, like the picture before,
你有一大堆记忆，就像以前的照片，

184
00:09:00,060 --> 00:09:02,730
but you can think of it really as individual mailboxes.
但是你可以将其视为单个邮箱。

185
00:09:02,730 --> 00:09:05,100
And you can put anything you want in those mailboxes,
你可以把任何你想要的东西放在那些邮箱里，

186
00:09:05,100 --> 00:09:08,725
and you can go to a mailbox to grab information that's from it.
你可以转到邮箱以从中获取信息。

187
00:09:08,725 --> 00:09:11,100
So at the end of the day, that's really all your computer
所以归根结底，这真的是你的电脑

188
00:09:11,100 --> 00:09:12,490
is doing with information.
正在做信息。

189
00:09:12,490 --> 00:09:15,480
It's just organizing it, not into mailboxes per se,
它只是组织它，而不是邮箱本身，

190
00:09:15,480 --> 00:09:18,870
but a term you probably know called bytes, for instance, instead.
但是，你可能知道的术语称为字节，例如。

191
00:09:18,870 --> 00:09:22,560
We'll talk about problems that arise even nowadays.
我们将讨论当今出现的问题。

192
00:09:22,560 --> 00:09:24,960
In fact, most of you are familiar with your Mac,
事实上，你们大多数人都熟悉你的Mac，

193
00:09:24,960 --> 00:09:29,070
PC, even phone like spontaneously rebooting sometimes, crashing,
电脑，甚至手机有时会自发重启，崩溃，

194
00:09:29,070 --> 00:09:32,520
the little annoying spinning beach ball or hourglass icon that happens.
发生的小烦人的旋转沙滩球或沙漏图标。

195
00:09:32,520 --> 00:09:33,790
Like what is with that?
就像这是怎么回事？

196
00:09:33,790 --> 00:09:36,930
Well, those are just bugs in programs that humans at Apple and Google
嗯，这些只是苹果和谷歌人类程序中的错误

197
00:09:36,930 --> 00:09:40,110
and Microsoft and others, they screwed up, and they wrote buggy code.
微软和其他公司搞砸了，他们写了错误的代码。

198
00:09:40,110 --> 00:09:42,930
And your computer, when it encounters those mistakes,
当你的电脑遇到这些错误时，

199
00:09:42,930 --> 00:09:44,290
doesn't know what to do.
不知道该怎么办。

200
00:09:44,290 --> 00:09:47,730
And so 9 times out of 10, so to speak, it just crashes or freezes
所以10次有9次，可以这么说，它只是崩溃或冻结

201
00:09:47,730 --> 00:09:50,110
or the like, but that kind of stuff will make more sense.
或者类似的东西，但这种东西会更有意义。

202
00:09:50,110 --> 00:09:52,485
So even the real world will make sense, and pictured here
所以即使是现实世界也会有意义，如图所示

203
00:09:52,485 --> 00:09:55,350
are some lower level terms we'll eventually get to mid-semester.
是我们最终将在学期中期到达的一些较低级别的学期。

204
00:09:55,350 --> 00:09:57,870
But generally speaking, when something is going this way,
但一般来说，当事情发展成这样时，

205
00:09:57,870 --> 00:10:01,020
as per this arrow, and something is going this way, as per this arrow,
按照这个箭头，有些东西往这边走，按照这个箭头，

206
00:10:01,020 --> 00:10:02,440
like that does not end well.
这样的结局并不好。

207
00:10:02,440 --> 00:10:05,250
And that often is what happens when your computer crashes.
这通常是当你的电脑崩溃时发生的事情。

208
00:10:05,250 --> 00:10:08,460
Someone's using memory up here, but someone else is using memory down here,
有人在这里使用内存，但有人在这里使用内存，

209
00:10:08,460 --> 00:10:11,470
and then they're not really talking left hand and right hand.
然后他们不是真的在说左手和右手。

210
00:10:11,470 --> 00:10:14,970
So that is just a high level overview of some of the problems we'll encounter,
因此，这只是我们将遇到的一些问题的高级概述，

211
00:10:14,970 --> 00:10:17,010
but we'll focus to on data, ultimately.
但我们最终将专注于数据。

212
00:10:17,010 --> 00:10:20,530
So pictured here is something fairly technical called a hash table.
所以这里图片是一个相当技术性的东西，叫做哈希表。

213
00:10:20,530 --> 00:10:23,735
It's an amalgam of something we're going to soon call an array and also
这是一个混合体的东西，我们很快就会称之为数组，也

214
00:10:23,735 --> 00:10:25,110
something we call a link to list.
我们称之为列表链接的东西。

215
00:10:25,110 --> 00:10:27,330
And these are just fancy terms for describing
这些只是用来描述

216
00:10:27,330 --> 00:10:31,020
how you can organize information even more flexibly
如何更灵活地组织信息

217
00:10:31,020 --> 00:10:34,440
than just putting individual values in mailboxes.
而不仅仅是将单个值放入邮箱。

218
00:10:34,440 --> 00:10:37,900
Like how could you build structures, like actual data structures
就像你怎么能建立结构，像实际的数据结构

219
00:10:37,900 --> 00:10:40,510
so to speak, two-dimensional structures at that?
可以这么说，二维结构？

220
00:10:40,510 --> 00:10:43,230
And so what you're seeing here is a glimpse, as some of you
所以你们在这里看到的是一瞥，就像你们中的一些人一样

221
00:10:43,230 --> 00:10:45,720
might have recognized, of some Harry Potter universe names,
可能已经认识到，在一些哈利波特宇宙的名字中，

222
00:10:45,720 --> 00:10:48,040
but they're organized somewhat alphabetically.
但它们的组织方式有点按字母顺序排列。

223
00:10:48,040 --> 00:10:50,790
And notice, that any time there's multiple people with a name that
请注意，任何时候都有多个人的名字

224
00:10:50,790 --> 00:10:53,940
starts with H, like Hermione, Harry, and Hagrid, well, they
从H开始，就像赫敏、哈利和海格一样，他们

225
00:10:53,940 --> 00:10:57,270
can't all fit in that mailbox, if each of these squares along the left
不能全部放在那个邮箱里，如果左边的每个正方形

226
00:10:57,270 --> 00:10:58,440
is that same mailbox.
是同一个邮箱。

227
00:10:58,440 --> 00:11:00,330
So you have to chain them together.
所以你必须把它们链接在一起。

228
00:11:00,330 --> 00:11:02,490
Well, you'll learn how to do that in code.
那么，你将学习如何在代码中做到这一点。

229
00:11:02,490 --> 00:11:04,773
So that even if you get more data than you expect,
所以即使你得到的数据比你预期的要多，

230
00:11:04,773 --> 00:11:07,440
if your business is booming, and you're some web-based business,
如果你的业务正在蓬勃发展，并且你是基于网络的业务，

231
00:11:07,440 --> 00:11:09,810
how do you keep adding and adding information
如何不断添加和添加信息

232
00:11:09,810 --> 00:11:12,790
to your software to actually keep up with it?
你的软件真的跟上了吗？

233
00:11:12,790 --> 00:11:16,480
But this, again, is what code's going to soon look like, as soon as next week,
但是，这也是代码很快就会出现的样子，最快在下周，

234
00:11:16,480 --> 00:11:20,500
in week one, this here being C, but we'll transition in a few weeks
在第一周，这里是C，但我们将在几周内过渡

235
00:11:20,500 --> 00:11:25,190
to a more modern, higher level language, so to speak, called Python.
一种更现代、更高级的语言，可以这么说，叫做Python。

236
00:11:25,190 --> 00:11:27,940
Indeed, the course very deliberately, back in my day and now this,
事实上，课程非常刻意，回到我的时代，现在这个，

237
00:11:27,940 --> 00:11:31,540
introduces you first to C, which funny enough, many people don't
首先向你介绍C，这很有趣，很多人不

238
00:11:31,540 --> 00:11:33,520
tend to program in certainly every day.
倾向于每天编程。

239
00:11:33,520 --> 00:11:36,980
I use C, generally, September, October, November,
我用C，一般，9月，10月，11月，

240
00:11:36,980 --> 00:11:38,590
December, when teaching CS50 itself.
12月，在教授CS50本身时。

241
00:11:38,590 --> 00:11:40,540
But it's everywhere, nonetheless.
但它无处不在。

242
00:11:40,540 --> 00:11:43,870
In fact, even today's other languages, with which you might be familiar,
事实上，即使今天你可能熟悉的其他语言，

243
00:11:43,870 --> 00:11:48,190
like Python and Java and yet others still, you
就像Python和Java以及其他人一样，你

244
00:11:48,190 --> 00:11:50,800
see this same primitive language underneath the hood,
在引擎盖下看到同样的原始语言，

245
00:11:50,800 --> 00:11:52,360
because it's so darn fast.
因为它太快了。

246
00:11:52,360 --> 00:11:54,110
And as you'll learn over the coming weeks,
在接下来的几周里，你会知道，

247
00:11:54,110 --> 00:11:57,310
it really gives you access to and an understanding of what's
它真的让你接触和理解什么是

248
00:11:57,310 --> 00:11:59,180
going on conceptually down here.
从概念上讲，这里。

249
00:11:59,180 --> 00:12:01,900
So that thereafter, after CS50, when you're writing code,
因此，在CS50之后，当你编写代码时，

250
00:12:01,900 --> 00:12:05,180
you can think at a very high level what's actually going on.
你可以在一个非常高的水平上思考到底发生了什么。

251
00:12:05,180 --> 00:12:08,710
So in fact, in just a few weeks, what looks like this in C
所以事实上，在短短几周内，C中看起来像这样的

252
00:12:08,710 --> 00:12:11,170
is going to look instead like this in Python.
在Python中会看起来像这样。

253
00:12:11,170 --> 00:12:13,930
And you'll better understand what's going on underneath the hood,
你会更好地理解引擎盖下发生了什么，

254
00:12:13,930 --> 00:12:16,540
and odds are, after this class, you'll reach for a language,
很有可能，在这堂课后，你会接触到一门语言，

255
00:12:16,540 --> 00:12:19,540
like Python more frequently than C, but you're
像Python比C更频繁，但你

256
00:12:19,540 --> 00:12:22,750
going to benefit from that bottom-up understanding thereof.
将受益于自下而上的理解。

257
00:12:22,750 --> 00:12:26,680
Thereafter and towards term's end, we'll introduce you to a few other ideas,
此后，在学期结束时，我们将向你介绍一些其他想法，

258
00:12:26,680 --> 00:12:28,630
like where do you put large amounts of data?
比如你把大量数据放在哪里？

259
00:12:28,630 --> 00:12:31,660
In things called databases, not things like spreadsheets, like here,
在称为数据库的东西中，而不是像这里这样的电子表格，

260
00:12:31,660 --> 00:12:32,690
but actual databases.
而是实际的数据库。

261
00:12:32,690 --> 00:12:34,690
We're using those same kinds of data structures,
我们使用同样的数据结构，

262
00:12:34,690 --> 00:12:37,300
you lay things out in an interesting way in memory.
你把事情以一种有趣的方式放在记忆中。

263
00:12:37,300 --> 00:12:40,000
Thereafter, we'll transition to a very familiar environment
此后，我们将过渡到一个非常熟悉的环境。

264
00:12:40,000 --> 00:12:42,010
that you and I use every day, the web.
你和我每天都在用到的，网络。

265
00:12:42,010 --> 00:12:45,010
Like the web has become rather the User Interface, or UI,
就像网络已经变成了用户界面，或者UI，

266
00:12:45,010 --> 00:12:48,970
that we use everywhere, on the laptops, desktops, and even mobile devices,
我们在笔记本电脑、台式机甚至移动设备上使用的，

267
00:12:48,970 --> 00:12:49,690
nowadays.
现在。

268
00:12:49,690 --> 00:12:52,360
Well, pictured here is a language called HTML.
嗯，这里图是一种叫做HTML的语言。

269
00:12:52,360 --> 00:12:53,693
It's not a programming language.
它不是一种编程语言。

270
00:12:53,693 --> 00:12:56,443
It's a markup language, and some of you might have made home pages
这是一种标记语言，你们中的一些人可能已经制作了主页

271
00:12:56,443 --> 00:12:57,550
or portfolios in the past.
或过去的投资组合。

272
00:12:57,550 --> 00:13:01,270
But you'll understand what's going on here, but more powerfully,
但你会明白这里发生了什么，但更有力的是，

273
00:13:01,270 --> 00:13:04,510
you'll understand how the computer sees that same kind of code,
你将了解计算机如何看到相同类型的代码，

274
00:13:04,510 --> 00:13:08,930
builds up a hierarchical family tree-type structure in memory.
在内存中构建分层家谱类型结构。

275
00:13:08,930 --> 00:13:11,530
And then you can manipulate that tree with code
然后你可以用代码操作那棵树

276
00:13:11,530 --> 00:13:14,800
to actually add more and more information, chat messages, anything
实际添加越来越多的信息，聊天消息，任何东西

277
00:13:14,800 --> 00:13:16,150
on the screen that you like.
在你喜欢的屏幕上。

278
00:13:16,150 --> 00:13:19,000
And finally, we'll tie all of this together
最后，我们将把所有这些联系在一起

279
00:13:19,000 --> 00:13:22,360
by introducing what are called frameworks and libraries,
通过引入所谓的框架和库，

280
00:13:22,360 --> 00:13:26,410
third-party code that makes it a lot easier to solve problems of interest
第三方代码，使解决感兴趣的问题变得更加容易

281
00:13:26,410 --> 00:13:27,140
to you.
给你。

282
00:13:27,140 --> 00:13:30,250
And so in particular, here, this is the very first web app
特别是，这是第一个网络应用程序。

283
00:13:30,250 --> 00:13:33,820
that I myself made back in like 1997.
我自己在 1997 年做的。

284
00:13:33,820 --> 00:13:36,910
I was part of the first-year intramural sports program,
我是第一年校内体育项目的一部分，

285
00:13:36,910 --> 00:13:39,850
not as an athlete but as the programmer, and I was teaching myself
不是作为运动员，而是作为程序员，我在自学

286
00:13:39,850 --> 00:13:41,380
how to build web applications.
如何构建 Web 应用程序。

287
00:13:41,380 --> 00:13:44,410
I only knew C and maybe a little bit of something else at the time.
我当时只知道C，也许还知道一点别的东西。

288
00:13:44,410 --> 00:13:47,320
But this became, for Harvard at least, the very first website
但至少对哈佛来说，这成为第一个网站。

289
00:13:47,320 --> 00:13:50,020
for the first-year intramural sports program,
对于第一年的校内体育项目，

290
00:13:50,020 --> 00:13:53,290
and it wasn't just a static website with links and images and the like.
它不仅仅是一个带有链接和图像等的静态网站。

291
00:13:53,290 --> 00:13:54,190
It was interactive.
它是互动的。

292
00:13:54,190 --> 00:13:55,570
You could register for sports.
你可以注册参加体育运动。

293
00:13:55,570 --> 00:13:58,750
We could input exactly who was in a tournament bracket or the like,
我们可以准确地输入谁在锦标赛或类似的东西中，

294
00:13:58,750 --> 00:14:01,340
and it could actually automatically keep track of this data.
它实际上可以自动跟踪这些数据。

295
00:14:01,340 --> 00:14:04,420
So there too, after just three months of a class like this,
因此，在像这样的课程仅仅三个月之后，

296
00:14:04,420 --> 00:14:06,490
you'll go from writing quite simply this week
本周你会从很简单的写作开始

297
00:14:06,490 --> 00:14:08,950
and next Hello, World to building things like
下一个你好，世界来建造像这样的东西

298
00:14:08,950 --> 00:14:12,430
this for whether it's web, mobile, or other platforms
无论是网络、移动还是其他平台

299
00:14:12,430 --> 00:14:13,822
as well, if you so choose.
以及，如果你愿意的话。

300
00:14:13,822 --> 00:14:17,030
But we'll get you off of the course's infrastructure, by the end of the term.
但我们会在学期结束前让你脱离课程的基础设施。

301
00:14:17,030 --> 00:14:19,570
You won't be using any toy environments along the way.
一路上你不会使用任何玩具环境。

302
00:14:19,570 --> 00:14:23,350
We'll empower you, ultimately, to write code after CS50, especially if this
我们将授权你，最终，在CS50之后编写代码，特别是如果这个

303
00:14:23,350 --> 00:14:27,272
is the only CS class you ever take, on your own Mac or PC,
是你在自己的Mac或PC上使用的唯一CS类，

304
00:14:27,272 --> 00:14:29,980
using the same software, but not the cloud-based version thereof.
使用相同的软件，但不使用基于云的版本。

305
00:14:29,980 --> 00:14:34,060
But all of this software is itself free and can be used by you
但是所有这些软件本身都是免费的，你可以自己使用

306
00:14:34,060 --> 00:14:37,010
powerfully after the course's own end.
在课程结束后有力地。

307
00:14:37,010 --> 00:14:40,760
But along the way, as you may know, there
但一路上，你可能知道，那里

308
00:14:40,760 --> 00:14:43,660
is this tradition within the class, particularly in healthy times,
这是班上的传统，尤其是在健康时期，

309
00:14:43,660 --> 00:14:46,210
of a number of events that really brings people get together,
一系列真正让人们聚在一起的活动，

310
00:14:46,210 --> 00:14:48,040
not just collaboratively and academically,
不仅仅是合作和学术，

311
00:14:48,040 --> 00:14:52,120
but to just solve problems and generally engage with each other as well.
但只是为了解决问题，通常也要相互接触。

312
00:14:52,120 --> 00:14:55,660
Coming up first, CS50 Puzzle Day, which is meant to be not jigsaw
首先，CS50拼图日，这不是拼图

313
00:14:55,660 --> 00:14:58,900
puzzles but logic puzzles that require no prior experience
谜题，但逻辑谜题，不需要事先经验

314
00:14:58,900 --> 00:15:00,460
with computer science or programming.
计算机科学或编程。

315
00:15:00,460 --> 00:15:04,300
But it's just an opportunity to quietly work on a packet of puzzles
但这只是一个安静地研究一包谜题的机会

316
00:15:04,300 --> 00:15:07,270
with some number of friends for prizes and more.
与一些朋友一起获得奖品等等。

317
00:15:07,270 --> 00:15:10,510
Later in the semester, once you tackle your final projects,
在学期后期，一旦你完成了你的期末项目，

318
00:15:10,510 --> 00:15:13,810
the capstone of the course, where we don't give you a homework to write,
课程的顶点，我们不给你写作业，

319
00:15:13,810 --> 00:15:15,910
you yourself come up with something to build.
你自己想出了一些东西来建造。

320
00:15:15,910 --> 00:15:20,320
We'll get together generally
我们一般会聚在一起

321
00:15:20,320 --> 00:15:23,260
wrap up around 7:00 AM, if you so choose.
如果您愿意，请在上午 7：00 左右结束。

322
00:15:23,260 --> 00:15:26,080
And it's an evening, a 12-hour opportunity to collaborate with
这是一个晚上，一个12小时的合作机会

323
00:15:26,080 --> 00:15:30,250
classmates on your very own final project, in a large space on campus,
同学们在你自己的最终项目中，在校园的一个大空间里，

324
00:15:30,250 --> 00:15:31,090
that ends--
这就结束了——

325
00:15:31,090 --> 00:15:33,340
if you're awake with us-- at 5:00 AM.
如果你和我们一起醒来 - 在早上5：00。

326
00:15:33,340 --> 00:15:37,330
We can hop on some CS50 shuttles and go down the road for some pancakes at IHOP
我们可以跳上一些CS50班车，然后在IHOP的路上吃一些煎饼

327
00:15:37,330 --> 00:15:38,710
around 6:00.
6：00左右。

328
00:15:38,710 --> 00:15:43,090
Of course-- of course, this is
当然——当然，这是

329
00:15:43,090 --> 00:15:45,640
but it's an opportunity finally to lead into what's
但这是一个最终进入世界的机会

330
00:15:45,640 --> 00:15:49,800
called the CS50 fair, which is an end of semester celebration, an exhibition,
叫做CS50博览会，这是学期结束的庆祝活动，一个展览，

331
00:15:49,800 --> 00:15:52,300
of everything that you'll accomplish over the coming months.
在接下来的几个月里，你将完成的一切。

332
00:15:52,300 --> 00:15:56,200
And in fact, pictured here are some of your predecessors in healthy times.
事实上，这张照片是你在健康时期的一些前辈。

333
00:15:56,200 --> 00:15:59,200
The CS50 fair allows you to come with your laptop or phone
CS50博览会允许你携带笔记本电脑或手机

334
00:15:59,200 --> 00:16:02,320
and exhibits of students, faculty, and staff across campus
以及校园内学生、教职员工的展览

335
00:16:02,320 --> 00:16:04,420
put together something in person and on video
亲自和视频组合一些东西

336
00:16:04,420 --> 00:16:07,733
that people can delight in seeing, as you exhibit what it is you created
人们可以很高兴看到，因为你展示了你创造的东西

337
00:16:07,733 --> 00:16:10,150
and what you learned over the course of the several weeks.
以及你在几周内学到的东西。

338
00:16:10,150 --> 00:16:14,880
And ultimately, a chance to just share and inspire others as well.
最终，也有机会分享和激励他人。

339
00:16:14,880 --> 00:16:17,600
And you'll all walk home, ultimately, with your own I took
你们都会走回家，最终，我带着你们自己的

340
00:16:17,600 --> 00:16:20,820
CS50 T-shirts saying as much as well.
CS50 T 恤也说了很多。

341
00:16:20,820 --> 00:16:23,820
So with that high level overview of the course,
因此，有了课程的高级概述，

342
00:16:23,820 --> 00:16:27,890
I propose that we begin to take a look at what computer science itself is
我建议我们开始看看计算机科学本身是什么。

343
00:16:27,890 --> 00:16:31,010
and what it is we're going to be doing over the next several weeks
以及我们将在未来几周内做什么

344
00:16:31,010 --> 00:16:32,780
at this lower level [INAUDIBLE] too.
在这个较低的水平[听不清]也是如此。

345
00:16:32,780 --> 00:16:34,130
So what is computer science?
那么什么是计算机科学呢？

346
00:16:34,130 --> 00:16:34,630
Right?
右？

347
00:16:34,630 --> 00:16:38,240
If you're maybe like me or new people like my friends in high school,
如果你像我一样，或者像我高中时的朋友一样的新人，

348
00:16:38,240 --> 00:16:40,310
you probably assume that it means programming.
你可能认为这意味着编程。

349
00:16:40,310 --> 00:16:44,040
And that's absolutely a big part of it for a lot of people, because with code,
对于很多人来说，这绝对是其中很重要的一部分，因为对于代码，

350
00:16:44,040 --> 00:16:46,770
you can write, you can express ideas, and solve actual problems,
你会写作，你可以表达想法，解决实际问题，

351
00:16:46,770 --> 00:16:48,110
especially involving data.
特别是涉及数据。

352
00:16:48,110 --> 00:16:52,100
But computer science itself is really the study of information, if you will.
但计算机科学本身实际上是对信息的研究，如果你愿意的话。

353
00:16:52,100 --> 00:16:55,170
How do you represent it, and how do you actually process it?
你如何表示它，你如何实际处理它？

354
00:16:55,170 --> 00:16:57,290
And in that sense, computational thinking
从这个意义上说，计算思维

355
00:16:57,290 --> 00:17:02,090
is just the application of ideas from computer science, a course like this,
只是计算机科学思想的应用，像这样的课程，

356
00:17:02,090 --> 00:17:05,880
to problems of interest to you, again, in the arts, humanities, sciences,
再次，在艺术、人文、科学方面，你感兴趣的问题，

357
00:17:05,880 --> 00:17:09,089
social sciences, whatever the domain of interest is to you.
社会科学，无论你感兴趣的领域是什么。

358
00:17:09,089 --> 00:17:13,040
So with that, if computer science is all about information and with it
因此，如果计算机科学是关于信息的，那么它就是这样。

359
00:17:13,040 --> 00:17:16,770
the solving of problems, well, what does it actually mean to solve a problem?
解决问题，那么，解决问题到底意味着什么？

360
00:17:16,770 --> 00:17:20,992
Let's see if we can't propose a model into which all of the lessons learned
让我们看看我们是否不能提出一个将所有经验教训都纳入其中的模型

361
00:17:20,992 --> 00:17:21,950
will ultimately follow.
最终将随之而来。

362
00:17:21,950 --> 00:17:25,188
And I'd propose that this is problem solving.
我建议这是解决问题的方法。

363
00:17:25,188 --> 00:17:27,980
You've got some input, which is like the problem you want to solve.
你有一些输入，就像你想要解决的问题一样。

364
00:17:27,980 --> 00:17:29,070
The goal is to solve it.
目标是解决它。

365
00:17:29,070 --> 00:17:31,400
So that's the so-called output, and then somewhere
这就是所谓的输出，然后在某个地方

366
00:17:31,400 --> 00:17:34,970
in here, the proverbial black box, is some kind of secret sauce
在这里，众所周知的黑匣子，是某种秘密调味料

367
00:17:34,970 --> 00:17:36,233
that gets the work done.
这样就可以完成工作。

368
00:17:36,233 --> 00:17:38,900
And in the coming months, we'll have to decide, well, how are we
在接下来的几个月里，我们将不得不决定，好吧，我们如何

369
00:17:38,900 --> 00:17:42,440
going to represent these inputs and outputs, and really, how do we code up?
将表示这些输入和输出，实际上，我们如何编码？

370
00:17:42,440 --> 00:17:46,490
How do we write solutions for what it is that's solving the problem of interest
我们如何为解决感兴趣的问题编写解决方案

371
00:17:46,490 --> 00:17:47,310
to us?
给我们？

372
00:17:47,310 --> 00:17:50,900
So when it comes to representation of information, like there's a lot of ways
因此，当涉及到信息的表示时，有很多方法。

373
00:17:50,900 --> 00:17:51,560
we can do this.
我们可以做到这一点。

374
00:17:51,560 --> 00:17:53,477
And for instance, if the problem at hand quite
例如，如果手头的问题相当

375
00:17:53,477 --> 00:17:56,180
simply is to take attendance at the beginning of class,
简单来说就是在上课开始时就考勤，

376
00:17:56,180 --> 00:17:59,340
on the first day of school, well, how could we go about doing this?
在开学的第一天，好吧，我们怎么能做到这一点呢？

377
00:17:59,340 --> 00:18:02,480
Well, we could actually use a system called unary.
好吧，我们实际上可以使用一个称为一元的系统。

378
00:18:02,480 --> 00:18:03,420
Well, what is that?
嗯，那是什么？

379
00:18:03,420 --> 00:18:08,300
Well, that's a fancy way of saying 1, 2, 3, 4, 5, maybe 6, 7, 8, 9, 10.
嗯，这是一种说1,2,3,4,5，也许是6,7,8,9,10的奇特方式。

380
00:18:08,300 --> 00:18:10,130
And I can use my digits--
我可以使用我的数字——

381
00:18:10,130 --> 00:18:13,298
pun intended-- on my fingers to actually count everyone up.
双关语 - 在我的手指上实际上计算每个人。

382
00:18:13,298 --> 00:18:16,340
And eventually, you need toes and whatnots, if you have to count so high.
最终，你需要脚趾什么的，如果你必须数得这么高的话。

383
00:18:16,340 --> 00:18:19,310
But unary is a very simple system of using
但是一元是一个非常简单的使用系统

384
00:18:19,310 --> 00:18:22,872
a single symbol, a human finger in this case, to just solve some problem,
一个符号，在这种情况下是人类的手指，只是解决一些问题，

385
00:18:22,872 --> 00:18:24,830
like counting the number of people in the room.
就像数房间里的人数一样。

386
00:18:24,830 --> 00:18:27,950
Let's make this slightly more technical for a moment, a little more mathy.
让我们暂时让这个稍微技术性更强一点，更数学一点。

387
00:18:27,950 --> 00:18:31,280
That's just called base-1, where the base under which you're operating
这就是所谓的base-1，你在其中操作的基础

388
00:18:31,280 --> 00:18:34,700
has one digit in it, like literally a human finger, and maybe
里面有一个数字，就像字面上的人类手指，也许

389
00:18:34,700 --> 00:18:36,920
multiple such fingers, if you need to count higher.
多个这样的手指，如果你需要数得更高。

390
00:18:36,920 --> 00:18:39,890
But of course, most of you, if not all of you,
但是，当然，你们中的大多数人，如果不是你们所有人，

391
00:18:39,890 --> 00:18:44,680
generally, vaguely know that computers use something other than unary--
一般来说，模糊地知道计算机使用非一元的东西——

392
00:18:44,680 --> 00:18:47,180
and even you and I probably don't use this that often-- they
甚至你和我可能也不经常使用它——他们

393
00:18:47,180 --> 00:18:50,430
use what language or alphabet instead.
请改用哪种语言或字母表。

394
00:18:50,430 --> 00:18:50,930
Yeah.
是的。

395
00:18:50,930 --> 00:18:55,980
So binary, so binary is indeed the system that computers somehow use.
如此二进制，如此二进制确实是计算机以某种方式使用的系统。

396
00:18:55,980 --> 00:19:00,410
So in this case, bi implying two, and so computers have two digits,
所以在这种情况下，bi 意味着两个，所以计算机有两个数字，

397
00:19:00,410 --> 00:19:01,760
it turns out, at their disposal.
事实证明，由他们支配。

398
00:19:01,760 --> 00:19:04,680
And in fact, if you've ever heard the technical term bit,
事实上，如果你曾经听说过技术术语bit，

399
00:19:04,680 --> 00:19:07,490
which is like a smaller version of a byte-- more on that soon.
这就像一个字节的较小版本——很快就会有更多内容。

400
00:19:07,490 --> 00:19:10,882
Well, a binary digit is the origin of that term "Bit,"
好吧，二进制数字是术语“位”的起源，

401
00:19:10,882 --> 00:19:14,090
because if you get rid of some of the letters, and are left from binary digit
因为如果你去掉一些字母，并且从二进制数字中留下

402
00:19:14,090 --> 00:19:15,965
with just B-I-T, thus is a bit.
只有 B-I-T，因此有点。

403
00:19:15,965 --> 00:19:17,990
A bit is just a 0 and 1.
位只是 0 和 1。

404
00:19:17,990 --> 00:19:20,750
It's two more digits than you might have on your own finger,
它比你自己手指上的数字多两个数字，

405
00:19:20,750 --> 00:19:23,030
and of course, it's fewer though than you and I have.
当然，它比你我少。

406
00:19:23,030 --> 00:19:25,820
You and I typically use, as humans, the decimal system.
作为人类，你和我通常使用十进制系统。

407
00:19:25,820 --> 00:19:29,390
Dec meaning 10, because you and I generally use 0 through 9.
Dec的意思是10，因为你和我通常使用0到9。

408
00:19:29,390 --> 00:19:30,800
So on the one hand--
所以一方面——

409
00:19:30,800 --> 00:19:32,930
another pun intended-- you've got unary.
另一个双关语的意思是——你有一元。

410
00:19:32,930 --> 00:19:34,640
Computers use binary.
计算机使用二进制。

411
00:19:34,640 --> 00:19:37,760
We humans generally think and talk in terms of decimal.
我们人类通常以十进制来思考和说话。

412
00:19:37,760 --> 00:19:40,370
But at the end of the day, these are fundamentally
但归根结底，这些从根本上说是

413
00:19:40,370 --> 00:19:42,320
going to be the same thing, which is to say
将是同样的事情，也就是说

414
00:19:42,320 --> 00:19:44,090
that it's all pretty accessible to us.
这一切都对我们来说很容易获得。

415
00:19:44,090 --> 00:19:47,610
Even if you're not a computer person, I daresay you're about to be.
即使你不是一个计算机人，我敢说你即将成为一个。

416
00:19:47,610 --> 00:19:48,620
So what is a bit?
那么什么是位呢？

417
00:19:48,620 --> 00:19:51,590
Well, a bit then is a 0 or a 1.
好吧，那么一点是 0 或 1。

418
00:19:51,590 --> 00:19:53,570
That is a so-called binary digit.
这就是所谓的二进制数字。

419
00:19:53,570 --> 00:19:56,090
But how do computers only speak in binary?
但是计算机怎么只用二进制说话呢？

420
00:19:56,090 --> 00:19:59,360
How do they solve problems, represent information, using only binary?
他们如何解决问题，仅使用二进制来表示信息？

421
00:19:59,360 --> 00:20:02,750
Well, at the end of the day, if they want to represent 0 and 1,
好吧，归根结底，如果他们想代表 0 和 1，

422
00:20:02,750 --> 00:20:05,300
we need to do so physically somehow.
我们需要以某种方式在身体上这样做。

423
00:20:05,300 --> 00:20:10,190
And I daresay that maybe the simplest way to think about a bit, a 0 or a 1,
我敢说，也许是思考一点的最简单方法，0或1，

424
00:20:10,190 --> 00:20:11,310
is like a light bulb.
就像一个灯泡。

425
00:20:11,310 --> 00:20:15,020
And so by human convention, let's just assume that if you were a computer,
因此，按照人类的惯例，让我们假设如果你是一台计算机，

426
00:20:15,020 --> 00:20:17,060
be it a laptop, desktop, phone, or the like,
无论是笔记本电脑、台式机、手机还是类似产品，

427
00:20:17,060 --> 00:20:20,030
and you want to represent the number 0, you
你想代表数字0，你

428
00:20:20,030 --> 00:20:22,770
know what, you just keep the light switch off.
知道吗，你只要把电灯开关关掉。

429
00:20:22,770 --> 00:20:24,290
You keep a light bulb off.
你关掉一个灯泡。

430
00:20:24,290 --> 00:20:26,210
If by contrast, you're that same computer,
如果相比之下，你们是同一台计算机，

431
00:20:26,210 --> 00:20:28,160
and you want to represent the number 1, you
你想代表数字 1，你

432
00:20:28,160 --> 00:20:30,990
take that same switch, that same light bulb, and just turn it on.
拿起同样的开关，同样的灯泡，然后打开它。

433
00:20:30,990 --> 00:20:34,400
So a light bulb that's on represents a 1, and a light bulb that's off
因此，打开的灯泡表示 1，而灯泡表示关闭

434
00:20:34,400 --> 00:20:35,840
represents a 0.
表示 0。

435
00:20:35,840 --> 00:20:37,928
So why is this relevant to computers?
那么，为什么这与计算机有关呢？

436
00:20:37,928 --> 00:20:40,970
Well, at the end of the day, you and I are charging our laptops or phones
好吧，归根结底，你和我正在为我们的笔记本电脑或手机充电

437
00:20:40,970 --> 00:20:41,340
at night.
在晚上。

438
00:20:41,340 --> 00:20:44,390
So there's some physical resource being replenished there, whether you're
所以那里有一些物质资源正在补充，无论你是

439
00:20:44,390 --> 00:20:46,020
on battery or some power cord.
使用电池或某些电源线。

440
00:20:46,020 --> 00:20:48,990
And so inside of a computer are just thousands,
所以在计算机内部只有数千个，

441
00:20:48,990 --> 00:20:51,433
millions of tiny little switches, nowadays.
如今，数以百万计的微小开关。

442
00:20:51,433 --> 00:20:53,600
You can think of them metaphorically as light bulbs,
你可以把它们比喻成灯泡，

443
00:20:53,600 --> 00:20:55,430
but they don't actually shine light.
但它们实际上并没有发光。

444
00:20:55,430 --> 00:20:57,740
But there are tiny, tiny little switches,
但是有微小的开关，

445
00:20:57,740 --> 00:21:01,430
and those switches, if you've ever heard the term, are just called transistors.
这些开关，如果你听说过这个词，就叫做晶体管。

446
00:21:01,430 --> 00:21:04,520
So like computers have millions of transistors that can either be flipped
所以就像计算机有数百万个晶体管一样，这些晶体管可以翻转。

447
00:21:04,520 --> 00:21:08,390
on to represent 1's or flipped off to represent 0's.
on 表示 1，或翻转表示 0。

448
00:21:08,390 --> 00:21:12,440
And from that very simple mechanism, electricity is there,
从这个非常简单的机制中，电就在那里，

449
00:21:12,440 --> 00:21:15,110
or it's not, a 1 or a 0.
或者不是，1 或 0。

450
00:21:15,110 --> 00:21:19,070
Computers can actually count, obviously, from 0 to 1,
显然，计算机实际上可以从0数到1，

451
00:21:19,070 --> 00:21:23,160
but it turns out, even higher, if they use a little more electricity as well.
但事实证明，如果他们也使用更多的电力，甚至更高。

452
00:21:23,160 --> 00:21:24,420
So how might I do this?
那么我该怎么做呢？

453
00:21:24,420 --> 00:21:27,740
Well, let me go ahead and propose that I just grab one of our own light bulbs
好吧，让我继续提议我只拿一个我们自己的灯泡

454
00:21:27,740 --> 00:21:28,500
here on stage.
在舞台上。

455
00:21:28,500 --> 00:21:29,210
This one is off.
这个是关闭的。

456
00:21:29,210 --> 00:21:32,060
So for instance, if this were miniaturized inside of your Mac, PC,
因此，例如，如果这是在你的Mac，PC内部小型化的，

457
00:21:32,060 --> 00:21:34,517
or phone, this would be a transistor, and indeed, here's
或者手机，这将是一个晶体管，事实上，这是

458
00:21:34,517 --> 00:21:35,850
the little switch on the bottom.
底部的小开关。

459
00:21:35,850 --> 00:21:39,320
And if your computer wants to represent a 0, it just leaves the switch off,
如果你的计算机想要表示 0，它只需关闭开关，

460
00:21:39,320 --> 00:21:40,910
and the light is not shining.
而且光线不闪耀。

461
00:21:40,910 --> 00:21:43,670
If you want to represent a 1, well now, I've counted as high
如果你想代表一个1，那么现在，我已经数了

462
00:21:43,670 --> 00:21:45,193
as 1, because the switch is now on.
作为 1，因为开关现在打开。

463
00:21:45,193 --> 00:21:46,610
I've grabbed a little electricity.
我抢了一点电。

464
00:21:46,610 --> 00:21:48,540
I'm holding on to it inside of the computer,
我在电脑里面抓着它，

465
00:21:48,540 --> 00:21:50,598
and so now I see that this is a 1.
所以现在我看到这是一个 1。

466
00:21:50,598 --> 00:21:53,390
All right, but unfortunately, with just one switch, one light bulb,
好吧，但不幸的是，只有一个开关，一个灯泡，

467
00:21:53,390 --> 00:21:56,630
I can only count from 0 to 1.
我只能从 0 数到 1。

468
00:21:56,630 --> 00:21:59,475
How do I count out higher, might you think, intuitively?
我如何直观地计算出更高的数字？

469
00:21:59,475 --> 00:22:00,350
AUDIENCE: [INAUDIBLE]
观众：[听不清]

470
00:22:00,350 --> 00:22:01,070
DAVID J. MALAN: Say it again.
DAVID J. MALAN：再说一遍。

471
00:22:01,070 --> 00:22:01,430
AUDIENCE: More lightbulbs.
观众：更多的灯泡。

472
00:22:01,430 --> 00:22:02,900
DAVID J. MALAN: Yeah, so more light bulbs.
DAVID J. MALAN：是的，所以更多的灯泡。

473
00:22:02,900 --> 00:22:03,650
So let me do this.
所以让我来做这个。

474
00:22:03,650 --> 00:22:07,760
Let me just grab something to put these on, so I can use a few of them
让我拿一些东西来穿上这些，这样我就可以使用其中的一些

475
00:22:07,760 --> 00:22:08,270
at a time.
一次。

476
00:22:08,270 --> 00:22:11,720
And let me propose that here, instead of having just one light bulb,
让我在这里提出，而不是只有一个灯泡，

477
00:22:11,720 --> 00:22:14,150
let me give myself maybe three in total.
让我给自己总共三个。

478
00:22:14,150 --> 00:22:17,748
So all of them are initially off, and if you think of this in miniature form,
所以它们最初都是关闭的，如果你把它想象成微型形式，

479
00:22:17,748 --> 00:22:20,540
in your mind's eye, this is like a computer with three transistors.
在你的脑海中，这就像一台有三个晶体管的计算机。

480
00:22:20,540 --> 00:22:24,860
Three switches representing now the number you and I know as 0.
三个开关代表现在你和我所知道的数字 0。

481
00:22:24,860 --> 00:22:25,490
Why?
为什么？

482
00:22:25,490 --> 00:22:27,150
They're just all off.
他们都关掉了。

483
00:22:27,150 --> 00:22:30,450
So how does a computer go about representing the number 1?
那么计算机如何表示数字1呢？

484
00:22:30,450 --> 00:22:33,230
Well, it turns on one of these light bulbs.
好吧，它打开其中一个灯泡。

485
00:22:33,230 --> 00:22:35,600
And how does the computer represent the number 2?
计算机如何表示数字 2？

486
00:22:35,600 --> 00:22:39,900
Well, you might think, if I may, you just turn on a second light bulb.
好吧，你可能会想，如果可以的话，你只要打开第二个灯泡。

487
00:22:39,900 --> 00:22:42,290
And if you might think, how does a computer represent 3?
如果你可能会想，计算机如何代表 3？

488
00:22:42,290 --> 00:22:44,250
You just turn on the third light bulb.
你只需打开第三个灯泡。

489
00:22:44,250 --> 00:22:47,150
And so as such, with three bits, a computer
因此，用三个位，一台计算机

490
00:22:47,150 --> 00:22:51,020
would seem to be able to count from 0 on up to 1, 2, 3.
似乎可以从 0 数到 1、2、3。

491
00:22:51,020 --> 00:22:53,480
But it turns out, if I'm a little smarter here,
但事实证明，如果我在这里更聪明一点，

492
00:22:53,480 --> 00:22:55,760
I can actually count higher than that.
我实际上可以数得比这更高。

493
00:22:55,760 --> 00:22:56,310
Why?
为什么？

494
00:22:56,310 --> 00:22:59,060
Well, I'm just considering the combination of bulbs being on here.
好吧，我只是在考虑这里的灯泡组合。

495
00:22:59,060 --> 00:23:00,435
What if I do something like this?
如果我做这样的事情怎么办？

496
00:23:00,435 --> 00:23:04,160
This is still 0, I will claim, but what if I propose now that this
这仍然是 0，我会声称，但如果我现在提议这个

497
00:23:04,160 --> 00:23:06,800
will be how a computer represents 1--
将是计算机如何表示 1--

498
00:23:06,800 --> 00:23:08,840
on, off, off.
开，关，关。

499
00:23:08,840 --> 00:23:12,680
This, though, will be how the computer represents 2.
不过，这将是计算机表示 2 的方式。

500
00:23:12,680 --> 00:23:14,360
Notice, I didn't turn on the same two.
注意，我没有打开相同的两个。

501
00:23:14,360 --> 00:23:16,430
I'm just turning on the one in the middle.
我只是打开中间的那个。

502
00:23:16,430 --> 00:23:19,820
This I now claim will be how a computer represents 3.
我现在声称这将是计算机如何表示 3.

503
00:23:19,820 --> 00:23:22,190
This is going to be-- in just a second--
这将在一秒钟内

504
00:23:22,190 --> 00:23:26,450
how a computer represents the number we know as 4,
计算机如何将我们所知道的数字表示为 4，

505
00:23:26,450 --> 00:23:28,550
and yet, I'm still only using three bulbs.
然而，我仍然只使用三个灯泡。

506
00:23:28,550 --> 00:23:32,600
This is going to be the number the computer represents as 5.
这将是计算机表示为 5 的数字。

507
00:23:32,600 --> 00:23:36,530
This is going to be how the computer represents the number 6,
这将是计算机表示数字 6 的方式，

508
00:23:36,530 --> 00:23:39,030
and then lastly, it turns out, with three light bulbs,
最后，事实证明，有三个灯泡，

509
00:23:39,030 --> 00:23:42,380
if you're smart about it, you can count it seems as high as 7.
如果你对它很聪明，你可以数它似乎高达7。

510
00:23:42,380 --> 00:23:46,220
Now, even if you lost track of what I was turning on and why,
现在，即使你忘记了我打开了什么以及为什么，

511
00:23:46,220 --> 00:23:49,070
I claim there were eight different patterns, from all of them
我声称有八种不同的模式，从所有这些模式中

512
00:23:49,070 --> 00:23:50,470
off to all of them on.
对他们所有人开放。

513
00:23:50,470 --> 00:23:52,220
But notice that I started to permute them.
但请注意，我开始排列它们。

514
00:23:52,220 --> 00:23:55,220
I took into account which ones were on and which ones were off.
我考虑了哪些是打开的，哪些是关闭的。

515
00:23:55,220 --> 00:23:59,600
Why, though, do these represent the numbers we know as 0 through 7?
但是，为什么这些代表我们所知道的数字 0 到 7？

516
00:23:59,600 --> 00:24:02,503
Well, let me go ahead, and maybe let's do this.
好吧，让我继续，也许让我们这样做。

517
00:24:02,503 --> 00:24:04,670
Instead of just considering there to be light bulbs,
而不是仅仅考虑有灯泡，

518
00:24:04,670 --> 00:24:09,650
let's assign some special significance to each of them, based on where it is.
让我们根据它们的位置为它们中的每一个分配一些特殊意义。

519
00:24:09,650 --> 00:24:15,350
And maybe for this, could we get maybe three volunteers, three volunteer?
也许为此，我们能不能找三个志愿者，三个志愿者？

520
00:24:15,350 --> 00:24:16,438
OK.
还行。

521
00:24:16,438 --> 00:24:17,480
You're being volunteered.
你被志愿服务了。

522
00:24:17,480 --> 00:24:17,690
OK.
还行。

523
00:24:17,690 --> 00:24:18,210
Come on up.
来吧。

524
00:24:18,210 --> 00:24:19,610
If you want to go over to the stage there.
如果你想去那里的舞台。

525
00:24:19,610 --> 00:24:19,760
Yeah.
是的。

526
00:24:19,760 --> 00:24:22,350
You want to come on up as well, and over here as well.
你也想上来，也想在这里。

527
00:24:22,350 --> 00:24:24,530
So there are some stairs on either end.
所以两端都有一些楼梯。

528
00:24:24,530 --> 00:24:27,440
Maybe a round of applause for our first volunteers of term.
也许为我们学期的第一批志愿者鼓掌。

529
00:24:27,440 --> 00:24:30,842
[APPLAUSE]
[掌声]

530
00:24:30,842 --> 00:24:34,050


531
00:24:34,050 --> 00:24:34,550
All right.
好吧。

532
00:24:34,550 --> 00:24:37,670
So you want to be our number 1, and if you want to go ahead and stand
所以你想成为我们的第一，如果你想继续前进并站起来

533
00:24:37,670 --> 00:24:38,633
roughly right here.
大致就在这里。

534
00:24:38,633 --> 00:24:40,175
How about do you want to be number 2?
你想成为第二名怎么样？

535
00:24:40,175 --> 00:24:41,330
AUDIENCE: Yeah.
观众：是的。

536
00:24:41,330 --> 00:24:43,970
DAVID J. MALAN: Come on over right to the right of here,
DAVID J. MALAN：从右边过来，

537
00:24:43,970 --> 00:24:46,090
and you'll be number 4, it turns out.
事实证明，你会成为第 4 名。

538
00:24:46,090 --> 00:24:48,320
If you want to come over here, on this end,
如果你想来这里，在这一端，

539
00:24:48,320 --> 00:24:52,460
let's give you all a moment to introduce yourselves briefly to your classmates,
让我们给大家一点时间向同学们简单介绍一下自己，

540
00:24:52,460 --> 00:24:53,120
if you'd like.
如果你愿意。

541
00:24:53,120 --> 00:24:53,662
AUDIENCE: Hi.
观众：你好。

542
00:24:53,662 --> 00:24:54,350
I'm Ellie.
我是艾莉。

543
00:24:54,350 --> 00:24:56,120
I'm a senior.
我是大四学生。

544
00:24:56,120 --> 00:24:57,440
DAVID J. MALAN: Nice to meet.
DAVID J. MALAN：很高兴认识。

545
00:24:57,440 --> 00:24:59,840
AUDIENCE: I'm [? Rayhanna, ?] and I'm a first year.
观众：我是[？雷哈娜，？我是一年级的。

546
00:24:59,840 --> 00:25:00,978
DAVID J. MALAN: Welcome.
DAVID J. MALAN：欢迎。

547
00:25:00,978 --> 00:25:01,520
AUDIENCE: Hi.
观众：你好。

548
00:25:01,520 --> 00:25:03,850
I'm Joseph, and I am a first year.
我是约瑟夫，我是一年级的学生。

549
00:25:03,850 --> 00:25:04,850
DAVID J. MALAN: Welcome.
DAVID J. MALAN：欢迎。

550
00:25:04,850 --> 00:25:05,350
All right.
好吧。

551
00:25:05,350 --> 00:25:07,250
So so glad to have all three of you up here.
很高兴你们三个都在这里。

552
00:25:07,250 --> 00:25:07,940
Thank you.
谢谢。

553
00:25:07,940 --> 00:25:10,940
[APPLAUSE]
[掌声]

554
00:25:10,940 --> 00:25:14,470
Let me propose now that we'd like you three
现在让我提议，我们想要你们三个

555
00:25:14,470 --> 00:25:16,480
to represent how about the number 0.
来表示数字 0 怎么样。

556
00:25:16,480 --> 00:25:19,930
And I claim now that if each of you now represents a switch,
我现在声称，如果你们每个人现在代表一个开关，

557
00:25:19,930 --> 00:25:21,790
you have fancier light bulbs now.
你现在有更漂亮的灯泡了。

558
00:25:21,790 --> 00:25:22,400
One is a 1.
一个是 1。

559
00:25:22,400 --> 00:25:22,900
One is a 2.
一个是2。

560
00:25:22,900 --> 00:25:25,150
One is a 4, but each of you is still just has a switch
一个是4，但你们每个人仍然只有一个开关

561
00:25:25,150 --> 00:25:27,340
on the bottom, in fact, of your plastic devices.
事实上，在你的塑料设备的底部。

562
00:25:27,340 --> 00:25:30,520
I claim these three volunteers are representing the number 0.
我声称这三名志愿者代表数字0。

563
00:25:30,520 --> 00:25:34,240
Let me ask you all now, how might you represent the number 1?
现在让我问大家，你们如何代表数字1？

564
00:25:34,240 --> 00:25:36,240
How should you cooperate here?
你应该如何在这里合作？

565
00:25:36,240 --> 00:25:36,740
OK.
还行。

566
00:25:36,740 --> 00:25:39,337
So we would have on, off, off, which I think
所以我们会开，关，关，我想

567
00:25:39,337 --> 00:25:41,170
matches what I did with my three light bulbs
与我用三个灯泡所做的相匹配

568
00:25:41,170 --> 00:25:43,087
as well, if you want to go and turn yours off.
同样，如果你想去关掉你的。

569
00:25:43,087 --> 00:25:46,910
How might you three represent the number 2?
你们三个如何代表数字2？

570
00:25:46,910 --> 00:25:50,420
OK, so off, on, off now, from right to left.
好的，所以关闭，现在打开，关闭，从右到左。

571
00:25:50,420 --> 00:25:54,020
How would you three represent the number 3?
你们三个如何代表数字3？

572
00:25:54,020 --> 00:25:57,043
Ah, so that's why my two light bulbs went on at the end.
啊，这就是为什么我的两个灯泡在最后亮了。

573
00:25:57,043 --> 00:25:58,835
How would you three represent the number 4?
你们三个如何代表数字4？

574
00:25:58,835 --> 00:26:02,620


575
00:26:02,620 --> 00:26:03,120
Perfect.
完善。

576
00:26:03,120 --> 00:26:10,357
Number 5, number 6, and number 7?
5号、6号和7号？

577
00:26:10,357 --> 00:26:11,690
All right, and give us one more.
好吧，再给我们一个。

578
00:26:11,690 --> 00:26:14,184
How would you represent 8?
你会如何代表 8？

579
00:26:14,184 --> 00:26:15,000
AUDIENCE: We can't.
观众：我们不能。

580
00:26:15,000 --> 00:26:15,320
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

581
00:26:15,320 --> 00:26:16,190
You can't.
你不能。

582
00:26:16,190 --> 00:26:20,250
How about then one more volunteer, one more volunteer?
那么再多一个志愿者，再多一个志愿者怎么样？

583
00:26:20,250 --> 00:26:20,750
OK.
还行。

584
00:26:20,750 --> 00:26:21,470
Come on up.
来吧。

585
00:26:21,470 --> 00:26:25,350


586
00:26:25,350 --> 00:26:25,850
All right.
好吧。

587
00:26:25,850 --> 00:26:26,617
What's your name?
你叫什么名字？

588
00:26:26,617 --> 00:26:27,950
AUDIENCE: My name is [? Moin. ?]
观众：我的名字是[？莫因。?]

589
00:26:27,950 --> 00:26:28,610
DAVID J. MALAN: If you want to say it into there.
DAVID J. MALAN：如果你想说出来的话。

590
00:26:28,610 --> 00:26:29,390
AUDIENCE: My name is [? Moin. ?]
观众：我的名字是[？莫因。?]

591
00:26:29,390 --> 00:26:30,260
DAVID J. MALAN: All right, [? and Moin, ?] you're
DAVID J. MALAN：好吧，[？和Moin，？]你是

592
00:26:30,260 --> 00:26:33,590
going to be number 8, and if now you all-- actually, let's make this
将成为第8名，如果现在你们都 - 实际上，让我们制作这个

593
00:26:33,590 --> 00:26:37,430
how would you represent number 8, all collectively, as 4 bits
你将如何将数字 8 全部统称为 4 位

594
00:26:37,430 --> 00:26:40,150
or for switches?
还是开关？

595
00:26:40,150 --> 00:26:42,340
OK, 8, and now lastly, give me 15.
好的，8，现在最后，给我15。

596
00:26:42,340 --> 00:26:46,380


597
00:26:46,380 --> 00:26:49,835
Everyone's awkwardly doing arithmetic in their head, oh, using unary.
每个人都笨拙地在脑子里做算术，哦，使用一元。

598
00:26:49,835 --> 00:26:52,940


599
00:26:52,940 --> 00:26:53,440
Yeah.
是的。

600
00:26:53,440 --> 00:26:55,150
Is that everyone--
难道大家——

601
00:26:55,150 --> 00:26:55,720
Yes.
是的。

602
00:26:55,720 --> 00:26:56,290
OK.
还行。

603
00:26:56,290 --> 00:26:57,670
Round of applause.
掌声响起。

604
00:26:57,670 --> 00:26:58,180
OK.
还行。

605
00:26:58,180 --> 00:27:00,610
Thank you all.
谢谢大家。

606
00:27:00,610 --> 00:27:03,730
If you want to leave your numbers over here,
如果你想把你的号码留在这里，

607
00:27:03,730 --> 00:27:07,107
we have a CS50 stress ball for you, but thank you for volunteering.
我们为你准备了一个CS50压力球，但感谢你的志愿服务。

608
00:27:07,107 --> 00:27:09,440
You can turn those numbers off and leave them over here.
你可以关闭这些号码并将它们留在这里。

609
00:27:09,440 --> 00:27:11,500
So thank you.
所以谢谢你。

610
00:27:11,500 --> 00:27:19,160
So how do we go about-- how do we go from there to creating these patterns?
那么我们如何去做——我们如何从那里开始创造这些模式呢？

611
00:27:19,160 --> 00:27:24,340
Well, even though we still had three bits, initially, and three switches,
好吧，即使我们最初仍然有三个位和三个开关，

612
00:27:24,340 --> 00:27:28,720
later four bits and four switches, ultimately, we still
后来四位四开关，最终，我们仍然

613
00:27:28,720 --> 00:27:32,860
used the same approach fundamentally to actually representing information.
从根本上使用相同的方法来实际表示信息。

614
00:27:32,860 --> 00:27:35,020
And now why were they those patterns, and why
现在为什么它们会是这些模式，为什么

615
00:27:35,020 --> 00:27:38,150
did I very deliberately have our volunteers line up in that way?
我是否非常刻意让我们的志愿者以这种方式排队？

616
00:27:38,150 --> 00:27:40,960
Well, I wanted them using base-2, a.k.a.
好吧，我希望他们使用base-2，又名。

617
00:27:40,960 --> 00:27:44,140
binary, but with binary there comes certain rules.
二进制，但二进制有一定的规则。

618
00:27:44,140 --> 00:27:46,420
And even if you're not familiar with binary
即使你不熟悉二进制

619
00:27:46,420 --> 00:27:49,510
beyond that it exists and relates somehow to computers,
除此之外，它存在并以某种方式与计算机相关，

620
00:27:49,510 --> 00:27:52,330
it's actually pretty much identical to the system you and I use
它实际上与你和我使用的系统几乎相同

621
00:27:52,330 --> 00:27:54,790
every day, known as base 10, a.k.a.
每天，被称为基地10，又名

622
00:27:54,790 --> 00:27:55,520
decimal.
十进制。

623
00:27:55,520 --> 00:27:58,900
So let's consider, if you will, by rewinding to primary school for just
因此，如果你愿意的话，让我们考虑一下，只需倒回小学

624
00:27:58,900 --> 00:28:00,370
a moment, like how decimal works.
一会儿，就像十进制的工作原理。

625
00:28:00,370 --> 00:28:03,820
And you'll see that even if you're not a computer person, you actually are.
你会发现，即使你不是一个计算机人，你实际上是。

626
00:28:03,820 --> 00:28:06,410
You just have to tweak your mental model ever so slightly.
你只需要稍微调整一下你的心智模型。

627
00:28:06,410 --> 00:28:10,330
So here is the number that you're probably viewing as 123,
所以这是你可能看到的数字是123，

628
00:28:10,330 --> 00:28:11,510
but why is that?
但这是为什么呢？

629
00:28:11,510 --> 00:28:13,240
Well, it's not really 123.
好吧，这不是真正的 123。

630
00:28:13,240 --> 00:28:19,990
This is just a pattern of three symbols on the screen, 1, 2, 3, and your mind
这只是屏幕上三个符号的图案，1,2,3和你的头脑

631
00:28:19,990 --> 00:28:23,967
is rapidly assigning mathematical meaning to them, 123, but why is that?
正在迅速地赋予他们数学意义， 123， 但为什么呢？

632
00:28:23,967 --> 00:28:26,550
Well, if you're like me, you probably learned back in the day,
好吧，如果你像我一样，你可能在当年学到，

633
00:28:26,550 --> 00:28:29,800
when you have a three-digit number like, this the rightmost number
当你有一个三位数的数字时，这是最右边的数字

634
00:28:29,800 --> 00:28:32,800
is in the 1's place, the middle digit is the 10's place,
在 1 的位置，中间数字是 10 的位置，

635
00:28:32,800 --> 00:28:35,870
the leftmost digit is in the 100's place, and why is that relevant?
最左边的数字在 100 的位置，为什么这很重要？

636
00:28:35,870 --> 00:28:39,580
Well, if you then quickly do some mental math, as you and I just do instantly
好吧，如果你然后快速做一些心算，就像你和我一样立即做

637
00:28:39,580 --> 00:28:44,170
nowadays, that just means 100 times 1 plus 10 times 2 plus 1 times
如今，这只意味着 100 乘以 1 加 10 乘以 2 加 1 倍

638
00:28:44,170 --> 00:28:50,500
3, of course, 100 plus 20 plus 3 gives us the number you and I know as 123.
3，当然，100加20加3给了我们你我都知道的数字123。

639
00:28:50,500 --> 00:28:55,630
But beyond that, how do we get to just two digits instead of as many as 9
但除此之外，我们如何达到两位数而不是多达 9 位

640
00:28:55,630 --> 00:28:56,900
in the decimal system?
在十进制系统中？

641
00:28:56,900 --> 00:28:58,150
Well, let's generalize this.
好吧，让我们概括一下。

642
00:28:58,150 --> 00:29:00,610
In the decimal system, you and I know, if we've
在十进制系统中，你和我知道，如果我们有

643
00:29:00,610 --> 00:29:03,220
got three digits represented by these hashes here,
在这里得到了由这些哈希表示的三位数字，

644
00:29:03,220 --> 00:29:05,920
yes, it's the 1's place, 10's place, 100's place,
是的，这是1的地方，10的地方，100的地方，

645
00:29:05,920 --> 00:29:09,860
and if we keep going 1,000's, 10,000's, and so forth, but why is that?
如果我们继续前进1000个，10000个，等等，但为什么会这样呢？

646
00:29:09,860 --> 00:29:12,580
Well, base terminology is now a little more germane.
好吧，基本术语现在更加相关。

647
00:29:12,580 --> 00:29:17,420
That's technically the 10 to the 0th column, the 10 to the 1, 10 to the 2.
从技术上讲，这是 10 到 0 列，10 到 1,10 到 2。

648
00:29:17,420 --> 00:29:20,650
So these are powers of 10, where 10 is your base.
所以这些是 10 的幂，其中 10 是你的基数。

649
00:29:20,650 --> 00:29:23,482
Computers just simplify things a little bit,
计算机只是把事情简单了一点，

650
00:29:23,482 --> 00:29:25,190
because computers, at the end of the day,
因为计算机，归根结底，

651
00:29:25,190 --> 00:29:27,520
only have access to electricity, on or off.
只能用电，开或关。

652
00:29:27,520 --> 00:29:31,330
They don't have access to 10 different types of electricity, just 2,
他们没有 10 种不同类型的电力，只有 2 种，

653
00:29:31,330 --> 00:29:32,780
on or off, if you will.
打开或关闭，如果你愿意的话。

654
00:29:32,780 --> 00:29:34,640
Well, they just use a different base.
好吧，他们只是使用不同的底座。

655
00:29:34,640 --> 00:29:37,900
And the rightmost digit would be in the so-called 2 to the 0ths.
最右边的数字将是所谓的 2 到 0th。

656
00:29:37,900 --> 00:29:39,850
Then the middle digit is 2 to the 1.
然后中间数字是 2 到 1。

657
00:29:39,850 --> 00:29:41,830
The left most is 2 to the 2, a.k.a.
最左边的是 2 到 2，也就是

658
00:29:41,830 --> 00:29:45,520
1's place, 2's place, 4's place, and as we kept going, 8,
1的地方，2的地方，4的地方，当我们继续前进时，8，

659
00:29:45,520 --> 00:29:49,990
and if we keep going, 16, 32, 64, 128, and so forth,
如果我们继续前进，16、32、64、128等等，

660
00:29:49,990 --> 00:29:51,920
but the idea is fundamentally the same.
但这个想法基本上是相同的。

661
00:29:51,920 --> 00:29:55,270
So why is this how the computer represents
那么为什么计算机是这样表示的呢？

662
00:29:55,270 --> 00:29:56,770
the number you and I know is 0?
你我认识的数字是0？

663
00:29:56,770 --> 00:30:01,900
Well, off, off, off, from right to left or in this case left to right,
好吧，关闭，关闭，关闭，从右到左，或者在这种情况下从左到右，

664
00:30:01,900 --> 00:30:02,750
is just 0.
仅为 0。

665
00:30:02,750 --> 00:30:03,250
Why?
为什么？

666
00:30:03,250 --> 00:30:08,320
Because that's 4 times 0 plus 2 times 0 plus 1 times 0 is, of course, 0.
因为那是 4 乘以 0 加 2 乘以 0 加 1 乘以 0 当然是 0。

667
00:30:08,320 --> 00:30:12,400
This is why 001 represents 1.
这就是为什么 001 代表 1。

668
00:30:12,400 --> 00:30:20,320
This is why 010 represents 2 and 3 and 4 and 5 and 6 and 7 on up.
这就是为什么 010 代表 2 和 3 和 4 和 5 和 6 和 7 向上。

669
00:30:20,320 --> 00:30:23,500
And why did we need a 4th bit to represent 8?
为什么我们需要第 4 位来表示 8？

670
00:30:23,500 --> 00:30:26,570
Well, we kind of needed to carry the 1, so to speak,
好吧，我们有点需要携带 1，可以这么说，

671
00:30:26,570 --> 00:30:29,740
using our familiar human terminology.
使用我们熟悉的人类术语。

672
00:30:29,740 --> 00:30:33,280
But for that we need a 4th bit, another transistor, and this
但为此，我们需要第 4 位，另一个晶体管，以及这个

673
00:30:33,280 --> 00:30:34,630
now represents the number 8.
现在代表数字 8。

674
00:30:34,630 --> 00:30:39,070
And that's why we ended with on-- from left to right-- off, off, off.
这就是为什么我们以开 - 从左到右 - 关闭，关闭，关闭结束。

675
00:30:39,070 --> 00:30:42,760
So I keep saying on and off, or the light bulb is on or off,
所以我一直在说开和关，或者灯泡开或关，

676
00:30:42,760 --> 00:30:45,310
but really, I just mean 1 or 0.
但实际上，我的意思是 1 或 0。

677
00:30:45,310 --> 00:30:48,700
And so computers and we humans think of things digitally
因此，计算机和我们人类以数字方式思考事物

678
00:30:48,700 --> 00:30:50,860
as just being 0's and 1's, but mechanically,
只是 0 和 1，但机械地，

679
00:30:50,860 --> 00:30:52,860
you can think of it indeed is these light bulbs.
你可以想到它确实是这些灯泡。

680
00:30:52,860 --> 00:30:54,220
Now, a bit is not very useful.
现在，一点不是很有用。

681
00:30:54,220 --> 00:30:56,300
Even 3 bits, 4 bits, not that useful.
即使是3位，4位，也不是那么有用。

682
00:30:56,300 --> 00:30:58,780
You can count to 7 or 15, generally speaking,
一般来说，你可以数到7或15，

683
00:30:58,780 --> 00:31:01,240
bytes are a more useful unit of measure.
字节是更有用的度量单位。

684
00:31:01,240 --> 00:31:04,190
And anyone familiar how many bits is in a byte?
有人知道一个字节有多少位吗？

685
00:31:04,190 --> 00:31:04,690
Yeah.
是的。

686
00:31:04,690 --> 00:31:06,310
So 8 bits are in a byte.
所以 8 位在一个字节中。

687
00:31:06,310 --> 00:31:08,557
You can think of it as an octet equivalently.
你可以将其等效地视为八位字节。

688
00:31:08,557 --> 00:31:11,140
In some contexts, there are nuances there, but think of a byte
在某些情况下，那里有细微差别，但想想一个字节

689
00:31:11,140 --> 00:31:14,200
as just being 8 bits, and that's just a more useful measure.
因为只是 8 位，这只是一个更有用的措施。

690
00:31:14,200 --> 00:31:15,890
So what does this mean in real terms?
那么这实际上意味着什么？

691
00:31:15,890 --> 00:31:21,430
So if you've ever downloaded like a music file or a photograph or a video,
因此，如果你曾经下载过音乐文件、照片或视频，

692
00:31:21,430 --> 00:31:22,990
those are measured in bytes.
这些以字节为单位。

693
00:31:22,990 --> 00:31:25,150
Probably not small numbers of bytes, probably
可能不是少量字节，可能

694
00:31:25,150 --> 00:31:28,630
kilobytes for thousands of bytes, megabytes for millions of bytes,
千字节表示数千字节，兆字节表示数百万字节，

695
00:31:28,630 --> 00:31:32,290
gigabytes for billions of bytes, especially for video.
数十亿字节的千兆字节，尤其是视频。

696
00:31:32,290 --> 00:31:35,470
That just means you have a lot of patterns
这只是意味着你有很多模式

697
00:31:35,470 --> 00:31:39,670
of 8 bits, some combination of 0's and 1's on your computer's hard drive.
8 位，计算机硬盘驱动器上 0 和 1 的某种组合。

698
00:31:39,670 --> 00:31:44,830
Here then, with a byte of bits, 8 bits, is how a computer would typically
在这里，用一个字节的位，8位，是计算机通常的样子

699
00:31:44,830 --> 00:31:46,330
represent the number 0.
表示数字 0。

700
00:31:46,330 --> 00:31:49,570
And if that same computer uses all 8 of its bits,
如果同一台计算机使用其所有 8 位，

701
00:31:49,570 --> 00:31:52,570
its full byte, to change it to 1--
它的完整字节，将其更改为 1--

702
00:31:52,570 --> 00:31:54,850
anyone who's quick with math or have seen this before,
任何数学很快或以前看过这个的人，

703
00:31:54,850 --> 00:31:58,247
how high can a computer count with 8 bits or 1?
一台计算机用 8 位或 1 位可以计数多高？

704
00:31:58,247 --> 00:31:59,080
[INTERPOSING VOICES]
[插话]

705
00:31:59,080 --> 00:32:00,400
Yeah, 255.
是的，255。

706
00:32:00,400 --> 00:32:00,902
Why is that?
为什么？

707
00:32:00,902 --> 00:32:03,610
Well, we're not going to turn this into a constant math exercise.
好吧，我们不会把它变成一个持续的数学练习。

708
00:32:03,610 --> 00:32:05,402
Indeed, after today, we're not really going
事实上，今天之后，我们真的不会去

709
00:32:05,402 --> 00:32:08,230
to think about or talk about bits at this low level.
在这个低层次上思考或谈论位。

710
00:32:08,230 --> 00:32:14,560
But this is the 1's place, 2's, 4's, 8s, 16, 32, 64, 128,
但这是 1 的地方，2、4、8、16、32、64、128，

711
00:32:14,560 --> 00:32:19,520
and if I do all of that math from left to right, that indeed gives me 255.
如果我从左到右做所有这些数学，那确实给了我255。

712
00:32:19,520 --> 00:32:22,210
It ignores how we might represent negative numbers, but perhaps
它忽略了我们如何表示负数，但也许

713
00:32:22,210 --> 00:32:24,160
more on those some other day.
更多关于那些其他日子。

714
00:32:24,160 --> 00:32:25,960
But computers, of course, do so much more
但是，计算机当然做得更多。

715
00:32:25,960 --> 00:32:28,810
than numbers and math and all this low level stuff.
比数字和数学以及所有这些低级的东西。

716
00:32:28,810 --> 00:32:32,150
We send text messages, write documents, emails, and the like.
我们发送短信，撰写文档，电子邮件等。

717
00:32:32,150 --> 00:32:36,220
So how might a computer represent something like the letter A?
那么计算机如何表示类似字母A的东西呢？

718
00:32:36,220 --> 00:32:38,980
I claim, at the end of the day, your Mac, your PC,
我声称，归根结底，你的Mac，你的PC，

719
00:32:38,980 --> 00:32:42,430
your phone just has lots of transistors, lots of switches
你的手机有很多晶体管，很多开关

720
00:32:42,430 --> 00:32:46,210
that it can use in units of 8, in units of bytes.
它可以以 8 为单位，以字节为单位使用。

721
00:32:46,210 --> 00:32:49,900
How, though, if it's already using those patterns of 0's and 1's
但是，如果它已经在使用0和1的模式，如何

722
00:32:49,900 --> 00:32:53,380
apparently to represent numbers from 0 on up,
显然是为了表示从 0 开始的数字，

723
00:32:53,380 --> 00:32:58,440
how do you go about representing letters of the alphabet, might you think?
你怎么去表示字母表中的字母，你会觉得吗？

724
00:32:58,440 --> 00:32:59,230
Yeah?
是的？

725
00:32:59,230 --> 00:32:59,730
OK.
还行。

726
00:32:59,730 --> 00:33:01,800
So we could assign a number to every letter.
因此，我们可以为每个字母分配一个数字。

727
00:33:01,800 --> 00:33:01,920
OK.
还行。

728
00:33:01,920 --> 00:33:03,810
So let me just conjecture, well, let's just
所以让我猜想，好吧，让我们只是

729
00:33:03,810 --> 00:33:08,760
call A 0, for simplicity, B 1, C 2, and now let me play devil's advocate.
叫A0，为了简单起见，B 1，C 2，现在让我扮演魔鬼的代言人。

730
00:33:08,760 --> 00:33:13,500
OK, how do I now represent 0 or 1 or 2?
好的，我现在如何表示 0 或 1 或 2？

731
00:33:13,500 --> 00:33:16,080
Well, we've maybe created a problem for ourselves,
好吧，我们可能为自己制造了一个问题，

732
00:33:16,080 --> 00:33:19,050
if now we have to steal some numbers to represent letters.
如果现在我们必须窃取一些数字来表示字母。

733
00:33:19,050 --> 00:33:21,060
We kind of have to pick a lane, but there's a solution to that
我们必须选择一条车道，但有一个解决方案。

734
00:33:21,060 --> 00:33:21,870
too that we'll see.
我们也会看到。

735
00:33:21,870 --> 00:33:25,710
And it turns out the world is not quite as simple as A being 0.
事实证明，世界并不像A为0那么简单。

736
00:33:25,710 --> 00:33:29,100
A typically is represented, by computers everywhere, phones everywhere,
A通常由无处不在的计算机，无处不在的电话来表示，

737
00:33:29,100 --> 00:33:32,640
with the number 65, the decimal number 65.
数字 65，十进制数字 65。

738
00:33:32,640 --> 00:33:36,690
Using 8 bits, if we turn some of the 0's to 1's, let me just stipulate,
使用 8 位，如果我们把一些 0 变成 1，让我规定，

739
00:33:36,690 --> 00:33:41,220
you can represent the letter A using 8 bits, by turning certain ones on
你可以使用 8 位表示字母 A，方法是打开某些位

740
00:33:41,220 --> 00:33:45,240
and certain ones off, but we will try not to focus on that binary level
和某些关闭，但我们将尽量不关注二进制级别

741
00:33:45,240 --> 00:33:46,000
too much.
太多了。

742
00:33:46,000 --> 00:33:49,740
So if A is 65, it turns out that B is going to be 66,
所以如果 A 是 65，那么事实证明 B 将是 66，

743
00:33:49,740 --> 00:33:54,060
and C is going to be 67, and so forth, and so where does that get us?
C将是67，依此类推，那么这会把我们带到哪里去？

744
00:33:54,060 --> 00:33:59,130
Well, it turns out there's a whole system that maps numbers to letters.
好吧，事实证明有一个完整的系统可以将数字映射到字母。

745
00:33:59,130 --> 00:34:02,010
And here, as I alluded to verbally a moment ago,
在这里，正如我刚才口头提到的那样，

746
00:34:02,010 --> 00:34:05,130
is the pattern of 0's and 1's via which you'd represent 65.
是 0 和 1 的模式，通过它表示 65。

747
00:34:05,130 --> 00:34:07,770
And just quick check here, we won't constantly
只是在这里快速检查，我们不会经常

748
00:34:07,770 --> 00:34:13,770
do math 1's place, that's easy, 2's, 4's, 8's, 16's, 32's, 64's place.
做数学 1 的地方，这很容易，2、4、8、16、32、64 的地方。

749
00:34:13,770 --> 00:34:17,969
So 64 plus 1 gives us 65.
所以 64 加 1 得到 65。

750
00:34:17,969 --> 00:34:21,540
So once I do that, how do I get to all of the others?
因此，一旦我这样做了，我如何找到所有其他人？

751
00:34:21,540 --> 00:34:25,020
Well, it turns out a bunch of Americans years ago came up with this
好吧，事实证明，几年前一群美国人想出了这个

752
00:34:25,020 --> 00:34:28,889
ASCII, the American Standard Code for Information Interchange.
ASCII，美国信息交换标准代码。

753
00:34:28,889 --> 00:34:30,344
Now, what does that mean?
现在，这意味着什么？

754
00:34:30,344 --> 00:34:32,969
Well, it's just an acronym describing what really you proposed,
好吧，这只是一个首字母缩略词，描述了你真正提出的内容，

755
00:34:32,969 --> 00:34:37,620
a mapping between numbers and letters, not quite as simple as 0, 1, 2.
数字和字母之间的映射，不像 0、1、2 那么简单。

756
00:34:37,620 --> 00:34:40,980
Starts at 65, 66, 67 for capital letters,
大写字母从 65、66、67 开始，

757
00:34:40,980 --> 00:34:45,610
but here are most of the letters in use today, at least with this system.
但这是今天使用的大多数字母，至少在这个系统中是这样。

758
00:34:45,610 --> 00:34:47,969
So this is just a big chart from online, and you'll
所以这只是一个来自在线的大图表，你会

759
00:34:47,969 --> 00:34:52,800
see in the middle of this chart, here, here's my 65, A. Here's my 66,
看到这张图表的中间，这里是我的65，A。这是我的66，

760
00:34:52,800 --> 00:34:58,750
B, C, and let's see, 72 is H, 73 is I, and so forth.
B，C，让我们看看，72是H，73是I，依此类推。

761
00:34:58,750 --> 00:35:01,890
So there's a mapping, at least for English, between all of these numbers
因此，至少对于英语而言，所有这些数字之间都有一个映射。

762
00:35:01,890 --> 00:35:03,160
and all of these letters.
以及所有这些信件。

763
00:35:03,160 --> 00:35:07,080
And if we focus here, those are the beginning of our uppercase alphabet.
如果我们专注于这里，这些是我们大写字母表的开头。

764
00:35:07,080 --> 00:35:11,670
So suppose then that today, tomorrow, you receive a text message
所以假设今天，明天，你收到一条短信

765
00:35:11,670 --> 00:35:15,630
from someone, and underneath the hood, now that you're a computer person,
从某人那里，在引擎盖下，现在你是一个计算机人，

766
00:35:15,630 --> 00:35:19,110
you figure out a way to see what pattern of 0's and 1's was sent.
你想出一种方法来查看发送了 0 和 1 的模式。

767
00:35:19,110 --> 00:35:21,300
In this case, it's wireless as opposed to wired,
在这种情况下，它是无线的，而不是有线的，

768
00:35:21,300 --> 00:35:23,147
but it's still some pattern of 0's and 1's.
但它仍然是 0 和 1 的某种模式。

769
00:35:23,147 --> 00:35:25,230
And your phone is turning some switches of its own
你的手机正在转动自己的一些开关

770
00:35:25,230 --> 00:35:27,900
on and off to represent that message from a friend.
打开和关闭以表示来自朋友的消息。

771
00:35:27,900 --> 00:35:30,630
Suppose that the three patterns you received
假设你收到的三种模式

772
00:35:30,630 --> 00:35:33,360
were these three bytes, from left to right,
这三个字节，从左到右，

773
00:35:33,360 --> 00:35:35,430
spelling out a three-letter word.
拼出一个三个字母的单词。

774
00:35:35,430 --> 00:35:38,880
Well, if we do out the math, 1's place, 2's place, and so forth--
好吧，如果我们计算一下，1的位置，2的位置，等等——

775
00:35:38,880 --> 00:35:40,060
I'll spoil it for you.
我会为你剧透的。

776
00:35:40,060 --> 00:35:45,420
Suppose that you received a text message that doesn't literally say 72, 73, 33,
假设你收到一条短信，字面上没有说 72、73、33、

777
00:35:45,420 --> 00:35:49,410
but you've received a pattern of 8 plus 8 plus 8, 24 bits
但是你收到的模式是 8 加 8 加 8,24 位

778
00:35:49,410 --> 00:35:54,510
that if you do out the math represent the decimal number 72, 73, 33.
如果你做数学代表十进制数 72、73、33。

779
00:35:54,510 --> 00:35:57,270
Anyone recall what message you might have received
任何人都记得你可能收到的消息

780
00:35:57,270 --> 00:35:58,980
from the green and white charts?
从绿白图表？

781
00:35:58,980 --> 00:35:59,970
Yeah?
是的？

782
00:35:59,970 --> 00:36:00,930
AUDIENCE: Hi.
观众：你好。

783
00:36:00,930 --> 00:36:02,010
DAVID J. MALAN: Hi.
DAVID J. MALAN：你好。

784
00:36:02,010 --> 00:36:08,370
Yes, hi is the message, but 72, 73 gives us H and I. What's 33?
是的，嗨是消息，但是 72、73 给了我们 H 和 I.什么是 33？

785
00:36:08,370 --> 00:36:10,560
Any guesses to 33?
对33有什么猜测吗？

786
00:36:10,560 --> 00:36:12,100
Yeah, over here.
是的，在这边。

787
00:36:12,100 --> 00:36:12,600
Yeah.
是的。

788
00:36:12,600 --> 00:36:13,770
So it's an exclamation point.
所以这是一个感叹号。

789
00:36:13,770 --> 00:36:14,650
How would you know that?
你怎么知道的？

790
00:36:14,650 --> 00:36:17,025
Well, you really do need some kind of cheat sheet, a.k.a.
好吧，你确实需要某种备忘单，又名

791
00:36:17,025 --> 00:36:18,010
ASCII in this case.
在这种情况下为 ASCII。

792
00:36:18,010 --> 00:36:20,802
And if we look elsewhere-- let me highlight the left of the chart--
如果我们看看其他地方——让我突出显示图表的左边——

793
00:36:20,802 --> 00:36:24,490
you can see that next to 33 in decimal is indeed the exclamation point.
你可以看到，十进制中的 33 旁边确实是感叹号。

794
00:36:24,490 --> 00:36:27,120
So back in the day, a bunch of humans got in a room,
所以回到过去，一群人进入一个房间，

795
00:36:27,120 --> 00:36:31,200
decided that, hey, when we start building PCs and later Macs and phones,
决定，嘿，当我们开始构建 PC 以及后来的 Mac 和手机时，

796
00:36:31,200 --> 00:36:35,550
we all just have to agree on this form of representation of letters
我们只需要就这种字母表示形式达成一致

797
00:36:35,550 --> 00:36:38,110
of the English alphabet, in this case.
在这种情况下，英文字母表。

798
00:36:38,110 --> 00:36:39,810
We just need to agree on this mapping.
我们只需要就这个映射达成一致。

799
00:36:39,810 --> 00:36:42,910
But somewhat curiously, notice this.
但有点奇怪的是，请注意这一点。

800
00:36:42,910 --> 00:36:46,380
It turns out that, once you paint yourself into this corner
事实证明，一旦你把自己画进这个角落

801
00:36:46,380 --> 00:36:51,210
and start using 65 for A, 66 for B, well,
并开始将 65 用于 A，66 用于 B，好吧，

802
00:36:51,210 --> 00:36:54,660
how do you represent 65 the number and 66 the number,
你如何表示 65 的数字和 66 的数字，

803
00:36:54,660 --> 00:36:57,690
if you want to do math or use Excel or something like that?
如果你想做数学或使用Excel或类似的东西？

804
00:36:57,690 --> 00:37:01,380
Does anyone see the solution, perhaps?
也许有人看到解决方案吗？

805
00:37:01,380 --> 00:37:06,070
How do you represent the number 1 in ASCII?
你如何表示 ASCII 中的数字 1？

806
00:37:06,070 --> 00:37:07,528
Yeah, in the middle?
是的，在中间？

807
00:37:07,528 --> 00:37:09,065
AUDIENCE: [INAUDIBLE].
观众：[听不清]。

808
00:37:09,065 --> 00:37:09,940
DAVID J. MALAN: Yeah.
DAVID J. MALAN：是的。

809
00:37:09,940 --> 00:37:12,955
So this is getting a little maybe inception or something,
所以这有点可能是开始什么的，

810
00:37:12,955 --> 00:37:15,080
but you could represent numbers with other numbers.
但是你可以用其他数字来表示数字。

811
00:37:15,080 --> 00:37:16,830
And so if you want to represent the number
所以如果你想代表数字

812
00:37:16,830 --> 00:37:19,450
you and I know as 1, like when you type it on your keyboard,
你和我知道是1，就像你在键盘上打字一样，

813
00:37:19,450 --> 00:37:23,230
turns out the computer stores that as the decimal number 49.
原来计算机将其存储为十进制数 49。

814
00:37:23,230 --> 00:37:27,070
If you hit 2 on your keyboard, the computer is not storing 2, per se.
如果在键盘上按 2，则计算机本身不会存储 2。

815
00:37:27,070 --> 00:37:29,230
It's storing the decimal number 50.
它存储十进制数 50。

816
00:37:29,230 --> 00:37:33,940
Now, thankfully, the paradox stops there.
现在，值得庆幸的是，悖论到此为止。

817
00:37:33,940 --> 00:37:36,340
We just have a mapping now of numbers to numbers.
我们现在只有一个数字到数字的映射。

818
00:37:36,340 --> 00:37:37,780
But really, at the end of the day-- and you're
但实际上，在一天结束时 - 你是

819
00:37:37,780 --> 00:37:40,822
going to learn this when we start writing code in that other language, C,
当我们开始用另一种语言 C 编写代码时，将学习这一点，

820
00:37:40,822 --> 00:37:43,720
next week-- it's just context-dependent, at the end of the day.
下周 - 它只是依赖于上下文，在一天结束时。

821
00:37:43,720 --> 00:37:47,380
Inside of your Mac, PC, and phone, there's just all of these permutations
在你的Mac，PC和手机中，只有所有这些排列

822
00:37:47,380 --> 00:37:49,720
of bits, all of these patterns of 0's and 1's.
位，所有这些 0 和 1 的模式。

823
00:37:49,720 --> 00:37:53,650
And generally speaking, when you open up a text message that you've received
一般来说，当你打开收到的短信时

824
00:37:53,650 --> 00:37:55,252
from someone, it's 0's and 1's.
从某人那里，它是 0 和 1。

825
00:37:55,252 --> 00:37:58,210
But obviously, if it's a text message, the whole point of text messages
但显然，如果它是一条短信，短信的全部意义

826
00:37:58,210 --> 00:38:01,660
is to send text, and so those patterns of 0's and 1's, by default,
是发送文本，因此默认情况下，0 和 1 的模式，

827
00:38:01,660 --> 00:38:04,862
will typically be interpreted as letters of the alphabet.
通常被解释为字母表中的字母。

828
00:38:04,862 --> 00:38:06,070
So you won't see 0's and 1's.
所以你不会看到 0 和 1。

829
00:38:06,070 --> 00:38:07,320
You won't see decimal numbers.
你不会看到十进制数字。

830
00:38:07,320 --> 00:38:10,090
You'll see the English message that your friend intended.
你会看到好友想要的英文消息。

831
00:38:10,090 --> 00:38:13,390
By contrast, if you open up something like Excel,
相比之下，如果你打开像Excel这样的东西，

832
00:38:13,390 --> 00:38:19,660
that same pattern 0's zeros and 1's might indeed work out to be 72, 73, 33.
同样的模式 0 的 0 和 1 可能确实是 72、73、33。

833
00:38:19,660 --> 00:38:23,530
You might see cells in your spreadsheet with literally those three numbers.
你可能会在电子表格中看到带有这三个数字的单元格。

834
00:38:23,530 --> 00:38:24,040
Why?
为什么？

835
00:38:24,040 --> 00:38:26,248
Because spreadsheets are all about numbers and number
因为电子表格都是关于数字和数字的

836
00:38:26,248 --> 00:38:28,210
crunching and math, in many cases.
在许多情况下，加班和数学。

837
00:38:28,210 --> 00:38:31,420
If by contrast, you open up Photoshop and try
相比之下，如果你打开Photoshop并尝试

838
00:38:31,420 --> 00:38:36,820
to look at that same pattern of 0's and 1's, it's not going to be 72, 73, 33.
看看0和1的相同模式，它不会是72,73,33。

839
00:38:36,820 --> 00:38:38,530
It's not going to be 0's and 1's.
它不会是 0 和 1。

840
00:38:38,530 --> 00:38:39,670
It's not going to be hi.
不会是嗨。

841
00:38:39,670 --> 00:38:42,100
It's going to be some color of the rainbow.
这将是彩虹的某种颜色。

842
00:38:42,100 --> 00:38:44,530
You're going to use those patterns of 0's and 1's, it
你将使用0和1的模式，它

843
00:38:44,530 --> 00:38:46,810
turns out too, to represent colors.
原来也是，代表颜色。

844
00:38:46,810 --> 00:38:50,470
And indeed, so long as you and I just agree, as humans long
事实上，只要你和我只是同意，作为人类，只要

845
00:38:50,470 --> 00:38:53,830
have, what these patterns are going to be, all of our systems,
拥有，这些模式将是什么，我们所有的系统，

846
00:38:53,830 --> 00:38:56,560
many of our systems nowadays are indeed interoperable.
如今，我们的许多系统确实是可互操作的。

847
00:38:56,560 --> 00:38:59,590
But I'm being very biased here, and indeed, the A and ASCII
但我在这里非常有偏见，事实上，A 和 ASCII

848
00:38:59,590 --> 00:39:01,330
is very American-centric.
非常以美国为中心。

849
00:39:01,330 --> 00:39:03,940
What do you not see in this chart?
你在这个图表中看不到什么？

850
00:39:03,940 --> 00:39:06,100
If you speak any other language than English,
如果你说英语以外的任何其他语言，

851
00:39:06,100 --> 00:39:09,400
odds are, you're not seeing characters you know and love and need
很有可能，你没有看到你认识、喜爱和需要的角色

852
00:39:09,400 --> 00:39:11,620
every day to type or send messages.
每天打字或发送消息。

853
00:39:11,620 --> 00:39:13,480
Well, there's a huge character set that's
嗯，有一个巨大的角色集是

854
00:39:13,480 --> 00:39:15,962
not supported here, whether it's accented characters
此处不支持，无论是重音字符

855
00:39:15,962 --> 00:39:17,170
and a lot of Asian alphabets.
和很多亚洲字母。

856
00:39:17,170 --> 00:39:20,420
You have many more symbols than can fit even on this screen here.
你拥有的符号比此处的此屏幕所能容纳的要多得多。

857
00:39:20,420 --> 00:39:24,010
And so humans kind of painted themselves into a corner, early on, or really,
所以人类有点把自己画进了一个角落，很早就，或者真的，

858
00:39:24,010 --> 00:39:24,970
Americans did.
美国人做到了。

859
00:39:24,970 --> 00:39:27,820
But on a typical keyboard, US English keyboard, yeah, you
但是在典型的键盘上，美式英语键盘，是的，你

860
00:39:27,820 --> 00:39:31,450
have A's and B's and C's, uppercase and lowercase,
有 A 和 B 和 C，大写和小写，

861
00:39:31,450 --> 00:39:33,880
but you also have accented characters here.
但是你在这里也有重音字符。

862
00:39:33,880 --> 00:39:37,900
And nowadays, not sure if this is maybe necessary, but nowadays,
如今，不确定这是否有必要，但如今，

863
00:39:37,900 --> 00:39:41,090
you have other characters on your keyboard, like these.
键盘上还有其他字符，例如这些字符。

864
00:39:41,090 --> 00:39:43,780
And these are a playful incarnation of what's actually
这些是实际内容的俏皮化身

865
00:39:43,780 --> 00:39:45,730
a technical solution to this problem.
这个问题的技术解决方案。

866
00:39:45,730 --> 00:39:50,397
If I claim for the moment that ASCII historically used 7 bits to represent
如果我暂时声称 ASCII 历史上使用 7 位来表示

867
00:39:50,397 --> 00:39:52,480
letters-- and let's just round that up to a byte--
字母 - 让我们把它四舍五入到一个字节 -

868
00:39:52,480 --> 00:39:57,730
8 bits to represent letters, ASCII can represent as many as 255,
8位代表字母，ASCII可以代表多达255个，

869
00:39:57,730 --> 00:40:00,520
or really 256, total characters.
或者真的是256个，总字符数。

870
00:40:00,520 --> 00:40:01,550
Why 256?
为什么是256？

871
00:40:01,550 --> 00:40:04,840
Well, if you have them all 0, that's 0, and the highest number
好吧，如果你把它们都为 0，那就是 0，也是最高的数字

872
00:40:04,840 --> 00:40:07,070
I claimed a moment ago was 255.
我刚才声称是255。

873
00:40:07,070 --> 00:40:09,160
So that's 256 total possibilities.
所以总共有256种可能性。

874
00:40:09,160 --> 00:40:10,360
That's not many letters.
这不是很多字母。

875
00:40:10,360 --> 00:40:13,730
It's fine for English, but not a lot of human languages.
英语很好，但人类语言不多。

876
00:40:13,730 --> 00:40:16,210
So what might the intuitive solution be, if you
那么直观的解决方案是什么，如果你

877
00:40:16,210 --> 00:40:21,460
want to represent accented characters, Asian characters, emoji, even
想要代表重音字符，亚洲字符，表情符号，甚至

878
00:40:21,460 --> 00:40:25,360
like these, which are just keys on a keyboard nowadays?
像这些，现在只是键盘上的键？

879
00:40:25,360 --> 00:40:28,610
What's the intuitive solution, if a byte's too few?
如果一个字节太少，直观的解决方案是什么？

880
00:40:28,610 --> 00:40:29,110
Yeah?
是的？

881
00:40:29,110 --> 00:40:30,320
AUDIENCE: Add another digit.
受众：添加另一个数字。

882
00:40:30,320 --> 00:40:30,710
DAVID J. MALAN: Yeah.
DAVID J. MALAN：是的。

883
00:40:30,710 --> 00:40:31,610
So add another digit.
所以添加另一个数字。

884
00:40:31,610 --> 00:40:34,850
Just like we had a 4th volunteer come on up to give us a 4th bid,
就像我们有第四个志愿者来给我们第四个投标一样，

885
00:40:34,850 --> 00:40:37,640
let's just throw hardware at the problem and use a few more bits.
让我们把硬件扔到这个问题上，再用几个位。

886
00:40:37,640 --> 00:40:41,925
So maybe instead of 1 byte, let's use 2, or heck, let's use 3 or 4 bytes.
所以也许让我们使用 2 而不是 1 个字节，或者哎呀，让我们使用 3 或 4 个字节。

887
00:40:41,925 --> 00:40:43,800
Even though it's getting a little expensive--
即使它变得有点贵——

888
00:40:43,800 --> 00:40:47,000
we're going from 8 to 16 to 24 or 32 bits--
我们从 8 到 16 到 24 或 32 位——

889
00:40:47,000 --> 00:40:49,047
that's how computers do things, these days.
如今，这就是计算机做事的方式。

890
00:40:49,047 --> 00:40:52,130
And thankfully, we have so much memory inside of our computers and phones,
值得庆幸的是，我们的电脑和手机内部有如此多的内存，

891
00:40:52,130 --> 00:40:54,710
we can certainly spare a few to represent these things.
我们当然可以腾出一些来代表这些事情。

892
00:40:54,710 --> 00:40:58,400
And the solution then to ASCII is what we'll call Unicode.
ASCII的解决方案就是我们所说的Unicode。

893
00:40:58,400 --> 00:41:04,730
So Unicode is also just a mapping of numbers to letters
所以Unicode也只是数字到字母的映射。

894
00:41:04,730 --> 00:41:06,380
but in many different languages.
但有许多不同的语言。

895
00:41:06,380 --> 00:41:08,450
And indeed, the Unicode Consortium is a bunch
事实上，Unicode 联盟是一堆

896
00:41:08,450 --> 00:41:12,200
of people from all different companies--
来自不同公司的人——

897
00:41:12,200 --> 00:41:16,610
a lot of different companies and countries and cultures whose mission,
许多不同的公司、国家和文化，其使命，

898
00:41:16,610 --> 00:41:22,460
as an organization, is to capture digitally all forms of human language
作为一个组织，就是以数字方式捕获所有形式的人类语言

899
00:41:22,460 --> 00:41:23,070
in this case.
在这种情况下。

900
00:41:23,070 --> 00:41:26,360
And to ensure that especially smaller demographics of humans speaking
并确保特别是较小的人口统计数据

901
00:41:26,360 --> 00:41:29,960
lesser-known languages are nonetheless represented and preserved digitally
尽管如此，鲜为人知的语言仍以数字方式呈现和保存

902
00:41:29,960 --> 00:41:32,600
using some mapping of these 0's and 1's.
使用这些 0 和 1 的一些映射。

903
00:41:32,600 --> 00:41:36,590
It turns out, though, if you start using 32 bits, as many as 32 bits,
然而，事实证明，如果你开始使用 32 位，多达 32 位，

904
00:41:36,590 --> 00:41:42,020
to represent characters on a keyboard, that's 4 billion possible permutations
在键盘上表示字符，这是 40 亿种可能的排列

905
00:41:42,020 --> 00:41:42,830
of 0's and 1's.
的 0 和 1。

906
00:41:42,830 --> 00:41:45,538
That's way more than we need for most human languages.
这比我们对大多数人类语言的需求要多得多。

907
00:41:45,538 --> 00:41:48,830
So there's a little bit of room in there for some of those more playful things,
所以那里有一点空间来容纳一些更有趣的东西，

908
00:41:48,830 --> 00:41:49,850
like those emoji.
就像那些表情符号一样。

909
00:41:49,850 --> 00:41:52,760
So for instance, suppose you got a text message with this pattern
例如，假设你收到一条带有此模式的短信

910
00:41:52,760 --> 00:41:55,040
of 0's and 1's.
的 0 和 1。

911
00:41:55,040 --> 00:41:57,950
Or if we do out the math, suppose you receive a text message
或者，如果我们进行数学计算，假设你收到一条短信

912
00:41:57,950 --> 00:42:03,080
that, if you do out the math in decimal, is 4,036,991,106.
如果你用十进制计算，那就是 4,036,991,106。

913
00:42:03,080 --> 00:42:07,110
Anyone know what emoji you're looking at?
有人知道你在看什么表情符号吗？

914
00:42:07,110 --> 00:42:11,033
It would be weird if you do, but what is this?
如果你这样做会很奇怪，但这是什么？

915
00:42:11,033 --> 00:42:12,950
Well, it turns out that, as of this past year,
好吧，事实证明，截至去年，

916
00:42:12,950 --> 00:42:16,990
this is the most popular emoji to be sent by many measures,
这是通过多种措施发送的最受欢迎的表情符号，

917
00:42:16,990 --> 00:42:18,970
Face with Tears of Joy.
脸上带着喜悦的泪水。

918
00:42:18,970 --> 00:42:22,540
So that is the pattern that a bunch of humans in the Unicode Consortium
这就是Unicode联盟中一群人的模式

919
00:42:22,540 --> 00:42:24,070
decided would represent this.
决定将代表这一点。

920
00:42:24,070 --> 00:42:27,430
But you'll notice, many of you might have iPhones, some of you
但你会注意到，你们中的许多人可能拥有iPhone，你们中的一些人

921
00:42:27,430 --> 00:42:30,280
might have Android devices too, and sometimes, these
可能也有安卓设备，有时，这些

922
00:42:30,280 --> 00:42:31,810
don't actually look quite the same.
实际上看起来不太一样。

923
00:42:31,810 --> 00:42:36,850
This happens to be the current version of Face with Tears of Joy on iOS.
这恰好是iOS上Face with Tears of Joy的当前版本。

924
00:42:36,850 --> 00:42:40,150
On Android, it tends to look a little something more like this,
在Android上，它看起来更像这样，

925
00:42:40,150 --> 00:42:42,550
and here is kind of a curiosity.
这是一种好奇心。

926
00:42:42,550 --> 00:42:45,850
Even though you and I look at these things and they look like images,
即使你和我看着这些东西，它们看起来像图像，

927
00:42:45,850 --> 00:42:46,840
they're not images.
它们不是图像。

928
00:42:46,840 --> 00:42:50,470
They're characters, at least as we've defined them now in Unicode.
它们是字符，至少正如我们现在在 Unicode 中定义的那样。

929
00:42:50,470 --> 00:42:56,350
And iOS and Android and Windows and Facebook and other companies and apps,
还有iOS、Android、Windows、Facebook和其他公司和应用程序，

930
00:42:56,350 --> 00:42:59,325
nowadays, really just have different fonts, if you will.
如今，如果你愿意的话，真的只是有不同的字体。

931
00:42:59,325 --> 00:43:01,450
So just like fonts with English and other languages
所以就像英语和其他语言的字体一样

932
00:43:01,450 --> 00:43:04,690
can give you different characters with serifs or not,
可以给你不同的角色衬线或不衬线，

933
00:43:04,690 --> 00:43:07,958
emoji are themselves, yes, drawings that someone made,
表情符号本身就是，是的，有人画的图画，

934
00:43:07,958 --> 00:43:09,250
but they're really just a font.
但它们实际上只是一种字体。

935
00:43:09,250 --> 00:43:13,120
And so that same pattern of 0's and 1's might just render slightly differently
因此，0 和 1 的相同模式可能只是渲染略有不同

936
00:43:13,120 --> 00:43:14,830
on someone's phone or another.
在某人的电话或其他手机上。

937
00:43:14,830 --> 00:43:17,950
If you've ever gotten like an icon on your phone that's broken,
如果你曾经像手机上的图标一样坏了，

938
00:43:17,950 --> 00:43:21,610
and you've been sent an emoji, but it's like a square or something arbitrary
并且你已经收到了一个表情符号，但它就像一个正方形或任意的东西

939
00:43:21,610 --> 00:43:24,700
and not sensible, it might just mean that you have not
不明智，这可能只是意味着你没有

940
00:43:24,700 --> 00:43:27,070
updated to the latest version of iOS or Android,
更新到最新版本的iOS或安卓，

941
00:43:27,070 --> 00:43:29,710
which just updates the font of supported emoji.
它只是更新支持的表情符号的字体。

942
00:43:29,710 --> 00:43:32,290
Because those folks at Unicode, pretty much every year
因为Unicode的那些人，几乎每年都

943
00:43:32,290 --> 00:43:36,838
nowadays, are adding more and more emoji to that particular character set.
如今，正在向该特定字符集添加越来越多的表情符号。

944
00:43:36,838 --> 00:43:39,880
Now, I went down the rabbit hole of figuring out the other day just which
现在，我前几天掉进了兔子洞，弄清楚了哪个

945
00:43:39,880 --> 00:43:41,710
are the most popular emoji these days.
是当今最受欢迎的表情符号。

946
00:43:41,710 --> 00:43:47,120
On Twitter specifically, this past year, the most popular emoji, by contrast,
特别是在Twitter上，在过去的一年里，最受欢迎的表情符号相比之下，

947
00:43:47,120 --> 00:43:49,390
was Loudly Crying Face.
是大声哭泣的脸。

948
00:43:49,390 --> 00:43:52,780
I don't know if that says more about 2021 or about Twitter,
我不知道这是否更多地说明了 2021 年或推特，

949
00:43:52,780 --> 00:43:55,780
but you'll see different trends, certainly, in how these are used.
但你会看到不同的趋势，当然，在如何使用它们。

950
00:43:55,780 --> 00:44:00,400
But even humans themselves didn't necessarily think two steps ahead,
但即使是人类自己也不一定提前思考两步，

951
00:44:00,400 --> 00:44:03,790
and now a lot of the emoji are the default yellow color.
现在很多表情符号都是默认的黄色。

952
00:44:03,790 --> 00:44:06,630
But there's a lot of emoji that aren't these cartoon characters,
但是有很多表情符号不是这些卡通人物，

953
00:44:06,630 --> 00:44:09,130
but they're meant to represent humans in various professions
但它们旨在代表各种职业的人类

954
00:44:09,130 --> 00:44:10,690
or gestures or the like.
或手势等。

955
00:44:10,690 --> 00:44:14,830
And nowadays too, you've probably noticed on your phone and Macs and PCs,
如今，你可能已经注意到手机，Mac和PC上，

956
00:44:14,830 --> 00:44:18,190
there are different skin tones that you can assign to certain emojis.
你可以为某些表情符号分配不同的肤色。

957
00:44:18,190 --> 00:44:21,190
If it's supported by the company and by Unicode,
如果它得到公司和Unicode的支持，

958
00:44:21,190 --> 00:44:23,858
you can actually touch and hold on a certain emoji,
你实际上可以触摸并按住某个表情符号，

959
00:44:23,858 --> 00:44:25,900
and then you can choose the appropriate skin tone
然后你可以选择合适的肤色

960
00:44:25,900 --> 00:44:27,483
to represent yourself or someone else.
代表自己或其他人。

961
00:44:27,483 --> 00:44:29,440
And that then modifies the display.
然后修改显示。

962
00:44:29,440 --> 00:44:31,210
Well, let's just think for a moment here,
好吧，让我们在这里想一想，

963
00:44:31,210 --> 00:44:33,910
how did Apple and Google and Microsoft and others
苹果和谷歌和微软和其他人是如何做到的

964
00:44:33,910 --> 00:44:38,650
go about implementing support for emoji with different skin tones?
去实现对不同肤色的表情符号的支持？

965
00:44:38,650 --> 00:44:41,000
How could you do this?
你怎么能这样做？

966
00:44:41,000 --> 00:44:44,563
If you want to represent some smiling emoji but in five,
如果你想代表一些微笑的表情符号，但用五个，

967
00:44:44,563 --> 00:44:47,230
in this case, different skin tones, you could come up with what?
在这种情况下，不同的肤色，你能想出什么？

968
00:44:47,230 --> 00:44:50,740
Five different patterns that are identical, structurally,
五种不同的模式，在结构上是相同的，

969
00:44:50,740 --> 00:44:53,950
except for the skin tone used in places in that image.
除了该图像中某些地方使用的肤色。

970
00:44:53,950 --> 00:44:58,360
But that's a little inefficient to just do copy, paste, paste, paste, paste,
但是，仅仅复制，粘贴，粘贴，粘贴，粘贴，粘贴，这有点低效，

971
00:44:58,360 --> 00:45:00,890
and change the color in Photoshop, if you will.
并更改 Photoshop 中的颜色（如果你愿意的话）。

972
00:45:00,890 --> 00:45:05,020
That's going to use more bits, more information than you might need to.
这将使用比你可能需要的更多的位，更多的信息。

973
00:45:05,020 --> 00:45:07,575
How else, if you now start to think a little bit more
否则，如果你现在开始多想一点

974
00:45:07,575 --> 00:45:10,450
like a computer scientist, if at the end of the day, all you have are
就像计算机科学家一样，如果在一天结束时，你所拥有的只是

975
00:45:10,450 --> 00:45:14,180
0's and 1's, how else could you implement skin tones, might you think?
0和1，你还能怎么实现肤色，你会觉得吗？

976
00:45:14,180 --> 00:45:14,680
Yeah?
是的？

977
00:45:14,680 --> 00:45:15,298
AUDIENCE: RGB.
观众：RGB。

978
00:45:15,298 --> 00:45:16,090
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

979
00:45:16,090 --> 00:45:18,190
So RGB, we'll come to that in just a moment.
所以RGB，我们一会儿就会谈到这一点。

980
00:45:18,190 --> 00:45:19,630
That stands for Red, Green, Blue.
这代表红色，绿色，蓝色。

981
00:45:19,630 --> 00:45:20,590
That's one way.
这是一种方式。

982
00:45:20,590 --> 00:45:23,590
In this case, though, I'm seeking an alternative
不过，在这种情况下，我正在寻找替代方案

983
00:45:23,590 --> 00:45:28,390
to just using five different patterns of 0's and 1's to represent the same emoji
只使用五种不同的 0 和 1 模式来表示相同的表情符号

984
00:45:28,390 --> 00:45:29,720
but different skin tones.
但肤色不同。

985
00:45:29,720 --> 00:45:30,620
So not quite RGB.
所以不完全是RGB。

986
00:45:30,620 --> 00:45:31,120
Yeah?
是的？

987
00:45:31,120 --> 00:45:32,278
AUDIENCE: [INAUDIBLE]
观众：[听不清]

988
00:45:32,278 --> 00:45:33,070
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

989
00:45:33,070 --> 00:45:37,660
So store one copy of the emoji and then store different variants of the color
因此，存储表情符号的一个副本，然后存储颜色的不同变体

990
00:45:37,660 --> 00:45:39,410
that you want to assign to that emoji.
你要分配给该表情符号。

991
00:45:39,410 --> 00:45:39,910
Yeah.
是的。

992
00:45:39,910 --> 00:45:42,452
So this is actually an example of-- do you want to elaborate?
所以这实际上是一个例子 - 你想详细说明吗？

993
00:45:42,452 --> 00:45:43,858
AUDIENCE: You could use a loop.
观众：你可以使用循环。

994
00:45:43,858 --> 00:45:44,650
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

995
00:45:44,650 --> 00:45:46,900
So you can use a loop to actually output these things.
所以你可以使用一个循环来实际输出这些东西。

996
00:45:46,900 --> 00:45:47,942
More on that in a moment.
稍后会详细介绍。

997
00:45:47,942 --> 00:45:49,990
Let me go down this road for just a moment.
让我沿着这条路走一会儿。

998
00:45:49,990 --> 00:45:54,335
This would be in some sense a better design, if you will, but why?
这将是在某种意义上更好的设计，如果你愿意，但为什么呢？

999
00:45:54,335 --> 00:45:54,835
Yeah?
是的？

1000
00:45:54,835 --> 00:45:55,798
AUDIENCE: A filter?
观众：过滤器？

1001
00:45:55,798 --> 00:45:56,590
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

1002
00:45:56,590 --> 00:45:58,780
So filter, if we think of in the Instagram sense.
所以过滤，如果我们从Instagram的意义上考虑。

1003
00:45:58,780 --> 00:46:01,885
You can change the color of something, and that could be related here too.
你可以更改某些内容的颜色，这也可能与此处相关。

1004
00:46:01,885 --> 00:46:03,967
AUDIENCE: Could it be another font [INAUDIBLE]
观众：会不会是另一种字体[听不清]

1005
00:46:03,967 --> 00:46:05,300
DAVID J. MALAN: Oh, interesting.
DAVID J. MALAN：哦，有意思。

1006
00:46:05,300 --> 00:46:07,410
So maybe it could be just a completely different font.
所以也许它可能只是一种完全不同的字体。

1007
00:46:07,410 --> 00:46:09,380
And you have five different fonts that are almost identical,
你有五种几乎相同的不同字体，

1008
00:46:09,380 --> 00:46:12,800
except for the various interpretations of skin tone for those same emoji.
除了那些相同的表情符号对肤色的各种解释。

1009
00:46:12,800 --> 00:46:13,550
Let me spoil.
让我剧透一下。

1010
00:46:13,550 --> 00:46:15,680
I think if we go down this one particular road,
我想如果我们沿着这条路走下去，

1011
00:46:15,680 --> 00:46:20,210
the way the Unicode folks decided to do this some years ago where
几年前Unicode人士决定这样做的方式

1012
00:46:20,210 --> 00:46:25,130
the first byte or bytes that you receive via text or email
你通过文本或电子邮件收到的第一个字节或多个字节

1013
00:46:25,130 --> 00:46:28,520
just represent like the structure of the emoji, the default yellow version,
就像表情符号的结构一样，默认的黄色版本，

1014
00:46:28,520 --> 00:46:29,060
thereof.
其中。

1015
00:46:29,060 --> 00:46:32,540
But if it's immediately followed by a certain pattern of bits
但是，如果它紧随其后的是某种模式的位

1016
00:46:32,540 --> 00:46:34,970
that these humans standardize to represent
这些人类标准化来代表

1017
00:46:34,970 --> 00:46:39,170
each of these different shades of skin tone, then the phone, the Mac,
这些不同色调的肤色中的每一个，然后是手机，Mac，

1018
00:46:39,170 --> 00:46:42,920
the PC will change that default color, yellow in most cases,
PC将更改默认颜色，在大多数情况下为黄色，

1019
00:46:42,920 --> 00:46:45,290
to whatever the more apt human tone is.
无论更贴切的人性语气是什么。

1020
00:46:45,290 --> 00:46:49,970
So you just use twice as many bits, but you don't use five times as many bits.
所以你只使用两倍的位，但你不会使用五倍的位。

1021
00:46:49,970 --> 00:46:50,720
So what do I mean?
那我是什么意思？

1022
00:46:50,720 --> 00:46:54,890
You don't have five completely distinct patterns, per se.
你本身没有五种完全不同的模式。

1023
00:46:54,890 --> 00:46:59,720
For each of these possible variants, you have a representation
对于这些可能的变体中的每一个，你都有一个表示形式

1024
00:46:59,720 --> 00:47:03,710
of just the emoji itself, structurally, and then
只是表情符号本身，在结构上，然后

1025
00:47:03,710 --> 00:47:07,920
reusable patterns for those five skin tones.
这五种肤色的可重复使用模式。

1026
00:47:07,920 --> 00:47:11,570
Unfortunately, that wasn't quite versatile enough for other features
不幸的是，这对于其他功能来说还不够通用

1027
00:47:11,570 --> 00:47:13,850
that were in the pipeline, and nowadays too,
这些都在酝酿中，现在也是如此，

1028
00:47:13,850 --> 00:47:16,100
and there's a double meaning now to representation.
现在代表有双重含义。

1029
00:47:16,100 --> 00:47:20,900
Emojis intended to focus on certain professions, and early on too,
表情符号旨在专注于某些职业，而且早期也是如此，

1030
00:47:20,900 --> 00:47:24,150
were certain professions associated with certain genders and vice versa.
某些职业是否与某些性别相关，反之亦然。

1031
00:47:24,150 --> 00:47:26,612
And you couldn't necessarily be one gender or another,
而且你不一定是一种性别或另一种性别，

1032
00:47:26,612 --> 00:47:28,070
in a certain profession or another.
在某个职业或另一个职业中。

1033
00:47:28,070 --> 00:47:30,230
There were these combinatorics that just weren't possible.
有这些组合是不可能的。

1034
00:47:30,230 --> 00:47:31,970
But nowadays, as you might have seen, you
但是如今，正如你可能已经看到的，你

1035
00:47:31,970 --> 00:47:33,920
can have couples in love for instance that
可以有恋爱中的情侣，例如

1036
00:47:33,920 --> 00:47:37,200
actually look a little more like three emojis, but just kind of combined
实际上看起来更像三个表情符号，但只是结合在一起

1037
00:47:37,200 --> 00:47:37,700
into one.
合二为一。

1038
00:47:37,700 --> 00:47:39,980
And indeed, this is just one key press on your phone,
事实上，这只是你手机上的一个按键，

1039
00:47:39,980 --> 00:47:43,550
and you can combine different emoji on the left and then the right
你可以在左边和右边组合不同的表情符号

1040
00:47:43,550 --> 00:47:45,390
with the emoji in the middle.
中间是表情符号。

1041
00:47:45,390 --> 00:47:47,480
And so it turns out how computers nowadays
所以现在的电脑是如何

1042
00:47:47,480 --> 00:47:52,940
represent these patterns are one set of bits for the character on the left,
表示这些模式是左边字符的一组位，

1043
00:47:52,940 --> 00:47:54,920
one set of bits for a character on the right,
右边字符的一组位，

1044
00:47:54,920 --> 00:47:58,080
one set of bits for whatever emoji you want in the middle.
一组位，用于中间你想要的任何表情符号。

1045
00:47:58,080 --> 00:48:02,450
And then you assemble more complicated compositions of emoji
然后你组装更复杂的表情符号组合

1046
00:48:02,450 --> 00:48:06,350
by just reusing those same patterns and bits and bits.
只需重用这些相同的模式和位和位。

1047
00:48:06,350 --> 00:48:10,160
The Unicode folks don't have to come up with a whole new representation
Unicode的人不必想出一个全新的表示

1048
00:48:10,160 --> 00:48:12,620
for some very specific incarnation.
对于一些非常具体的化身。

1049
00:48:12,620 --> 00:48:15,080
They can create one for person, for male,
他们可以为男性创造一个，

1050
00:48:15,080 --> 00:48:18,110
for, female for other characters that you might want to display,
对于，女性表示你可能想要显示的其他字符，

1051
00:48:18,110 --> 00:48:21,390
and reuse those same patterns of 0's and 1's.
并重复使用0和1的相同模式。

1052
00:48:21,390 --> 00:48:23,632
And so here, you see the imperfection, of or lack
所以在这里，你看到了不完美，或缺乏

1053
00:48:23,632 --> 00:48:26,090
of foresight, of humans for building a system early on that
的远见卓识，人类早期建立一个系统

1054
00:48:26,090 --> 00:48:29,390
was entirely American-centric, no characters, emoji, or the like,
完全以美国为中心，没有字符，表情符号等，

1055
00:48:29,390 --> 00:48:30,500
that's evolved too.
这也进化了。

1056
00:48:30,500 --> 00:48:33,800
And so that's an important detail in computing, nowadays.
因此，这是当今计算中的一个重要细节。

1057
00:48:33,800 --> 00:48:36,020
It too is evolving, and the languages you're
它也在进化，你的语言

1058
00:48:36,020 --> 00:48:39,780
about to learn in the coming days, those too are evolving as well.
即将在未来几天学习，这些也在不断发展。

1059
00:48:39,780 --> 00:48:42,980
And new features are getting added, and even programming languages have
新功能不断增加，甚至编程语言也有

1060
00:48:42,980 --> 00:48:43,942
version numbers.
版本号。

1061
00:48:43,942 --> 00:48:46,400
You might have a different version of an app on your phone.
你的手机上可能有不同版本的应用。

1062
00:48:46,400 --> 00:48:49,770
Programming languages too have different versions as well.
编程语言也有不同的版本。

1063
00:48:49,770 --> 00:48:51,830
Questions then thus far on how information
到目前为止关于如何信息的问题

1064
00:48:51,830 --> 00:48:56,900
is represented using ASCII or Unicode or anything in between?
使用ASCII或Unicode或任何在两者之间表示？

1065
00:48:56,900 --> 00:48:57,440
Yeah?
是的？

1066
00:48:57,440 --> 00:48:59,383
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1067
00:48:59,383 --> 00:49:00,800
DAVID J. MALAN: Oh, good question.
DAVID J. MALAN：哦，好问题。

1068
00:49:00,800 --> 00:49:04,240
So to recap, why can't you just--
所以回顾一下，你为什么不能——

1069
00:49:04,240 --> 00:49:07,390
well, let me summarize that as why can't you
好吧，让我总结一下，为什么你不能

1070
00:49:07,390 --> 00:49:10,843
similarly use different patterns to change the context of what
同样使用不同的模式来改变上下文

1071
00:49:10,843 --> 00:49:12,760
these patterns of bits represent, whether it's
这些位的模式代表，无论是

1072
00:49:12,760 --> 00:49:14,950
a number or a letter or a graphic?
一个数字、一个字母或一个图形？

1073
00:49:14,950 --> 00:49:17,920
In actuality, that's kind of what's happening underneath the hood.
实际上，这就是引擎盖下正在发生的事情。

1074
00:49:17,920 --> 00:49:21,220
It's not standardized in quite the same way, but starting next week,
它没有以完全相同的方式标准化，但从下周开始，

1075
00:49:21,220 --> 00:49:24,670
when we transition from scratch to C, you'll learn about types, data types.
当我们从零开始过渡到 C 时，你将了解类型、数据类型。

1076
00:49:24,670 --> 00:49:27,970
Where the onus initially is going to be on you, the programmer,
程序员最初的工作将由你负责，

1077
00:49:27,970 --> 00:49:30,850
to tell the program whether or not this pattern of bits
告诉程序这种位模式

1078
00:49:30,850 --> 00:49:33,820
should be interpreted as a number or as a letter
应解释为数字或字母

1079
00:49:33,820 --> 00:49:35,642
or as a color or something else.
或作为颜色或其他东西。

1080
00:49:35,642 --> 00:49:37,850
Nowadays, though, and toward the end of the semester,
不过，如今，在学期末，

1081
00:49:37,850 --> 00:49:41,170
you'll use languages, like Python, where the computer just figures it out
你将使用语言，如Python，计算机只是想办法解决它。

1082
00:49:41,170 --> 00:49:45,950
for you by context, which makes it even easier and faster to program as well.
通过上下文为你服务，这也使编程更加容易和快捷。

1083
00:49:45,950 --> 00:49:50,580
Other questions on Unicode, ASCII or the like?
关于Unicode，ASCII或类似的其他问题？

1084
00:49:50,580 --> 00:49:51,080
All right.
好吧。

1085
00:49:51,080 --> 00:49:53,330
Well, how about just a few other forms of information?
那么，其他几种形式的信息呢？

1086
00:49:53,330 --> 00:49:55,250
RGB was called out earlier, Red, Green, Blue.
RGB被称为较早，红色，绿色，蓝色。

1087
00:49:55,250 --> 00:49:57,410
How do images get represented in computers?
图像如何在计算机中呈现？

1088
00:49:57,410 --> 00:50:01,000
Well, in fact, it's typically an assembly of some amount of red,
嗯，事实上，它通常是一些红色的集合，

1089
00:50:01,000 --> 00:50:02,750
some amount of green, some amount of blue,
一定量的绿色，一些蓝色，

1090
00:50:02,750 --> 00:50:04,340
but there are other representations.
但还有其他表示形式。

1091
00:50:04,340 --> 00:50:06,423
If you're a graphic designer, you might know them,
如果你是一个平面设计师，你可能认识他们，

1092
00:50:06,423 --> 00:50:08,000
but RGB is still pretty common.
但RGB仍然很普遍。

1093
00:50:08,000 --> 00:50:08,970
What does this mean?
这是什么意思？

1094
00:50:08,970 --> 00:50:12,560
This means to represent every dot on your phone or every dot
这意味着代表手机上的每个点或每个点

1095
00:50:12,560 --> 00:50:15,470
on your TV or your laptop or desktop, there
在你的电视、笔记本电脑或台式机上，那里

1096
00:50:15,470 --> 00:50:18,395
is a number representing how much red that dot should show,
是一个数字，表示该点应显示多少红色，

1097
00:50:18,395 --> 00:50:21,020
a number representing how much green, and a number representing
一个数字代表多少绿色，一个数字代表

1098
00:50:21,020 --> 00:50:24,690
how much blue it should show, red, green, blue, respectively.
它应该显示多少蓝色，分别是红色、绿色、蓝色。

1099
00:50:24,690 --> 00:50:27,980
So for instance, if a dot on your screen were
例如，如果屏幕上的一个点是

1100
00:50:27,980 --> 00:50:33,410
using these three numbers, these three values or bytes, 72, 73, 33,
使用这三个数字，这三个值或字节，72，73，444，

1101
00:50:33,410 --> 00:50:37,250
in a text message or email, that would be interpreted as I claimed "High."
在短信或电子邮件中，这将被解释为我声称“高”。

1102
00:50:37,250 --> 00:50:40,160
But in Photoshop or in some graphical program,
但是在Photoshop或一些图形程序中，

1103
00:50:40,160 --> 00:50:43,670
that same pattern would be interpreted as let's
相同的模式将被解释为让我们

1104
00:50:43,670 --> 00:50:46,610
call it a medium amount of red, a medium amount of green,
称它为中等数量的红色，中等数量的绿色，

1105
00:50:46,610 --> 00:50:47,840
and a little bit of blue.
还有一点蓝色。

1106
00:50:47,840 --> 00:50:49,250
And why medium and little?
为什么是中等和很少？

1107
00:50:49,250 --> 00:50:53,120
Turns out, each of these are bytes, the smallest value you can have in a byte
原来，这些都是字节，你可以在一个字节中的最小值

1108
00:50:53,120 --> 00:50:54,110
we said is 0.
我们说是0。

1109
00:50:54,110 --> 00:50:56,558
The largest value you can have a byte is 255,
一个字节的最大值是 255，

1110
00:50:56,558 --> 00:50:58,100
so I'm just kind of spitballing here.
所以我只是在这里吐槽。

1111
00:50:58,100 --> 00:51:01,700
This is like medium, medium, and a low amount of red, green, blue,
这就像中等，中等，少量的红色，绿色，蓝色，

1112
00:51:01,700 --> 00:51:02,660
specifically.
具体说来。

1113
00:51:02,660 --> 00:51:07,640
Those three colors, like wavelengths of light, are combined in such a way
这三种颜色，就像光的波长一样，以这种方式组合在一起

1114
00:51:07,640 --> 00:51:11,690
that you would have this dot on the screen, a sort of murky shade
你会在屏幕上看到这个点，一种模糊的阴影

1115
00:51:11,690 --> 00:51:12,890
of yellow or brown.
黄色或棕色。

1116
00:51:12,890 --> 00:51:16,910
That is how a computer would store precisely that color,
这就是计算机如何精确存储这种颜色，

1117
00:51:16,910 --> 00:51:18,470
and in fact, we've seen this color.
事实上，我们已经看到了这种颜色。

1118
00:51:18,470 --> 00:51:22,010
When you type in Face with Tears of Joy, generally, on your screen,
当你带着喜悦的泪水在脸上打字时，一般来说，在你的屏幕上，

1119
00:51:22,010 --> 00:51:23,930
it looks like this, typically much smaller.
它看起来像这样，通常要小得多。

1120
00:51:23,930 --> 00:51:27,980
But let's zoom in, or let's Zoom in a little more.
但是让我们放大，或者再放大一点。

1121
00:51:27,980 --> 00:51:30,212
What are you starting to see, if you know the term?
如果你知道这个词，你开始看到什么？

1122
00:51:30,212 --> 00:51:30,920
AUDIENCE: Pixels.
受众：像素。

1123
00:51:30,920 --> 00:51:33,212
DAVID J. MALAN: So pixels, it's getting very pixelated.
DAVID J. MALAN：所以像素，它变得非常像素化。

1124
00:51:33,212 --> 00:51:36,510
A pixel is just a dot on the screen, and if you really zoom in on it,
像素只是屏幕上的一个点，如果你真的放大它，

1125
00:51:36,510 --> 00:51:40,520
you can literally see all of the dots that compose an emoji,
你可以从字面上看到组成表情符号的所有点，

1126
00:51:40,520 --> 00:51:43,940
in this case on iOS, in the font that Apple is using to represent this
在iOS上的这种情况下，在Apple用于表示此

1127
00:51:43,940 --> 00:51:45,750
particular pattern of 0's and 0's.
0 和 0 的特定模式。

1128
00:51:45,750 --> 00:51:49,400
So one of those yellow dots-- and there's many of them all kind of blend
所以其中一个黄点 -- 有很多都是混合的

1129
00:51:49,400 --> 00:51:50,330
together here--
一起在这里——

1130
00:51:50,330 --> 00:51:53,780
each dot on the screen I claim is 3 bytes.
我声称屏幕上的每个点都是 3 个字节。

1131
00:51:53,780 --> 00:51:55,700
How much red, green, blue for this dot?
这个点有多少红色、绿色、蓝色？

1132
00:51:55,700 --> 00:51:57,350
How much red green blue for this dot?
这个点有多少红绿蓝？

1133
00:51:57,350 --> 00:51:58,700
How much red green blue for this dot?
这个点有多少红绿蓝？

1134
00:51:58,700 --> 00:52:01,575
And you'll notice too, that when it gets to be sort of brownish here,
你也会注意到，当这里变成褐色时，

1135
00:52:01,575 --> 00:52:02,720
the dots really stand out.
这些点真的很突出。

1136
00:52:02,720 --> 00:52:05,480
The 3 values, the 3 bytes, a.k.a.
3 个值，3 个字节，又名

1137
00:52:05,480 --> 00:52:08,160
24 bits, are just slightly different.
24位，只是略有不同。

1138
00:52:08,160 --> 00:52:11,570
And so underneath the hood, this is why images, photographs
所以在引擎盖下面，这就是为什么图像，照片

1139
00:52:11,570 --> 00:52:14,930
that you take or gif that you download, get so darn big,
你拿的或者你下载的gif，变得如此之大，

1140
00:52:14,930 --> 00:52:19,850
potentially, because you have a number representing every dot on the screen.
潜在地，因为你有一个数字代表屏幕上的每个点。

1141
00:52:19,850 --> 00:52:22,970
Well, if this I claim is indeed how images are typically
嗯，如果我声称这确实是图像通常的样子

1142
00:52:22,970 --> 00:52:25,340
represented, using pattern of bits that are
表示，使用位模式

1143
00:52:25,340 --> 00:52:29,630
assigned to some amount of red, green, or blue, how do you get video?
分配到一定数量的红色，绿色或蓝色，你如何获得视频？

1144
00:52:29,630 --> 00:52:34,820
What is a video, if at the end of the day, all we have are 0's and 1's?
什么是视频，如果在一天结束时，我们只有0和1？

1145
00:52:34,820 --> 00:52:36,500
What's a video, perhaps?
也许什么是视频？

1146
00:52:36,500 --> 00:52:37,610
Yeah?
是的？

1147
00:52:37,610 --> 00:52:39,420
Let's go here, way in back.
让我们去这里，回到后面。

1148
00:52:39,420 --> 00:52:39,920
Yeah.
是的。

1149
00:52:39,920 --> 00:52:42,155
Pixels really changing values over time.
像素确实随时间变化值。

1150
00:52:42,155 --> 00:52:44,780
and do you want to confirm or deny, the hand that went up here?
你想确认还是否认，这里的手？

1151
00:52:44,780 --> 00:52:45,380
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1152
00:52:45,380 --> 00:52:47,422
DAVID J. MALAN: Yeah, or equivalently, a sequence
DAVID J. MALAN：是的，或者等效地，一个序列

1153
00:52:47,422 --> 00:52:49,828
of images that, over time, are changing on the screen.
随着时间的推移，屏幕上的图像正在发生变化。

1154
00:52:49,828 --> 00:52:51,620
So both of those are valid interpretations,
所以这两种解释都是有效的，

1155
00:52:51,620 --> 00:52:55,010
and just for fun, if you grew up with these picture books,
只是为了好玩，如果你和这些图画书一起长大，

1156
00:52:55,010 --> 00:52:57,540
you might remember a little something like this.
你可能还记得这样的小事。

1157
00:52:57,540 --> 00:52:59,191
if we could dim the lights?
如果我们能调暗灯光？

1158
00:52:59,191 --> 00:53:02,628
[MUSIC PLAYING]
[放歌！]

1159
00:53:02,628 --> 00:53:19,925


1160
00:53:19,925 --> 00:53:22,340
So that's the old school analog way to implement
所以这是老派的模拟实现方式

1161
00:53:22,340 --> 00:53:27,320
a video, in the sense that that artist wrote out like hundreds of pieces
一段视频，从某种意义上说，这位艺术家写了几百件作品

1162
00:53:27,320 --> 00:53:31,250
of paper, with almost identical images, but where the ink from their pencil
纸，几乎相同的图像，但那里的墨水从他们的铅笔

1163
00:53:31,250 --> 00:53:33,015
or pen was slightly moving.
或者笔在微微移动。

1164
00:53:33,015 --> 00:53:35,390
And if you digitize that, such that each of those strokes
如果你把它数字化，这样每个笔画

1165
00:53:35,390 --> 00:53:38,300
are represented with dots instead, that's really what you're seeing
用点表示，这就是你所看到的

1166
00:53:38,300 --> 00:53:41,220
is a sequence of all of these images flying across the screen.
是所有这些图像在屏幕上飞行的序列。

1167
00:53:41,220 --> 00:53:44,180
And if we dive into the real world, if you've ever watched a film,
如果我们潜入现实世界，如果你看过电影，

1168
00:53:44,180 --> 00:53:48,320
a Hollywood movie is typically 24 FPS, Frames Per Second.
好莱坞电影通常是每秒24 fps的帧数。

1169
00:53:48,320 --> 00:53:53,030
That really means you're seeing 24 images per second, or on TV or in soap
这实际上意味着你每秒或在电视或肥皂中看到24张图像

1170
00:53:53,030 --> 00:53:55,370
operas, it's often 30 frames per second.
歌剧，通常是每秒 30 帧。

1171
00:53:55,370 --> 00:53:57,210
That makes things look a little more smooth.
这让事情看起来更顺利一点。

1172
00:53:57,210 --> 00:53:59,750
So it's not actual motion picture, if you will.
所以这不是真正的电影，如果你愿意的话。

1173
00:53:59,750 --> 00:54:02,480
It's sequences of pictures, and your brain and mind
这是一系列的图片，你的大脑和思想

1174
00:54:02,480 --> 00:54:05,900
are interpolating that, oh, this is smooth movement, even though we're just
插值，哦，这是平滑的运动，即使我们只是

1175
00:54:05,900 --> 00:54:07,985
seeing a lot of pictures really fast.
看到很多图片的速度真的很快。

1176
00:54:07,985 --> 00:54:10,610
Now, that gets really big, and we'll talk later in the semester
现在，这真的很大，我们将在学期晚些时候讨论

1177
00:54:10,610 --> 00:54:13,700
how you can compress information, so that you're not using way
如何压缩信息，以便你不使用的方式

1178
00:54:13,700 --> 00:54:15,200
more bits than you actually need to.
比你实际需要的位数更多。

1179
00:54:15,200 --> 00:54:17,330
And there's fancy algorithms that folks have developed,
人们开发了一些奇特的算法，

1180
00:54:17,330 --> 00:54:19,850
but at the end of the day, that's really all a video might
但归根结底，这真的是一个视频可能

1181
00:54:19,850 --> 00:54:21,590
be is a sequence of images.
be 是一系列图像。

1182
00:54:21,590 --> 00:54:23,870
Conversely, if you want to represent the music that
相反，如果你想代表

1183
00:54:23,870 --> 00:54:27,410
accompanies that or something else, if any of you play an instrument
伴随着它或其他东西，如果你们中的任何一个演奏乐器

1184
00:54:27,410 --> 00:54:30,978
and can read sheet music, how could you digitize this?
并且可以阅读乐谱，你如何将其数字化？

1185
00:54:30,978 --> 00:54:31,520
[PIANO MUSIC]
[钢琴曲]

1186
00:54:31,520 --> 00:54:35,330
Like how could you represent musical notes in a computer?
比如你怎么能在电脑里表现音符？

1187
00:54:35,330 --> 00:54:37,850
You and I hear them when we play files, but what's
你和我听到他们当我们播放文件，但什么是

1188
00:54:37,850 --> 00:54:41,210
really going on underneath the hood?
真的在引擎盖下发生？

1189
00:54:41,210 --> 00:54:44,760
Any musicians, piano players?
有音乐家，钢琴演奏家吗？

1190
00:54:44,760 --> 00:54:45,260
Anyone?
任何人？

1191
00:54:45,260 --> 00:54:45,760
Yeah?
是的？

1192
00:54:45,760 --> 00:54:47,150
AUDIENCE: Hertz value?
观众：赫兹值？

1193
00:54:47,150 --> 00:54:49,590
DAVID J. MALAN: OK, so Hertz value, so some frequency.
DAVID J. MALAN:好的，那么赫兹值，一些频率。

1194
00:54:49,590 --> 00:54:52,528
So sound is some frequency, and it's kind of hitting your eardrum.
所以声音是某种频率，它有点击中你的耳膜。

1195
00:54:52,528 --> 00:54:55,320
And that's what makes it sound low or high or somewhere in between.
这就是让它听起来低或高或介于两者之间的原因。

1196
00:54:55,320 --> 00:54:58,460
So maybe we could assign, just like there's letters A through G here,
所以也许我们可以分配，就像这里有字母A到G一样，

1197
00:54:58,460 --> 00:55:00,860
maybe we could assign specific frequency values, which
也许我们可以分配特定的频率值，这

1198
00:55:00,860 --> 00:55:02,480
are just going to be numbers measured in something
只是用某种东西来衡量的数字

1199
00:55:02,480 --> 00:55:04,010
called Hertz, something per second.
叫赫兹，每秒某事。

1200
00:55:04,010 --> 00:55:06,843
And maybe we could have a few other numbers for each of these notes,
也许我们可以为每个笔记提供其他一些数字，

1201
00:55:06,843 --> 00:55:08,780
not just the note or the frequency.
不仅仅是音符或频率。

1202
00:55:08,780 --> 00:55:12,350
Maybe, we could represent the loudness of it, like how hard
也许，我们可以代表它的响度，比如有多难

1203
00:55:12,350 --> 00:55:14,900
or how softly a human might equivalently press it.
或者人类可以同等地轻柔地按压它。

1204
00:55:14,900 --> 00:55:17,630
Maybe a third number, like duration, like how long
也许是第三个数字，比如持续时间，比如多长时间

1205
00:55:17,630 --> 00:55:19,380
is there finger on the keyboard?
键盘上有手指吗？

1206
00:55:19,380 --> 00:55:22,790
So you can imagine quantifying something like music that in the real world
所以你可以想象在现实世界中量化音乐

1207
00:55:22,790 --> 00:55:25,400
is perfectly continuous as something more discrete,
作为更离散的东西是完全连续的，

1208
00:55:25,400 --> 00:55:29,450
by representing each note over time as just some sequence of values.
通过将每个音符随着时间的推移表示为一些值序列。

1209
00:55:29,450 --> 00:55:32,510
And there's so many different ways to do this, MIDI, if you've heard,
有很多不同的方法可以做到这一点，MIDI，如果你听说过的话，

1210
00:55:32,510 --> 00:55:34,680
mp3's, AAC.
mp3的，AAC。

1211
00:55:34,680 --> 00:55:37,670
Almost all of the file extensions you see on your Mac or PC,
你在Mac或PC上看到的几乎所有文件扩展名，

1212
00:55:37,670 --> 00:55:40,280
if you see them at all, ultimately just mean
如果你看到他们，最终只是意味着

1213
00:55:40,280 --> 00:55:43,170
there's a different form of representation for, in this case,
在这种情况下，有一种不同的表示形式，

1214
00:55:43,170 --> 00:55:45,290
something like sound.
类似声音的东西。

1215
00:55:45,290 --> 00:55:48,860
So let me just stipulate, there are these and many more
所以让我规定一下，有这些，还有更多

1216
00:55:48,860 --> 00:55:51,950
ways to represent inputs and outputs, and thankfully, humans
表示输入和输出的方式，谢天谢地，人类

1217
00:55:51,950 --> 00:55:53,300
have standardized a lot of this.
已经标准化了很多。

1218
00:55:53,300 --> 00:55:55,580
They don't always agree, and this is why we
他们并不总是同意，这就是为什么我们

1219
00:55:55,580 --> 00:55:57,920
have different file formats for Apple numbers
为Apple numbers提供不同的文件格式

1220
00:55:57,920 --> 00:55:59,840
and Microsoft Excel and Google Spreadsheets
Microsoft Excel和Google电子表格

1221
00:55:59,840 --> 00:56:02,100
and stupid incompatibilities like that.
以及像这样愚蠢的不兼容性。

1222
00:56:02,100 --> 00:56:04,190
But generally speaking, humans have standardized
但一般来说，人类已经标准化了

1223
00:56:04,190 --> 00:56:07,670
how we represent the inputs and outputs to and from problems.
我们如何表示问题的输入和输出。

1224
00:56:07,670 --> 00:56:10,370
But let's now focus on this Black box, so to speak,
但是现在让我们把注意力集中在这个黑匣子上，可以这么说，

1225
00:56:10,370 --> 00:56:12,590
in the middle, this abstraction.
在中间，这个抽象。

1226
00:56:12,590 --> 00:56:15,020
So abstraction is technically a term that you'll
所以抽象在技术上是一个术语，你会

1227
00:56:15,020 --> 00:56:16,820
see all over the place in computer science,
在计算机科学中到处可见，

1228
00:56:16,820 --> 00:56:18,695
and really, problem solving, that just refers
真的，解决问题，这只是指

1229
00:56:18,695 --> 00:56:23,630
to the simplification of something, so that you don't focus on the lower
简化某事，这样你就不会把注意力集中在下层

1230
00:56:23,630 --> 00:56:25,310
level implementation details.
级别实现详细信息。

1231
00:56:25,310 --> 00:56:29,880
You really just focus on the high level goals or the process itself.
你真的只是专注于高层次的目标或过程本身。

1232
00:56:29,880 --> 00:56:32,570
Therefore, your car, if you have a license
因此，你的车，如果你有执照

1233
00:56:32,570 --> 00:56:35,660
and have driven or have been in a car, a car, so far as you're concerned,
就你而言，开过车或坐过车，

1234
00:56:35,660 --> 00:56:36,830
is probably an abstraction.
可能是一个抽象。

1235
00:56:36,830 --> 00:56:38,997
Most of us, if you're like me, probably don't really
我们大多数人，如果你像我一样，可能不会真的

1236
00:56:38,997 --> 00:56:42,290
know or care how the engine works and all the parts that are moving.
了解或关心发动机的工作原理以及所有运动的零件。

1237
00:56:42,290 --> 00:56:44,570
To you, it's just a way of getting from point A
对你来说，这只是一种从a点

1238
00:56:44,570 --> 00:56:47,570
to point B. It's an abstraction, but someone, hopefully the mechanic,
到B点。这是一个抽象概念，但是有人，希望是机械师，

1239
00:56:47,570 --> 00:56:50,510
does know those lower level implementation details.
确实知道那些较低级别的实现细节。

1240
00:56:50,510 --> 00:56:53,030
If you had to understand how a car works every time you
如果你每次都要了解汽车是如何工作的

1241
00:56:53,030 --> 00:56:55,220
want to go to school or to the store, it's probably
想上学或去商店，可能是

1242
00:56:55,220 --> 00:56:56,700
going to be a pretty slow process.
这将是一个非常缓慢的过程。

1243
00:56:56,700 --> 00:57:00,590
You just want to think and operate at this higher level of abstraction,
你只想在这个更高的抽象层次上思考和操作，

1244
00:57:00,590 --> 00:57:04,350
and we're going to do this all the time when writing code and solving problems.
在编写代码和解决问题时，我们将一直这样做。

1245
00:57:04,350 --> 00:57:07,940
So what then is in this black box, this abstraction at the moment?
那么，这个黑盒子里现在是什么，这个抽象概念呢？

1246
00:57:07,940 --> 00:57:10,100
Well, generally, it's what a computer scientist
嗯，一般来说，这是一个计算机科学家

1247
00:57:10,100 --> 00:57:14,180
would call an algorithm, step-by-step instructions for solving some problem.
会调用一个算法，一步一步的指令来解决一些问题。

1248
00:57:14,180 --> 00:57:16,940
Now, let's consider the implementation details,
现在，让我们考虑一下实现细节，

1249
00:57:16,940 --> 00:57:20,150
that is to say how you might solve certain problems,
也就是说你如何解决某些问题，

1250
00:57:20,150 --> 00:57:24,230
and let's take a old school example but in modern form.
让我们举一个古老的学校例子，但以现代形式。

1251
00:57:24,230 --> 00:57:27,970
This icon, if you have an iPhone, is, of course for your contacts application.
这个图标，如果你有一个iPhone，当然是你的联系人应用程序。

1252
00:57:27,970 --> 00:57:30,470
And if you've got a whole bunch of family members or friends
如果你有一大群家人或朋友

1253
00:57:30,470 --> 00:57:32,420
or colleagues in your phonebook, you have
或电话簿中的同事，你有

1254
00:57:32,420 --> 00:57:35,330
some kind of contacts pictured here, and it's alphabetized typically
图中的某种联系人，通常是按字母顺序排列的

1255
00:57:35,330 --> 00:57:36,800
by first name and last name.
按名字和姓氏。

1256
00:57:36,800 --> 00:57:38,510
And odds are, you and I are in the habit,
很可能，你和我都有这个习惯，

1257
00:57:38,510 --> 00:57:41,690
if they're not already a favorite, of like clicking on Search
如果他们还不是最喜欢的，比如点击搜索

1258
00:57:41,690 --> 00:57:42,950
and then using autocomplete.
，然后使用自动完成功能。

1259
00:57:42,950 --> 00:57:45,140
And what happens when you start typing autocomplete?
当你开始输入自动完成时会发生什么？

1260
00:57:45,140 --> 00:57:48,710
Well if you type in the letter H, you'll see only, presumably,
如果你输入字母H，你大概只会看到，

1261
00:57:48,710 --> 00:57:50,640
Hagrid, Harry, Hermione, and so forth.
海格、哈利、赫敏等等。

1262
00:57:50,640 --> 00:57:54,350
If you type in H-A that shows you only Hagrid and Harry,
如果你输入只有海格和哈利的h-a，

1263
00:57:54,350 --> 00:57:56,280
and it all happens super fast.
这一切都发生得非常快。

1264
00:57:56,280 --> 00:57:57,720
So how is that happening?
那么这是怎么回事呢？

1265
00:57:57,720 --> 00:58:02,600
Well, typically, you could just start at the top and look to the bottom,
嗯，通常，你可以从顶部开始，看看底部，

1266
00:58:02,600 --> 00:58:06,110
searching for all of the H's or all of the H-A's, but for larger data
搜索所有H或所有h-a，但搜索更大的数据

1267
00:58:06,110 --> 00:58:07,490
sets that's going to get slow.
设置会变慢。

1268
00:58:07,490 --> 00:58:10,130
For the Googles of the world, that's going to get really slow.
对于世界上的google来说，这将变得非常缓慢。

1269
00:58:10,130 --> 00:58:13,580
And even on our phones when you have hundreds, thousands of contacts,
甚至在我们的手机上，当你有成百上千的联系人时，

1270
00:58:13,580 --> 00:58:17,210
eventually, even that kind of approach, that algorithm step by step
最终，即使是那种方法，那种算法一步一步地

1271
00:58:17,210 --> 00:58:18,300
it might be slow.
它可能很慢。

1272
00:58:18,300 --> 00:58:21,050
So how might we go about searching for someone in a phonebook
那么，我们如何在电话簿中搜索某人

1273
00:58:21,050 --> 00:58:24,230
like this, like say John Harvard?
像这样，就像约翰哈佛？

1274
00:58:24,230 --> 00:58:26,720
Well, here's an old school incarnation of this,
嗯，这是一个古老的学校化身，

1275
00:58:26,720 --> 00:58:29,630
and odds are, you might not have had occasion to even physically
很有可能，你甚至可能没有机会

1276
00:58:29,630 --> 00:58:30,910
use this thing, nowadays.
现在使用这个东西。

1277
00:58:30,910 --> 00:58:32,660
And in fact, this is a bit of a white lie,
事实上，这是一个善意的谎言，

1278
00:58:32,660 --> 00:58:34,535
because this is the yellow pages, which means
因为这是黄页，这意味着

1279
00:58:34,535 --> 00:58:36,950
this is a book of companies not people.
这是一本关于公司的书，而不是一本关于人的书。

1280
00:58:36,950 --> 00:58:40,370
But this is all you can find, and at that, it's even hard to find this.
但这是你能找到的全部，在那，甚至很难找到这个。

1281
00:58:40,370 --> 00:58:43,770
But this is the same thing in analog form, physical form.
但这在模拟形式，物理形式中是一样的。

1282
00:58:43,770 --> 00:58:47,310
So if I wanted to search for someone like John Harvard, how could I do that?
所以，如果我想寻找像约翰·哈佛这样的人，我该怎么做呢？

1283
00:58:47,310 --> 00:58:49,580
Well, I could start on page 1, and I could
嗯，我可以从第1页开始，我可以

1284
00:58:49,580 --> 00:58:55,345
start searching for page 2, page 3, page 4, page 5.
开始搜索第2页、第3页、第4页、第5页。

1285
00:58:55,345 --> 00:58:57,470
A little hard to do physically, especially since no
身体上有点难，特别是因为没有

1286
00:58:57,470 --> 00:58:59,345
one's used this phone book in a lot of years.
有人用过这个电话簿很多年了。

1287
00:58:59,345 --> 00:59:06,260
But is this algorithm correct, turning page by page, very inelegantly?
但是这个算法正确吗，一页地翻动，非常不优雅？

1288
00:59:06,260 --> 00:59:06,980
Is this correct?
这是对的吗？

1289
00:59:06,980 --> 00:59:09,690
Will I find John Harvard, if he's in here?
如果约翰·哈佛在这里，我会找到他吗？

1290
00:59:09,690 --> 00:59:10,190
All right.
好吧。

1291
00:59:10,190 --> 00:59:11,030
So yes.
所以是的。

1292
00:59:11,030 --> 00:59:14,240
This is a little stupidly tedious, because if there's like 1,000 pages,
这有点愚蠢乏味，因为如果有1,000页，

1293
00:59:14,240 --> 00:59:16,870
he might be a few hundred pages into this, but it's correct.
他可能有几百页的篇幅，但这是正确的。

1294
00:59:16,870 --> 00:59:20,120
At some point, I will find him, and if he's on the page, I'll be able to call.
在某个时候，我会找到他，如果他在页面上，我就可以打电话。

1295
00:59:20,120 --> 00:59:20,620
Why?
为什么？

1296
00:59:20,620 --> 00:59:22,950
Because presumably, the names are alphabetized in here,
因为大概，名字是按字母顺序排列的，

1297
00:59:22,950 --> 00:59:24,608
and there's no cheat sheet on the edge.
而且边缘没有备忘单。

1298
00:59:24,608 --> 00:59:27,650
So I have to search for John Harvard from left to right, searching for H,
所以我必须从左到右搜索约翰·哈佛，搜索H，

1299
00:59:27,650 --> 00:59:29,150
if it's alphabetized by last name.
如果按姓氏按字母顺序排列。

1300
00:59:29,150 --> 00:59:30,740
Well, what would be marginally better?
那么，什么会稍微好一点？

1301
00:59:30,740 --> 00:59:32,240
Well, how about two pages at a time?
好吧，一次两页怎么样？

1302
00:59:32,240 --> 00:59:34,160
It's hard to do with a 20-year-old phone book,
用20年的电话簿很难做到，

1303
00:59:34,160 --> 00:59:41,150
where the pages are grown together, but 2, 4, 6, 8, 10, 12.
其中页面生长在一起，但是2，4，6，8，10，12。

1304
00:59:41,150 --> 00:59:42,605
This algorithm, is this correct?
这个算法，这是正确的吗？

1305
00:59:42,605 --> 00:59:43,465
AUDIENCE: No.
观众：没有。

1306
00:59:43,465 --> 00:59:44,150
DAVID J. MALAN: All right, so no.
DAVID J. MALAN：好的，所以没有。

1307
00:59:44,150 --> 00:59:44,780
Why?
为什么？

1308
00:59:44,780 --> 00:59:46,280
AUDIENCE: You're skipping pages.
观众：你在跳过页面。

1309
00:59:46,280 --> 00:59:46,610
DAVID J. MALAN: Yeah.
DAVID J. MALAN：是的。

1310
00:59:46,610 --> 00:59:48,060
So I'm skipping every other page.
所以我跳过每隔一页。

1311
00:59:48,060 --> 00:59:53,480
So if I don't consider that, and I find myself in like the I section or the J
所以如果我不考虑这一点，我发现自己在像I节或J节

1312
00:59:53,480 --> 00:59:56,120
section, well, I might accidentally conclude,
部分，嗯，我可能会意外得出结论，

1313
00:59:56,120 --> 00:59:59,755
nope, I haven't found John Harvard yet, just because I skipped him, because it
不，我还没有找到约翰·哈佛，只是因为我跳过了他，因为它

1314
00:59:59,755 --> 01:00:01,130
was sandwiched between two pages.
夹在两页之间。

1315
01:00:01,130 --> 01:00:04,700
Now, I can fix this, I think, if I do hit the I section,
现在，我可以解决这个问题，我想，如果我点击了I部分，

1316
01:00:04,700 --> 01:00:08,100
well, let me just double back one page, just in case he was in that last page.
好吧，让我翻回一页，以防他在最后一页。

1317
01:00:08,100 --> 01:00:12,277
So it's recoverable, but it's almost twice as fast, minus that hiccup there.
所以它是可以恢复的，但它的速度几乎是原来的两倍，减去那里的打嗝。

1318
01:00:12,277 --> 01:00:14,360
But what most of us would do, and what your phones
但是我们大多数人会做什么，你的手机

1319
01:00:14,360 --> 01:00:16,395
are doing, albeit digitally, is they open up
正在做的，尽管是数字化的，是他们开放的

1320
01:00:16,395 --> 01:00:18,020
roughly to the middle of the phonebook.
大致到电话簿的中间。

1321
01:00:18,020 --> 01:00:21,747
And they look down, and they say, oh, I'm in roughly the M section.
他们往下看，他们说，哦，我大约在M区。

1322
01:00:21,747 --> 01:00:24,080
So I'm roughly halfway through the 1,000-page phonebook.
所以我已经看了1,000页电话簿的一半了。

1323
01:00:24,080 --> 01:00:26,510
But what do I now know about John Harvard?
但是我现在对约翰·哈佛了解多少？

1324
01:00:26,510 --> 01:00:29,820
Where is he, to my left or to my right?
他在哪里，在我的左边还是在我的右边？

1325
01:00:29,820 --> 01:00:30,320
All right.
好吧。

1326
01:00:30,320 --> 01:00:32,810
So alphabetically, he's presumably to my left,
按字母顺序，他大概在我的左边，

1327
01:00:32,810 --> 01:00:37,340
and so here I can, both metaphorically and physically,
所以在这里，无论是隐喻还是身体上，

1328
01:00:37,340 --> 01:00:39,950
tear the problem in half.
把问题撕成两半。

1329
01:00:39,950 --> 01:00:41,330
You don't need to be impressed.
你不需要留下深刻的印象。

1330
01:00:41,330 --> 01:00:43,280
It's really easy down the spine that way,
这样很容易下到脊椎，

1331
01:00:43,280 --> 01:00:46,460
but I know that John Harvard is to the left here.
但我知道约翰·哈佛在左边。

1332
01:00:46,460 --> 01:00:51,500
But now I can throw, unnecessarily dramatically, half and page one out
但是现在我可以不必要地戏剧性地扔掉一半和第一页

1333
01:00:51,500 --> 01:00:53,810
of the way, and what do I now know?
路，我现在知道什么？

1334
01:00:53,810 --> 01:00:55,910
I've gone from 1,000 pages to like 500.
我已经从 1,000 页变成了 500 页。

1335
01:00:55,910 --> 01:00:57,602
I can repeat roughly the same algorithm.
我可以重复大致相同的算法。

1336
01:00:57,602 --> 01:01:00,560
Go to the half of this, and so this time, I went back a little too far.
走到一半，所以这一次，我回去有点太远了。

1337
01:01:00,560 --> 01:01:03,150
I'm in now the E section.
我现在在E部分。

1338
01:01:03,150 --> 01:01:04,040
So what do I know?
那我知道什么？

1339
01:01:04,040 --> 01:01:07,490
Is John Harvard to my left or to my right?
约翰·哈佛在我左边还是右边？

1340
01:01:07,490 --> 01:01:09,950
To my right, so I can, again, tear the problem in half.
在我的右边，所以我可以再次将问题撕成两半。

1341
01:01:09,950 --> 01:01:12,800
Throw this half away, and now I'm really flying.
扔掉这一半，现在我真的在飞。

1342
01:01:12,800 --> 01:01:17,180
I'm doing it verbally slowly, but that went from 1,000 pages to 500
我说得很慢，但从1,000页到500页

1343
01:01:17,180 --> 01:01:18,380
to now 250.
到现在250。

1344
01:01:18,380 --> 01:01:20,960
And now I can do it again, 125.
现在我可以再做一次，125。

1345
01:01:20,960 --> 01:01:25,160
I do it again, roughly like 67, and keep doing it again and again and again,
我再做一次，大约67岁，然后一遍又一遍地做，

1346
01:01:25,160 --> 01:01:29,840
until I get left with, hopefully, just one single page or in this case
直到我得到，希望，只有一页或在这种情况下

1347
01:01:29,840 --> 01:01:32,210
an ad for, ironically, a mechanic.
具有讽刺意味的是，一个机械师的广告。

1348
01:01:32,210 --> 01:01:36,620
OK, so what is the implication for our performance?
好吧，那对我们的表现有什么影响呢？

1349
01:01:36,620 --> 01:01:39,590
Well, let's just do this sort of in the abstract, if you will,
好吧，如果你愿意的话，让我们抽象地做一下，

1350
01:01:39,590 --> 01:01:43,250
if that first algorithm were to be plotted just quickly on a chart
如果第一个算法被快速绘制在图表上

1351
01:01:43,250 --> 01:01:44,340
without even numbers.
没有偶数。

1352
01:01:44,340 --> 01:01:47,340
Here's my x-axis, size of problem on the x-axis.
这是我的x轴，x轴上的问题大小。

1353
01:01:47,340 --> 01:01:49,760
So the bigger the problem, the farther out that way.
所以问题越大，那条路就越远。

1354
01:01:49,760 --> 01:01:51,200
Time to solve the problem.
是时候解决问题了。

1355
01:01:51,200 --> 01:01:55,530
The higher you go up on the y-axis, the more time you're taking to solve it.
你在y轴上走得越高，你解决它的时间就越多。

1356
01:01:55,530 --> 01:01:58,190
How would we draw the running time, the amount of time
我们如何绘制运行时间，时间量

1357
01:01:58,190 --> 01:01:59,850
taken to run that first algorithm?
运行第一个算法？

1358
01:01:59,850 --> 01:02:01,010
Well, it's going to be a straight line.
好吧，这将是一条直线。

1359
01:02:01,010 --> 01:02:01,520
Why?
为什么？

1360
01:02:01,520 --> 01:02:03,485
Because if you add one more page next year
因为如果你明年多加一页

1361
01:02:03,485 --> 01:02:05,360
because more people move to Cambridge, you're
因为更多的人搬到剑桥，你

1362
01:02:05,360 --> 01:02:07,790
going to add one more page turn potentially, so
可能会再增加一页，所以

1363
01:02:07,790 --> 01:02:09,790
one more second, one more unit of time.
多一秒，多一个时间单位。

1364
01:02:09,790 --> 01:02:10,790
So it's a straight line.
所以这是一条直线。

1365
01:02:10,790 --> 01:02:12,207
And we'll abstract it away as "n."
我们将它抽象为“n”。

1366
01:02:12,207 --> 01:02:15,560
If there's n pages in the phone book, the slope of this line
如果电话簿中有n页，则这条线的斜率

1367
01:02:15,560 --> 01:02:16,640
is essentially n.
本质上是 n。

1368
01:02:16,640 --> 01:02:20,180
The second algorithm, wherein I was doing two pages at a time,
第二种算法，我一次做两页，

1369
01:02:20,180 --> 01:02:22,970
was twice as fast, but it's still a straight line.
快了两倍，但仍然是一条直线。

1370
01:02:22,970 --> 01:02:25,190
And in fact, let me just draw some dotted lines here.
事实上，让我在这里画一些虚线。

1371
01:02:25,190 --> 01:02:28,310
If the phone book is this big, with my first algorithm,
如果电话簿这么大，用我的第一个算法，

1372
01:02:28,310 --> 01:02:32,990
it might take this many units of time, this many steps, this many page turns.
它可能需要这么多的时间单位，这么多的步骤，这么多的翻页。

1373
01:02:32,990 --> 01:02:37,430
But with that second algorithm, notice that the intersection is much lower
但是使用第二种算法，请注意交集要低得多

1374
01:02:37,430 --> 01:02:39,260
on the yellow line than on the red.
在黄线上比在红线上。

1375
01:02:39,260 --> 01:02:42,170
So n over 2 means there's half as many pages here,
所以n超过2意味着这里有一半的页面，

1376
01:02:42,170 --> 01:02:43,517
if n is the number of pages.
如果 n 是页数。

1377
01:02:43,517 --> 01:02:45,350
So indeed, that algorithm-- the second one--
所以实际上，那个算法 -- 第二个 --

1378
01:02:45,350 --> 01:02:49,530
is twice as fast minus the little hiccup that I have to double back one page.
减去我必须翻倍一页的小问题，速度是原来的两倍。

1379
01:02:49,530 --> 01:02:53,000
But that's not a big deal if I'm still doing things twice as fast.
但是，如果我仍然以两倍的速度做事，那没什么大不了的。

1380
01:02:53,000 --> 01:02:55,340
But the third algorithm looks fundamentally different.
但第三种算法看起来根本不同。

1381
01:02:55,340 --> 01:02:56,300
It looks like this.
它看起来像这样。

1382
01:02:56,300 --> 01:02:58,970
Logarithms, if you recall from high school or prior--
对数，如果你回忆起高中或以前的-

1383
01:02:58,970 --> 01:03:00,320
if you don't, that's fine too.
如果你不这样做，那也没关系。

1384
01:03:00,320 --> 01:03:03,900
It's just a fundamentally different function, a different shape.
它只是一个根本不同的功能，一个不同的形状。

1385
01:03:03,900 --> 01:03:05,870
And notice that the green line is going up
请注意，绿线正在上升

1386
01:03:05,870 --> 01:03:11,060
and up and up but a much slower rate of increase, which means crazy things
但增长速度要慢得多，这意味着疯狂的事情

1387
01:03:11,060 --> 01:03:11,720
are possible.
是可能的。

1388
01:03:11,720 --> 01:03:14,270
If two towns in Massachusetts, like Cambridge and Allston,
如果马萨诸塞州的两个城镇，比如剑桥和奥尔斯顿，

1389
01:03:14,270 --> 01:03:18,560
across the river, merge next year, for instance, in terms of their phone book,
过河，明年合并，例如，在他们的电话簿方面，

1390
01:03:18,560 --> 01:03:20,890
they're phone book just got twice as big.
他们的电话簿只有两倍大。

1391
01:03:20,890 --> 01:03:23,740
For the first algorithm, that's going to take me twice as many steps
对于第一个算法，这将花费我两倍的步骤

1392
01:03:23,740 --> 01:03:24,550
to go through.
通过。

1393
01:03:24,550 --> 01:03:28,390
The second algorithm, almost it's going to take me 50% more steps
第二个算法，几乎要我多走50% 步

1394
01:03:28,390 --> 01:03:29,780
to go through, two at a time.
要通过，一次两个。

1395
01:03:29,780 --> 01:03:33,010
But the third algorithm, that I ended with, tearing things again and again,
但是第三个算法，我结束了，一次又一次地撕裂东西，

1396
01:03:33,010 --> 01:03:36,190
dividing and conquering, if you will, in half and in half and in half,
分而治之，如果你愿意，分成两半，分成两半，

1397
01:03:36,190 --> 01:03:38,650
how many more steps will my third algorithm
我的第三个算法还有多少步

1398
01:03:38,650 --> 01:03:42,965
take if Cambridge and Allston merge into a phone book that's twice as big?
以剑桥和奥尔斯顿合并成一个两倍大的电话簿为例？

1399
01:03:42,965 --> 01:03:43,840
AUDIENCE: Four steps.
观众：四个步骤。

1400
01:03:43,840 --> 01:03:45,590
DAVID J. MALAN: Just one more step, right?
DAVID J. MALAN：再走一步，对吧？

1401
01:03:45,590 --> 01:03:46,160
No big deal.
没什么大不了的。

1402
01:03:46,160 --> 01:03:48,243
You just take a really big bite out of the problem
你只是从这个问题中咬了一大口

1403
01:03:48,243 --> 01:03:50,960
once you decide if John Harvard is to the left or to the right.
一旦你决定约翰·哈佛是向左还是向右。

1404
01:03:50,960 --> 01:03:53,470
And so you've made much faster progress.
所以你取得了更快的进展。

1405
01:03:53,470 --> 01:03:56,800
And so this, in essence, is what your computer, your phone
所以从本质上讲，这就是你的电脑，你的手机

1406
01:03:56,800 --> 01:04:00,730
is probably doing underneath the hood when searching for Harry or Hermione
在寻找哈利或赫敏时，可能是在引擎盖下做的

1407
01:04:00,730 --> 01:04:04,090
or Hagrid or anyone else because it's that much faster,
或者海格或者其他人，因为它快得多，

1408
01:04:04,090 --> 01:04:05,590
especially when you have large data.
尤其是当你拥有大量数据时。

1409
01:04:05,590 --> 01:04:07,632
If you don't have that many contacts, it probably
如果你没有那么多联系人，它可能

1410
01:04:07,632 --> 01:04:11,318
doesn't matter if you search from top to bottom or more
不要紧，如果你搜索从上到下或更多

1411
01:04:11,318 --> 01:04:13,360
in the form of this divide-and-conquer algorithm.
以这种分而治之算法的形式。

1412
01:04:13,360 --> 01:04:16,600
But if you're the Googles of the world or you're analyzing large data sets,
但是如果你是世界上的谷歌人，或者你正在分析大型数据集，

1413
01:04:16,600 --> 01:04:18,920
indeed, this is going to add up quite quickly.
事实上，这将很快增加。

1414
01:04:18,920 --> 01:04:20,420
So where do we go with this?
那么我们该何去何从呢？

1415
01:04:20,420 --> 01:04:23,140
Well, we're going to introduce next something called pseudocode.
好，我们接下来要介绍一种叫做伪代码的东西。

1416
01:04:23,140 --> 01:04:25,630
How can I translate what I did verbally there,
我怎样才能翻译我在那里口头所做的，

1417
01:04:25,630 --> 01:04:27,673
sort of intuitively, to actual code?
有点直观，到实际代码？

1418
01:04:27,673 --> 01:04:28,840
Well, this won't be Scratch.
好吧，这不会是Scratch。

1419
01:04:28,840 --> 01:04:30,830
This won't be C or Python just yet.
这还不是C或Python。

1420
01:04:30,830 --> 01:04:32,840
It's just going to be an English-like syntax.
这将是一个类似英语的语法。

1421
01:04:32,840 --> 01:04:35,530
And this is how many programmers would start solving a problem.
这就是许多程序员开始解决问题的方式。

1422
01:04:35,530 --> 01:04:38,763
They don't start typing out code in C or Python or the like.
他们不会开始用C或Python等输入代码。

1423
01:04:38,763 --> 01:04:40,930
They use English or whatever their human language is
他们使用英语或任何人类语言

1424
01:04:40,930 --> 01:04:43,210
to jot down an outline for their ideas.
记下他们的想法的大纲。

1425
01:04:43,210 --> 01:04:45,700
My first step, really, was picking up the phone book.
我的第一步，真的，是拿起电话簿。

1426
01:04:45,700 --> 01:04:48,790
My second step was opening to the middle of the phone book.
我的第二步是打开电话簿的中间。

1427
01:04:48,790 --> 01:04:52,570
My third step was somewhat different-- look at the page, because why?
我的第三步有点不同 -- 看看页面，因为为什么？

1428
01:04:52,570 --> 01:04:57,670
My fourth step was if person I'm looking for is on the page, I then do what?
我的第四步是，如果我要找的人在页面上，那么我做什么？

1429
01:04:57,670 --> 01:05:00,820
It never happened in my example, but I call the person.
在我的例子中从来没有发生过，但我打电话给那个人。

1430
01:05:00,820 --> 01:05:01,960
So I'm done.
所以我完成了。

1431
01:05:01,960 --> 01:05:04,750
Else if the person is earlier in the book
否则，如果该人在书中较早

1432
01:05:04,750 --> 01:05:08,830
alphabetically, as John Harvard was in the case of my H, then
按字母顺序排列，就像约翰·哈佛在我的H的情况下，然后

1433
01:05:08,830 --> 01:05:12,460
I should search to the middle of the left of the phone book.
我应该搜索到电话簿左边的中间。

1434
01:05:12,460 --> 01:05:15,800
And then I should go back to step three.
然后我应该回到第三步。

1435
01:05:15,800 --> 01:05:18,820
Step 3 is look at the page, thereby repeating the same process
步骤3是查看页面，从而重复相同的过程

1436
01:05:18,820 --> 01:05:19,540
again and again.
一次又一次。

1437
01:05:19,540 --> 01:05:22,960
Step 9, though, might be else if the person is later in the book,
但是，如果该人在书中稍后，则步骤9可能是其他步骤，

1438
01:05:22,960 --> 01:05:25,960
then let's go ahead and open to the middle of the right half of the book
然后让我们继续打开书的右半部分的中间

1439
01:05:25,960 --> 01:05:29,050
and then go back to line 3.
然后返回第 3 行。

1440
01:05:29,050 --> 01:05:32,350
Else there's a fourth scenario we should probably consider,
否则我们可能应该考虑第四种情况，

1441
01:05:32,350 --> 01:05:36,520
lest my search process freeze or crash or give me one of those spinning beach
以免我的搜索过程冻结或崩溃，或者给我一个旋转的海滩

1442
01:05:36,520 --> 01:05:37,750
balls with a bug.
带有虫子的球。

1443
01:05:37,750 --> 01:05:38,470
Yeah--
是的--

1444
01:05:38,470 --> 01:05:39,580
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1445
01:05:39,580 --> 01:05:41,620
DAVID J. MALAN: Yeah, what if John Harvard isn't in the phone book?
DAVID J. MALAN：是的，如果约翰·哈佛不在电话簿上怎么办？

1446
01:05:41,620 --> 01:05:44,438
I'd prefer that my algorithm, my phone not just reboot or freeze.
我更喜欢我的算法，我的手机不只是重新启动或冻结。

1447
01:05:44,438 --> 01:05:46,480
I should handle that with some kind of catch all.
我应该用某种方式来处理这件事。

1448
01:05:46,480 --> 01:05:49,420
Else, so to speak, let's just quit the program.
否则，可以这么说，让我们退出程序。

1449
01:05:49,420 --> 01:05:54,340
So there's well-defined behavior for every possible scenario of the four.
因此，对于这四种可能的情况，都有明确定义的行为。

1450
01:05:54,340 --> 01:05:56,470
Now, let's call out a few of these salient terms.
现在，让我们提出一些重要的术语。

1451
01:05:56,470 --> 01:05:58,390
It turns out, if I highlight in yellow here,
事实证明，如果我在这里突出显示黄色，

1452
01:05:58,390 --> 01:06:00,620
there's a pattern to what I've been doing here.
我在这里做的事情是有规律的。

1453
01:06:00,620 --> 01:06:02,050
These are all of my English verbs.
这些都是我的英语动词。

1454
01:06:02,050 --> 01:06:05,410
And in a moment, we're going to start calling those verbs "functions."
稍后，我们将开始称这些动词为 “函数”。

1455
01:06:05,410 --> 01:06:09,280
When you program or write code and you want the program or the computer
当你编程或编写代码时，你想要程序或计算机

1456
01:06:09,280 --> 01:06:11,980
to do something for you, some action or verb,
为你做某事，一些动作或动词，

1457
01:06:11,980 --> 01:06:14,020
we're going to refer to those actions or verbs
我们将提到那些动作或动词

1458
01:06:14,020 --> 01:06:16,510
as these things called "functions," like those here.
这些东西叫做 “函数”，就像这里的一样。

1459
01:06:16,510 --> 01:06:18,640
By contrast, I've just highlighted, instead,
相比之下，我刚刚强调了，

1460
01:06:18,640 --> 01:06:20,950
my "if," my "else if," my "else if," and "else."
我的 “if”，我的 “else if”，我的 “else if” 和 “else”。

1461
01:06:20,950 --> 01:06:22,990
This is going to represent what we're going
这将代表我们将要做的事情

1462
01:06:22,990 --> 01:06:26,590
to start calling a "conditional," a proverbial fork in the road where
开始调用一个 “有条件的”，一个众所周知的岔路口，在那里

1463
01:06:26,590 --> 01:06:29,860
you can either go this way or that way, do this thing or this other thing.
你可以走这条路或那条路，做这件事或其他事情。

1464
01:06:29,860 --> 01:06:32,320
And you're going to decide which of those things
你将决定哪些事情

1465
01:06:32,320 --> 01:06:35,740
to do based on what I've now highlighted here, which are going
根据我现在在这里强调的内容来做，这些内容将会

1466
01:06:35,740 --> 01:06:38,230
to be called "Boolean expressions"--
被称为“布尔表达式”——

1467
01:06:38,230 --> 01:06:41,260
Boole, referring to a mathematician, last name Boole.
布尔，指的是数学家，姓布尔。

1468
01:06:41,260 --> 01:06:47,140
A Boolean expression is just a question with a yes/no, a true/false, a 1 or a 0
布尔表达式只是一个带有是/否，真/假，1或0的问题

1469
01:06:47,140 --> 01:06:47,980
answer, if you will.
回答，如果你愿意的话。

1470
01:06:47,980 --> 01:06:51,790
And it governs whether you do this thing or this thing or this thing or that.
它支配着你是做这件事还是做这件事，还是做这件事，还是做那件事。

1471
01:06:51,790 --> 01:06:54,440
The indentation, in this case, is important.
在这种情况下，压痕很重要。

1472
01:06:54,440 --> 01:06:59,020
The fact that I've indented line 5 implies, by convention in programming,
事实上，我已经缩进了第5行，这意味着，按照编程中的约定，

1473
01:06:59,020 --> 01:07:03,610
that I should only do line 5 if the answer to line 4 is a yes or a true,
如果第4行的答案是肯定或正确，我只应做第5行，

1474
01:07:03,610 --> 01:07:06,410
and same for these other indented lines as well.
对于这些其他缩进行也是如此。

1475
01:07:06,410 --> 01:07:09,492
And the last characteristic here is this here.
这里的最后一个特征是这里。

1476
01:07:09,492 --> 01:07:11,200
Someone called this out earlier, in fact.
事实上，早些时候有人这么说。

1477
01:07:11,200 --> 01:07:15,580
These lines, 8 and 11, are now highlighted and represent what?
这些线，8和11，现在突出显示，代表什么？

1478
01:07:15,580 --> 01:07:18,790
What might we call these in code if you've done--
如果你已经完成了，我们可以在代码中称之为什么-

1479
01:07:18,790 --> 01:07:21,340
yeah, so these are loops, some kind of cycles
是的，这些是循环，某种循环

1480
01:07:21,340 --> 01:07:24,820
that result in my doing the same thing again and again,
导致我一次又一次地做同样的事情，

1481
01:07:24,820 --> 01:07:28,240
but there's a key detail with this algorithm in pseudocode.
但是这个算法在伪代码中有一个关键的细节。

1482
01:07:28,240 --> 01:07:31,200
Even though it's telling me to go back to line 3,
即使它告诉我回到3号线，

1483
01:07:31,200 --> 01:07:34,750
why is this algorithm eventually going to stop?
为什么这个算法最终会停止？

1484
01:07:34,750 --> 01:07:37,600
Why do I not constantly keep looking for John Harvard
为什么我不一直找约翰·哈佛

1485
01:07:37,600 --> 01:07:43,010
forever by nature of these loops telling me to keep going back to line 3?
这些循环的性质永远告诉我继续回到第3行？

1486
01:07:43,010 --> 01:07:43,580
Good.
好。

1487
01:07:43,580 --> 01:07:48,590
Eventually, he'll be on the page or, to your point earlier, he won't be at all
最终，他会出现在页面上，或者，就你之前的观点而言，他根本不会出现

1488
01:07:48,590 --> 01:07:51,260
and we're out of pages, and so we just quit.
我们没有页数了，所以我们就辞职了。

1489
01:07:51,260 --> 01:07:54,050
And that's the key about going to the left half or the right half.
这是进入左半部分或右半部分的关键。

1490
01:07:54,050 --> 01:07:56,430
It doesn't matter if you do the same thing again and again.
如果你一遍又一遍地做同样的事情也没关系。

1491
01:07:56,430 --> 01:07:58,847
You're not going to get stuck in a so-called infinite loop
你不会陷入所谓的无限循环

1492
01:07:58,847 --> 01:08:02,750
so long as you keep dividing the problem and shrinking it into something
只要你继续划分问题并将其缩小

1493
01:08:02,750 --> 01:08:03,890
smaller, smaller, smaller.
更小，更小，更小。

1494
01:08:03,890 --> 01:08:06,570
Eventually, there's going to be no problem left to solve.
最终，将没有问题需要解决。

1495
01:08:06,570 --> 01:08:09,110
So even if you don't think of yourself as a computer person,
所以即使你不认为自己是一个电脑人，

1496
01:08:09,110 --> 01:08:12,140
even if you've never written code, what you'll find in the coming days
即使你从未写过代码，在未来的日子里你会发现

1497
01:08:12,140 --> 01:08:15,920
is that these ideas that we've just kind of harnessed from real life
我们从现实生活中得到的这些想法

1498
01:08:15,920 --> 01:08:18,080
are at your fingertips already.
已经触手可及。

1499
01:08:18,080 --> 01:08:20,090
And a lot of the process of learning to code
很多学习代码的过程

1500
01:08:20,090 --> 01:08:22,819
is just going to be some bumps in the road
只是路上会有一些颠簸

1501
01:08:22,819 --> 01:08:25,880
because you can't quite see the new syntax in a familiar way.
因为你不能以熟悉的方式看到新的语法。

1502
01:08:25,880 --> 01:08:28,005
But you'll find that the ideas, in fact, are
但是你会发现这些想法，事实上，是

1503
01:08:28,005 --> 01:08:30,380
going to be more familiar than you might otherwise think.
会比你想象的更熟悉。

1504
01:08:30,380 --> 01:08:32,540
And so we'll see in a bit-- and we'll take a break
所以我们稍后会看到 -- 我们会休息一下

1505
01:08:32,540 --> 01:08:35,000
in a moment to take a breather-- that you
在片刻休息一下-你

1506
01:08:35,000 --> 01:08:38,240
will see these same ideas in a moment in the context of Scratch,
会在Scratch的背景下看到这些相同的想法，

1507
01:08:38,240 --> 01:08:40,850
an actual programming language via which we'll drag and drop
一种实际的编程语言，我们将通过它拖放

1508
01:08:40,850 --> 01:08:42,743
puzzle pieces to make actual code work.
使实际代码工作的拼图。

1509
01:08:42,743 --> 01:08:44,660
We'll see some variants of these ideas, things
我们会看到这些想法的一些变体，事情

1510
01:08:44,660 --> 01:08:47,040
called "arguments" and "return values" and "variables."
称为 “参数” 和 “返回值” 和 “变量”。

1511
01:08:47,040 --> 01:08:50,660
But we'll ultimately convert it into this somehow.
但我们最终会把它变成这样。

1512
01:08:50,660 --> 01:08:53,689
Anyone want to wager what this program will
任何人都想打赌这个程序会

1513
01:08:53,689 --> 01:08:56,810
do if fed to your Mac or PC or phone?
如果喂到你的 Mac 或 PC 或手机，该怎么办？

1514
01:08:56,810 --> 01:08:59,976
Here's just a massive pattern of zeros and ones.
这里只是一个巨大的零和一的模式。

1515
01:08:59,976 --> 01:09:01,200
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1516
01:09:01,200 --> 01:09:04,158
DAVID J. MALAN: It will indeed say, rather disappointingly, apparently,
DAVID J. MALAN：它确实会说，显然相当令人失望，

1517
01:09:04,158 --> 01:09:05,370
just, "Hello, world."
只是，“你好，世界。

1518
01:09:05,370 --> 01:09:11,250
And indeed, baked into all of these 0's and 1's are not just the H-E-L-L-O,
事实上，融入所有这些0和1的不仅仅是h-e-l-l-o，

1519
01:09:11,250 --> 01:09:15,750
but also the verbs, the action of printing something to the screen.
还有动词，将某些东西打印到屏幕上的动作。

1520
01:09:15,750 --> 01:09:18,555
And there's other stuff too so that the program knows how to start
还有其他的东西，所以程序知道如何开始

1521
01:09:18,555 --> 01:09:20,430
and how to stop, a lot of stuff that we won't
以及如何停止，很多我们不会的东西

1522
01:09:20,430 --> 01:09:23,370
have to worry about, that whoever designed the computer or the language
必须担心，无论是谁设计了计算机或语言

1523
01:09:23,370 --> 01:09:23,870
did.
做到了。

1524
01:09:23,870 --> 01:09:25,830
But at the end of the day, you're never going
但在一天结束的时候，你永远不会去

1525
01:09:25,830 --> 01:09:28,050
to be writing the 0's and 1's yourselves,
自己写0和1，

1526
01:09:28,050 --> 01:09:31,319
though our ancestors, once upon a time, did in some form.
虽然我们的祖先曾经以某种形式做过。

1527
01:09:31,319 --> 01:09:35,189
We'll be using a much higher-level language, like this in C,
我们将使用更高级的语言，就像C，

1528
01:09:35,189 --> 01:09:39,189
or better yet, in just a moment, like in Scratch, like this.
或者更好的是，在一瞬间，就像在Scratch，像这样。

1529
01:09:39,189 --> 01:09:42,600
And indeed, this is why today we focus on and begin
事实上，这就是为什么今天我们关注和开始

1530
01:09:42,600 --> 01:09:45,160
with Scratch, this graphical programming language,
使用Scratch，这种图形编程语言，

1531
01:09:45,160 --> 01:09:49,140
so we have a way of expressing ourselves with functions, conditionals, loops,
所以我们可以用函数，条件，循环来表达自己，

1532
01:09:49,140 --> 01:09:52,852
and more, but in a way that doesn't have stupid parentheses and curly braces
更多，但没有愚蠢的括号和大括号

1533
01:09:52,852 --> 01:09:54,810
and all of these visual distractions in the way
所有这些视觉上的干扰

1534
01:09:54,810 --> 01:09:57,720
and will translate that thereafter to this lower-level language.
然后将其翻译成这种低级语言。

1535
01:09:57,720 --> 01:09:59,027
But for now, that was a lot.
但就目前而言，这是很多。

1536
01:09:59,027 --> 01:10:00,360
That was definitely a fire hose.
那绝对是消防水带。

1537
01:10:00,360 --> 01:10:01,990
Let's go ahead and take a 10-minute break.
我们休息10分钟吧。

1538
01:10:01,990 --> 01:10:03,365
Feel free to get up or stay here.
随意起床或留在这里。

1539
01:10:03,365 --> 01:10:06,755
And we'll resume in a bit with some actual code.
稍后我们将继续进行一些实际的代码。

1540
01:10:06,755 --> 01:10:07,422
[VIDEO PLAYBACK]
[视频播放]

1541
01:10:07,422 --> 01:10:11,374
[MUSIC - THE WEATHER GIRLS, "IT'S  RAINING MEN"] [MUSIC PLAYING]
[音乐-天气女孩，“这是男人下雨”][音乐播放]

1542
01:10:11,374 --> 01:10:13,844
[THUNDER RUMBLING]
[雷声隆隆]

1543
01:10:13,844 --> 01:10:35,505


1544
01:10:35,505 --> 01:10:36,130
- (SINGING) Hi.
- （唱）嗨。

1545
01:10:36,130 --> 01:10:37,000
Hi.
你好。

1546
01:10:37,000 --> 01:10:41,491
We're your Weather Girls, and have we got news for you.
我们是你们的天气预报员，我们有消息要告诉你们。

1547
01:10:41,491 --> 01:10:42,485
You better listen.
你最好听着。

1548
01:10:42,485 --> 01:10:45,540
Get ready, all you lonely girls.
准备好了，你们这些孤独的女孩。

1549
01:10:45,540 --> 01:10:47,940
And leave those umbrellas at home.
把那些雨伞留在家里。

1550
01:10:47,940 --> 01:10:49,217
All right.
好吧。

1551
01:10:49,217 --> 01:10:51,140
Humidity is rising.
湿度正在上升。

1552
01:10:51,140 --> 01:10:52,912
Hmm, rising.
嗯，上升。

1553
01:10:52,912 --> 01:10:54,460
Barometer's getting low.
晴雨表越来越低。

1554
01:10:54,460 --> 01:10:56,034
How low, girl?
姑娘，多低？

1555
01:10:56,034 --> 01:10:58,280
According to all sources--
根据所有消息来源——

1556
01:10:58,280 --> 01:11:01,600
what sources, now-- the street's the place to go.
什么来源，现在-街道是去的地方。

1557
01:11:01,600 --> 01:11:02,880
We better hurry up.
我们最好快点。

1558
01:11:02,880 --> 01:11:09,147
'Cause tonight, for the first
“因为今晚，第一次

1559
01:11:09,147 --> 01:11:13,736
half-past 10:00-- for the first time in history,
10：00过半——历史上第一次，

1560
01:11:13,736 --> 01:11:18,100
it's going to start raining men-- start raining men!
开始下雨，开始下雨！

1561
01:11:18,100 --> 01:11:21,650
It's raining men, hallelujah!
下雨了，哈利路亚！

1562
01:11:21,650 --> 01:11:25,780
It's raining men, amen!
下雨了，阿门！

1563
01:11:25,780 --> 01:11:27,505
I'm going to go out.
我要出去。

1564
01:11:27,505 --> 01:11:33,920
I'm going to let myself get absolutely soaking wet!
我要让自己完全湿透了！

1565
01:11:33,920 --> 01:11:37,045
It's raining men, hallelujah!
下雨了，哈利路亚！

1566
01:11:37,045 --> 01:11:38,795
DAVID J. MALAN: [CHUCKLES] All right, so--
DAVID J. MALAN：（轻笑）好吧，所以——

1567
01:11:38,795 --> 01:11:39,378
[END PLAYBACK]
[结束播放]

1568
01:11:39,378 --> 01:11:41,400
[APPLAUSE]
[掌声]

1569
01:11:41,400 --> 01:11:43,720


1570
01:11:43,720 --> 01:11:47,560
So this then is Scratch, a graphical programming language from our friends
这就是Scratch，我们朋友的图形编程语言

1571
01:11:47,560 --> 01:11:49,897
down the road at MIT's Media Lab that indeed some of you
在麻省理工学院的媒体实验室，你们中的一些人

1572
01:11:49,897 --> 01:11:51,730
might have used in grade school or the like,
可能用在小学或类似的地方,

1573
01:11:51,730 --> 01:11:53,800
for playing and writing code and the like,
用于玩和编写代码之类的,

1574
01:11:53,800 --> 01:11:57,820
but you maybe didn't necessarily think about how some of these primitives
但是你可能没有考虑到这些原始人

1575
01:11:57,820 --> 01:11:58,630
ultimately worked.
最终奏效了。

1576
01:11:58,630 --> 01:12:01,600
And in fact, everything you've done-- if you've used Scratch before--
事实上，你所做的一切如果你以前用过刮擦

1577
01:12:01,600 --> 01:12:05,245
and everything you'll see today is going to apply to all of the weeks to come,
你们今天看到的一切都将适用于接下来的几周,

1578
01:12:05,245 --> 01:12:07,120
as we explore these things called "functions"
当我们探索这些叫做“函数”的东西时

1579
01:12:07,120 --> 01:12:09,820
and "loops" and "conditionals," "Boolean expressions" and more.
以及“循环”、“条件句”、“布尔表达式”等等。

1580
01:12:09,820 --> 01:12:12,940
With Scratch, because it's so graphical and animated-congruent,
使用 Scratch，因为它是如此的图形化和动画一致,

1581
01:12:12,940 --> 01:12:17,080
can you create animations, like this one, interactive art, and software
你能创造动画，像这个，互动艺术，和软件

1582
01:12:17,080 --> 01:12:17,860
more generally.
更一般地说。

1583
01:12:17,860 --> 01:12:20,170
But you'll do so by dragging and dropping
但是你可以通过拖拽和下降来达到这个目的

1584
01:12:20,170 --> 01:12:23,990
puzzle pieces that only lock together if it makes logical sense to do so.
只有在合乎逻辑的情况下才会拼在一起的拼图块。

1585
01:12:23,990 --> 01:12:26,770
And you won't have to deal with, in this first week of class,
你们不用在第一周的课上面对,

1586
01:12:26,770 --> 01:12:30,400
is curly braces, parentheses, all of the weird symbology
是花括号，括号，所有这些奇怪的符号

1587
01:12:30,400 --> 01:12:33,460
that you might recall seeing, when we just wanted to say, "Hello, world."
你可能还记得，当我们只是想说“你好，世界”的时候

1588
01:12:33,460 --> 01:12:35,980
Now, this particular program, "Raining Men,"
现在，这个特别的节目“雨人”

1589
01:12:35,980 --> 01:12:39,340
was written by a former CS50 teaching fellow, Andrew Berry,
作者是 CS50前教师 Andrew Berry,

1590
01:12:39,340 --> 01:12:41,860
who's actually now the general manager of the Cleveland
他现在是克利夫兰的总经理

1591
01:12:41,860 --> 01:12:43,730
Browns, the American football team.
布朗斯，美式橄榄球队。

1592
01:12:43,730 --> 01:12:45,820
And so these are just some of the programs
这些只是其中的一些程序

1593
01:12:45,820 --> 01:12:48,400
that some of your predecessors in the class have created.
你们班上的一些前辈创造的。

1594
01:12:48,400 --> 01:12:51,670
And you'll see, in the remainder of class here, a couple of others
你们会看到，在剩下的课程中，还有其他一些

1595
01:12:51,670 --> 01:12:56,170
as well, and more in the course's first assignment, namely, problem set zero.
同样，在本课程的第一个作业中，也就是问题集0中也有更多的内容。

1596
01:12:56,170 --> 01:12:57,470
So how do we get there?
那么我们如何到达那里呢？

1597
01:12:57,470 --> 01:13:00,040
Well, first a quick tour of what it is we're going to do.
好吧，首先我们简单介绍一下接下来要做的事情。

1598
01:13:00,040 --> 01:13:03,523
This, in Scratch, is perhaps the simplest program you can write.
在 Scratch 中，这可能是你能编写的最简单的程序。

1599
01:13:03,523 --> 01:13:06,565
And even if you've never seen Scratch or any programming language before,
即使你以前从未见过 Scratch 或任何编程语言,

1600
01:13:06,565 --> 01:13:09,970
you can probably guess that this just says, on the screen somehow,
你大概能猜到，屏幕上显示的是,

1601
01:13:09,970 --> 01:13:10,940
"Hello, World."
“你好，世界。”

1602
01:13:10,940 --> 01:13:14,470
But what you don't have to do is type esoteric commands and weird syntax,
但是你不需要输入深奥的命令和奇怪的语法,

1603
01:13:14,470 --> 01:13:16,720
those curly braces and parentheses I keep alluding to.
我一直暗示的那些花括号和括号。

1604
01:13:16,720 --> 01:13:18,970
You just drag this yellow puzzle piece.
你只需拖动这个黄色拼图。

1605
01:13:18,970 --> 01:13:20,530
You drag this purple puzzle piece.
你拖动这个紫色的拼图。

1606
01:13:20,530 --> 01:13:22,810
Let them magnetically lock together, so to speak.
可以说，让它们磁性地锁在一起。

1607
01:13:22,810 --> 01:13:24,430
Click a button and boom.
单击按钮并动臂。

1608
01:13:24,430 --> 01:13:27,010
With those same building blocks and several others,
有了这些积木和其他一些东西,

1609
01:13:27,010 --> 01:13:31,010
can you make exactly the sorts of things that Andrew brought to life as well.
你能做出安德鲁创造出来的东西吗。

1610
01:13:31,010 --> 01:13:32,740
So here's what we're about to see.
这就是我们将要看到的。

1611
01:13:32,740 --> 01:13:38,500
At Scratch.MIT.edu is a cloud-based programming environment on MIT servers.
Edu 是 MIT 服务器上的一个基于云的编程环境。

1612
01:13:38,500 --> 01:13:41,380
You can also download it offline on your own Mac or PC.
你也可以在自己的 Mac 或 PC 上离线下载。

1613
01:13:41,380 --> 01:13:43,870
And it gives you an interface like this.
它为你提供了这样的界面。

1614
01:13:43,870 --> 01:13:47,770
On the left-hand side of the screen, you'll see a blocks palette.
在屏幕的左侧，你将看到一个方块调色板。

1615
01:13:47,770 --> 01:13:51,100
These puzzle pieces, a.k.a. blocks, come in different colors
这些拼图块，也叫积木，有不同的颜色

1616
01:13:51,100 --> 01:13:52,540
which rather categorize them.
而是对它们进行分类。

1617
01:13:52,540 --> 01:13:54,730
So pictured here, for instance, in blue, are
比如这张蓝色的照片

1618
01:13:54,730 --> 01:13:57,040
a whole bunch of motion-related blocks.
一大堆与运动相关的块。

1619
01:13:57,040 --> 01:14:00,100
So Andrew used a whole bunch of those to have the singer and the men
所以安德鲁用了一大堆这样的东西让歌手和男人们

1620
01:14:00,100 --> 01:14:02,950
moving around on the screen in synchronicity
在屏幕上同步移动

1621
01:14:02,950 --> 01:14:05,110
with the song that was playing in the background.
背景音乐。

1622
01:14:05,110 --> 01:14:09,310
Meanwhile, in the middle of this interface is going to be the code area.
同时，在这个接口的中间是代码区。

1623
01:14:09,310 --> 01:14:12,100
And this is where Andrew, and soon you, will drag and drop
这就是安德鲁，很快还有你，将要下坠的地方

1624
01:14:12,100 --> 01:14:14,450
some of those puzzle pieces and other colors as well
还有一些拼图和其他颜色

1625
01:14:14,450 --> 01:14:17,560
and lock them together to get your character-- soon
然后把它们锁在一起，很快就能得到你的角色了

1626
01:14:17,560 --> 01:14:20,110
to be invented-- to do something on the screen.
被发明出来，在屏幕上做点什么。

1627
01:14:20,110 --> 01:14:23,380
Indeed, at the bottom right here, will you see, ultimately,
事实上，在这里的底部，你会看到，最终,

1628
01:14:23,380 --> 01:14:26,260
a sprite area, where a sprite is a technical term
精灵区，精灵是一个专业术语

1629
01:14:26,260 --> 01:14:29,650
for like a character in a video game or a programming environment like this.
比如电子游戏中的角色，或者像这样的编程环境。

1630
01:14:29,650 --> 01:14:34,645
By default, historically, Scratch is the cat, the mascot, if you will,
默认情况下，从历史上看，抓挠先生是猫，吉祥物，如果你愿意的话,

1631
01:14:34,645 --> 01:14:36,020
for this programming environment.
对于此编程环境。

1632
01:14:36,020 --> 01:14:38,110
And so here we see, by default, just one sprite
这里我们看到，默认情况下，只有一个精灵

1633
01:14:38,110 --> 01:14:42,490
selected because on the top right of the screen is the stage for that sprite.
选择是因为屏幕右上角是精灵的舞台。

1634
01:14:42,490 --> 01:14:45,310
And you can click and zoom in to make it full screen.
你可以点击并放大，使它成为全屏。

1635
01:14:45,310 --> 01:14:47,350
But this is the world in which Scratch--
但这就是Scratch的世界——

1636
01:14:47,350 --> 01:14:49,120
by default, the cat-- will live.
默认情况下，猫 - 将活着。

1637
01:14:49,120 --> 01:14:52,960
But you can change Scratch's costume so that it looks like a singer or the man
但是你可以改变刮擦的服装，让它看起来像一个歌手或男人

1638
01:14:52,960 --> 01:14:55,185
falling from the sky or the like or anything else,
从天而降之类的,

1639
01:14:55,185 --> 01:14:58,060
either creating the art yourself or importing some of the things that
要么自己创作，要么引进一些

1640
01:14:58,060 --> 01:15:00,260
come with it or elsewhere online.
随身携带或在线其他地方。

1641
01:15:00,260 --> 01:15:03,640
So what is this world that Scratch rather lives in?
那么刮擦生活在什么样的世界里呢？

1642
01:15:03,640 --> 01:15:06,610
Well, generally speaking, we won't have to care too much about numbers
一般来说，我们不需要太在意数字

1643
01:15:06,610 --> 01:15:09,820
because we'll be able to ask questions, like interactive ones,
因为我们可以问问题，比如互动问题,

1644
01:15:09,820 --> 01:15:12,040
like is Scratch the cat, or any character
就像是抓猫，或者任何角色

1645
01:15:12,040 --> 01:15:15,520
otherwise, touching the edge of the screen, touching something else?
否则，触摸屏幕边缘，触摸其他东西？

1646
01:15:15,520 --> 01:15:20,560
But Scratch does exist in this two-dimensional coordinate-system
但刮擦确实存在于这个二维坐标系中

1647
01:15:20,560 --> 01:15:21,080
world.
世界。

1648
01:15:21,080 --> 01:15:24,010
So when the cat or any character is dead center in the middle,
所以当猫或者任何角色在中间的时候,

1649
01:15:24,010 --> 01:15:27,700
that would be xy location 0,0, if you will.
那就是 xy 位置0,0，如果你愿意的话。

1650
01:15:27,700 --> 01:15:32,990
Meanwhile, over here is 240 pixels, or dots, all the way to the right.
同时，这里是240像素，或点，一直到右边。

1651
01:15:32,990 --> 01:15:37,700
So this would be 240,0, where y is 0 because it's right on that midline.
所以这是240，这里 y 是0因为它就在中线上。

1652
01:15:37,700 --> 01:15:39,460
So it's neither up or below.
所以它既不是向上也不是低于。

1653
01:15:39,460 --> 01:15:43,330
Over here to the left, of course, would be -240 and 0.
这里左边，当然是 -240和0。

1654
01:15:43,330 --> 01:15:45,910
Above the cat would be x equals 0, because it's
在猫的上方是 x 等于0，因为它是

1655
01:15:45,910 --> 01:15:48,880
right on that vertical midline, and 180.
就在那个垂直的中线上，和180。

1656
01:15:48,880 --> 01:15:52,152
And then down here, as you might guess, would be 0, negative 180.
然后这里，你可能猜到了，是0，负180。

1657
01:15:52,152 --> 01:15:53,860
Generally speaking, we don't have to care
一般来说，我们不需要在乎

1658
01:15:53,860 --> 01:15:55,733
about those precise pixel coordinates.
关于那些精确的像素坐标。

1659
01:15:55,733 --> 01:15:58,900
But it's helpful, ultimately, if you do want the cat to move up, down, left,
但这是有帮助的，最终，如果你想让猫向上，向下，向左移动,

1660
01:15:58,900 --> 01:15:59,400
or right.
或对。

1661
01:15:59,400 --> 01:16:03,130
Having some sense of direction according to the x-axis and y-axis
根据 x 轴和 y 轴有方向感的

1662
01:16:03,130 --> 01:16:06,010
as well can help you express your ideas, ultimately.
也可以帮助你表达你的想法，最终。

1663
01:16:06,010 --> 01:16:08,680
So what might some of those ideas be?
那么其中一些想法可能是什么？

1664
01:16:08,680 --> 01:16:09,950
Well, let's do this.
好吧，让我们这样做。

1665
01:16:09,950 --> 01:16:15,340
I'm going to go ahead and create, on Scratch.MIT.edu, just
我将继续创建，在 Scratch.MIT. edu 上

1666
01:16:15,340 --> 01:16:18,293
an empty screen like this one here.
像这样的空屏幕在这里。

1667
01:16:18,293 --> 01:16:19,960
And so this is the exact same interface.
所以这是完全相同的界面。

1668
01:16:19,960 --> 01:16:24,490
But now I'm in my browser, full screen, so that I can start writing some code.
但现在我在浏览器里，全屏，这样我就可以开始写代码了。

1669
01:16:24,490 --> 01:16:27,222
And let's get that cat to say something actually on the screen.
让那只猫在屏幕上说点什么。

1670
01:16:27,222 --> 01:16:28,930
Now, this takes a little bit of practice.
这需要一点练习。

1671
01:16:28,930 --> 01:16:32,200
But honestly, just by scrolling through these puzzle pieces can
但老实说，只要翻阅这些拼图就可以

1672
01:16:32,200 --> 01:16:35,830
you quickly get a sense of what's possible, not just categorically,
你很快就会知道什么是可能的，不仅仅是绝对的,

1673
01:16:35,830 --> 01:16:36,538
but specifically.
但具体来说。

1674
01:16:36,538 --> 01:16:39,163
And I'll jump around because I've done this, of course, before.
我会跳来跳去，因为我以前也这么做过。

1675
01:16:39,163 --> 01:16:41,410
But I'm going to go to events, in yellow, first.
但我要先穿黄色去参加活动。

1676
01:16:41,410 --> 01:16:44,080
And I'm going to drag and drop this first block, called
我将拖放第一个块，命名为

1677
01:16:44,080 --> 01:16:45,475
when Green Flag clicked.
当绿旗点击时。

1678
01:16:45,475 --> 01:16:48,100
And I've zoomed in there just to make it a little more legible.
我把它放大了，让它更清晰一点。

1679
01:16:48,100 --> 01:16:50,380
And notice that the shape of this Green Flag
注意这个绿旗的形状

1680
01:16:50,380 --> 01:16:54,070
just so happens to mirror this Green Flag here
正好反映了这个绿旗

1681
01:16:54,070 --> 01:16:57,070
at top, next to this red Stop Sign, of sorts.
最上面，红色的停车标志旁边。

1682
01:16:57,070 --> 01:16:59,800
And the Green Flag is going to mean go and the red Stop Sign
绿旗代表开车，红色的停车标志

1683
01:16:59,800 --> 01:17:02,320
is going to mean stop, to start or stop our program.
将意味着停止，启动或停止我们的计划。

1684
01:17:02,320 --> 01:17:05,320
Next week, you're going to be writing a textual command at your keyboard
下周，你将在键盘上编写一个文本命令

1685
01:17:05,320 --> 01:17:06,560
to do the exact same idea.
做完全相同的想法。

1686
01:17:06,560 --> 01:17:07,790
But for now, it's a button.
但就目前而言，它是一个按钮。

1687
01:17:07,790 --> 01:17:10,667
So when Green Flag clicked, what do I want Scratch to do?
那么当绿旗点击时，我想让 Scratch 做什么呢？

1688
01:17:10,667 --> 01:17:13,750
Well, how about we have Scratch just initially say something like, "Hello,
不如让刮擦先说“你好”

1689
01:17:13,750 --> 01:17:16,960
world," which indeed, historically, is the first program
的确，从历史上看，这是第一个

1690
01:17:16,960 --> 01:17:18,790
that most any programmer might write.
大多数程序员都可能写。

1691
01:17:18,790 --> 01:17:22,090
So anything related to what the cat looks like it's doing
所以任何与猫的行为相关的东西

1692
01:17:22,090 --> 01:17:24,490
is actually going to be under looks, here in purple.
实际上会穿紫色的衣服。

1693
01:17:24,490 --> 01:17:27,100
So I'm going to drag over Say "hello."
所以我要拖过去说“你好”。

1694
01:17:27,100 --> 01:17:30,820
And you'll notice something curious and different about this purple block.
你会注意到这个紫色块有些奇怪和不同的地方。

1695
01:17:30,820 --> 01:17:33,400
It says, of course, "Say" in purple.
当然，它用紫色写着“说”。

1696
01:17:33,400 --> 01:17:37,450
But then there's this white oval and some text that, by default, is "hello"
但是还有这个白色椭圆和一些默认是“ hello”的文字

1697
01:17:37,450 --> 01:17:40,180
because MIT just decided that, by default, the placeholder will
因为麻省理工刚刚决定，默认情况下，占位符将

1698
01:17:40,180 --> 01:17:40,810
be "hello."
“你好”。

1699
01:17:40,810 --> 01:17:42,940
But anytime you see this white oval, it's
但是当你看到这个白色的椭圆形时

1700
01:17:42,940 --> 01:17:48,790
an opportunity to provide an input into the function called Say.
提供一个输入到名为 Say 的函数中的机会。

1701
01:17:48,790 --> 01:17:50,980
And so here I'm borrowing terminology from before.
这里我借用了之前的术语。

1702
01:17:50,980 --> 01:17:54,280
Problem solving, again, is all about inputs producing outputs.
同样，解决问题的关键在于投入产出。

1703
01:17:54,280 --> 01:17:56,045
And in between there is some algorithm.
中间有一些算法。

1704
01:17:56,045 --> 01:17:58,420
In a moment, we're going to start referring to algorithms
稍后，我们将开始讨论算法

1705
01:17:58,420 --> 01:18:00,470
quite frequently as "functions."
经常作为“函数”。

1706
01:18:00,470 --> 01:18:00,970
Why?
为什么？

1707
01:18:00,970 --> 01:18:03,350
Because it's the implementation of some algorithm.
因为这是某种算法的实现。

1708
01:18:03,350 --> 01:18:06,640
So let me override the default with, "Hello, world."
让我用“ Hello，world”覆盖默认值

1709
01:18:06,640 --> 01:18:07,690
I'll zoom out.
我会缩小。

1710
01:18:07,690 --> 01:18:11,260
And now if I go to the top right of the screen and click the Green Flag,
现在如果我到屏幕右上角点击绿旗,

1711
01:18:11,260 --> 01:18:15,310
we'll see, hopefully, my very first program in code.
希望我们能看到我的第一个代码程序。

1712
01:18:15,310 --> 01:18:17,190
Now, it wasn't a huge lift, right?
现在，这不是一个巨大的提升，对吧？

1713
01:18:17,190 --> 01:18:19,690
It only was a matter of dragging and dropping puzzle pieces.
这只是一个拖放拼图块的问题。

1714
01:18:19,690 --> 01:18:21,070
But what has now happened?
但是现在发生了什么？

1715
01:18:21,070 --> 01:18:23,530
Well, it turns out that two things have happened.
结果发生了两件事。

1716
01:18:23,530 --> 01:18:26,710
When I, the human, clicked on that Green Flag,
当我，那个人类，点击那个绿旗时,

1717
01:18:26,710 --> 01:18:29,570
I triggered, what we're going to start calling now, an "event."
我触发了，我们现在要称之为“事件”

1718
01:18:29,570 --> 01:18:32,800
An event is generally something graphical or interactive that
事件通常是图形化的或交互式的

1719
01:18:32,800 --> 01:18:34,580
just happens in a computer program.
只是发生在计算机程序中。

1720
01:18:34,580 --> 01:18:37,600
You and I trigger events on our phones all day long.
你和我每天都在手机上触发事件。

1721
01:18:37,600 --> 01:18:41,260
Whenever you tap or drag or long press or pinch
无论你什么时候点击，拖拽，长按或捏

1722
01:18:41,260 --> 01:18:44,110
or any of those gestures in vogue nowadays on phones,
或者手机上流行的那些手势,

1723
01:18:44,110 --> 01:18:45,460
you are triggering events.
你正在触发事件。

1724
01:18:45,460 --> 01:18:47,680
And people at Apple and Google and elsewhere
还有苹果，谷歌和其他公司的人

1725
01:18:47,680 --> 01:18:50,320
have written code that listen for those events
编写了监听这些事件的代码

1726
01:18:50,320 --> 01:18:52,880
and do something when that event happens.
然后在事情发生的时候做点什么。

1727
01:18:52,880 --> 01:18:54,010
That's what I just did.
这就是我刚刚所做的。

1728
01:18:54,010 --> 01:18:56,560
When Green Flag is clicked, I want something
当点击绿旗时，我想要一些东西

1729
01:18:56,560 --> 01:19:01,150
to happen, namely, I want this purple function, this verb, this action called
也就是说，我想要这个紫色的函数，这个动词，这个动作叫做

1730
01:19:01,150 --> 01:19:02,910
Say, to do something.
说，做点什么。

1731
01:19:02,910 --> 01:19:03,910
What do I want it to do?
我希望它做什么？

1732
01:19:03,910 --> 01:19:05,590
I want it to say what this input is.
我希望它说出这个输入是什么。

1733
01:19:05,590 --> 01:19:07,900
And I'm going to introduce another vocabulary term.
我将介绍另一个词汇。

1734
01:19:07,900 --> 01:19:11,350
The white ovals here are, yes, inputs, very generically.
这里的白色椭圆，是的，输入，非常一般。

1735
01:19:11,350 --> 01:19:13,660
But in a programmer's terminology, they're
但用程序员的术语来说

1736
01:19:13,660 --> 01:19:16,080
called "arguments," otherwise known as "parameters."
称为“参数”，也称为“参数”

1737
01:19:16,080 --> 01:19:17,830
And that just means an input to a function
这意味着一个函数的输入

1738
01:19:17,830 --> 01:19:20,050
that modifies its behavior in some way.
这以某种方式修改了它的行为。

1739
01:19:20,050 --> 01:19:22,253
When I click Stop, that's just another event.
当我单击 Stop 时，这只是另一个事件。

1740
01:19:22,253 --> 01:19:23,920
And that one is just built into Scratch.
而那个只是内置在Scratch中。

1741
01:19:23,920 --> 01:19:26,740
Scratch knows that when you click the green Stop Sign,
刮擦知道当你点击绿色的停止标志时,

1742
01:19:26,740 --> 01:19:28,490
everything should just stop automatically.
一切都会自动停止。

1743
01:19:28,490 --> 01:19:30,950
I don't have to write code to support that feature.
我不需要编写代码来支持这个特性。

1744
01:19:30,950 --> 01:19:33,470
So that's all fine and good, "Hello, world."
所以这一切都很好，“你好，世界。”

1745
01:19:33,470 --> 01:19:36,880
But if I keep doing stop and start and stop and start,
但如果我一直这样，停停停,

1746
01:19:36,880 --> 01:19:39,130
it's going to do the same thing again and again.
它会一次又一次地做同样的事情。

1747
01:19:39,130 --> 01:19:41,650
And it's really not that interesting, at the end of the day,
其实也没什么意思，说到底,

1748
01:19:41,650 --> 01:19:45,350
maybe gratifying once, but it'd be nice if this were a little more interactive.
也许有一次很让人满意，但如果能多一点互动就更好了。

1749
01:19:45,350 --> 01:19:48,140
So it turns out that we can do that too.
所以事实证明，我们也可以这样做。

1750
01:19:48,140 --> 01:19:50,450
But we need a different mental model instead.
但我们需要一个不同的思维模式。

1751
01:19:50,450 --> 01:19:53,740
So in this case here, when we think about this function,
在这个例子中，当我们考虑这个函数时,

1752
01:19:53,740 --> 01:19:56,230
Say, in this input, "Hello, world," this actually
在这个输入中，“ Hello，world”实际上

1753
01:19:56,230 --> 01:19:58,300
maps pretty cleanly to this model earlier,
与之前的模型非常吻合,

1754
01:19:58,300 --> 01:20:01,870
that I propose is problem solving, is computer science, if you will.
我认为是解决问题，是计算机科学，如果你愿意。

1755
01:20:01,870 --> 01:20:05,770
The input to the current problem is going to be in white here,
当前问题的输入是白色的,

1756
01:20:05,770 --> 01:20:06,760
"Hello, world."
“你好，世界。”

1757
01:20:06,760 --> 01:20:10,300
The algorithm is the "say" algorithm.
该算法是“说”算法。

1758
01:20:10,300 --> 01:20:13,420
Now, I don't know how MIT got it to print out the little, pretty speech
现在，我不知道麻省理工是怎么把这个漂亮的演讲稿打印出来的

1759
01:20:13,420 --> 01:20:14,330
bubble on the screen.
屏幕上冒泡。

1760
01:20:14,330 --> 01:20:17,770
But they wrote those underlying low-level implementation details.
但是他们编写了那些底层的实现细节。

1761
01:20:17,770 --> 01:20:21,130
And they gave me and you a purple function, called Say,
他们给了我和你一个紫色函数，叫做,

1762
01:20:21,130 --> 01:20:22,630
that just does that for you.
那只是为你做这件事。

1763
01:20:22,630 --> 01:20:24,670
You and I don't have to reinvent that wheel.
你和我不必重新发明轮子。

1764
01:20:24,670 --> 01:20:28,580
The output of Say is another technical term, now, called a "side effect."
Say 的输出是另一个技术术语，现在称为“副作用”

1765
01:20:28,580 --> 01:20:31,570
A side effect is usually something visual that happens,
副作用通常是视觉上的,

1766
01:20:31,570 --> 01:20:34,008
like as a side effect of you calling a function.
比如你调用函数的副作用。

1767
01:20:34,008 --> 01:20:35,800
And so the side effect here is that the cat
所以这里的副作用是猫

1768
01:20:35,800 --> 01:20:39,800
has this speech bubble magically appear, inside of which is "Hello, world."
就会神奇地出现这个语音泡泡里面是“你好，世界”

1769
01:20:39,800 --> 01:20:41,200
So we have an input.
所以我们有一个输入。

1770
01:20:41,200 --> 01:20:42,370
We have an output.
我们有一个输出。

1771
01:20:42,370 --> 01:20:43,540
We have an algorithm.
我们有一个算法。

1772
01:20:43,540 --> 01:20:46,910
But now we're talking about these ideas in the context of programming.
但是现在我们在编程的背景下讨论这些想法。

1773
01:20:46,910 --> 01:20:49,420
So now the input is an "argument."
所以现在输入是一个“参数”。

1774
01:20:49,420 --> 01:20:51,400
The algorithm is a "function."
该算法是一个“函数”。

1775
01:20:51,400 --> 01:20:53,840
And the output, in this case, is a "side effect"--
在这种情况下，输出是一个“副作用”——

1776
01:20:53,840 --> 01:20:55,840
terminology that you'll just hear more and more.
你会听到越来越多的术语。

1777
01:20:55,840 --> 01:20:59,200
And it'll eventually sink in, but not to worry if the terminology doesn't
最终会理解的，不过不用担心术语不理解

1778
01:20:59,200 --> 01:21:00,800
come naturally early on.
很早就自然而然地来了。

1779
01:21:00,800 --> 01:21:03,890
So what more might I do with this?
那么我还能用这个做什么呢？

1780
01:21:03,890 --> 01:21:07,077
Let me go back to Scratch here and make this maybe perhaps more interactive
让我们回到 Scratch 这里，让它更具互动性

1781
01:21:07,077 --> 01:21:09,910
and actually get the cat to say something a little more dynamically.
实际上让猫说一些更动态的东西。

1782
01:21:09,910 --> 01:21:11,740
So instead of "Hello, world," why don't we
所以与其说"你好，世界"不如我们

1783
01:21:11,740 --> 01:21:15,050
get him to say hello to me or to you or anyone else?
让他跟我或你或其他人打招呼?

1784
01:21:15,050 --> 01:21:16,010
So let me do this.
所以让我来做这个。

1785
01:21:16,010 --> 01:21:18,970
Let me go under, say--
让我下，说——

1786
01:21:18,970 --> 01:21:20,200
let me get rid of this first.
让我先摆脱这个。

1787
01:21:20,200 --> 01:21:22,090
And you'll notice this neat trick.
你会注意到这个巧妙的技巧。

1788
01:21:22,090 --> 01:21:25,090
As soon as you start dragging on a block, if it gets close to it,
一旦你开始拖拽一个方块，如果它靠近它，

1789
01:21:25,090 --> 01:21:28,480
it kind of goes gray, and it can be magnetically snapped together.
它会变成灰色，并且可以被磁力合在一起。

1790
01:21:28,480 --> 01:21:30,220
You don't have to do it very precisely.
你不必非常精确地执行此操作。

1791
01:21:30,220 --> 01:21:32,345
Conversely, if I want to get rid of a puzzle piece,
相反，如果我想去掉一块拼图，

1792
01:21:32,345 --> 01:21:35,800
I can just drag it anywhere on the left, let go, and that deletes it.
我可以把它拖到左边的任何地方，然后放手，这样就会删除它。

1793
01:21:35,800 --> 01:21:38,500
Or you can Right-click or Control-click and a little menu
或者你可以右键单击或者Control-click，然后出现一个小菜单

1794
01:21:38,500 --> 01:21:39,902
will let you delete it as well.
也会让你删除它。

1795
01:21:39,902 --> 01:21:41,110
Well, let me do this instead.
好吧，让我来做这个。

1796
01:21:41,110 --> 01:21:44,310
Under Sensing, which I know is there because I've done this before,
在感应下，我知道它在那里，因为我以前做过这个，

1797
01:21:44,310 --> 01:21:48,180
are a whole bunch of things related to Sensing, whereby the cat can kind
是不是有很多东西都与感应有关，猫可以通过感应来说话

1798
01:21:48,180 --> 01:21:50,700
of feel out its world, in some sense.
在某种意义上感受它的世界。

1799
01:21:50,700 --> 01:21:54,360
It can do things like ask this question, "Am I touching the mouse pointer?"--
它可以问这样的问题，“我触摸到鼠标指针了吗?”--

1800
01:21:54,360 --> 01:21:55,620
like the user's cursor.
就像用户的光标一样。

1801
01:21:55,620 --> 01:21:59,010
"Am I touching a specific color that you can override to be anything you want?"
“我是否触碰到了一个特定的颜色，你可以改写成任何你想要的颜色?”

1802
01:21:59,010 --> 01:22:02,500
"Is the distance to the mouse pointer some specific value?"
“到鼠标指针的距离是某个特定值吗?”

1803
01:22:02,500 --> 01:22:05,940
But for now, I'm going to focus on this, this blue puzzle piece that
但现在，我要关注的是这个，这个蓝色的拼图

1804
01:22:05,940 --> 01:22:09,570
asks a question, which itself is this white oval that I can apparently
问了一个问题，它本身就是这个白色的椭圆形，我可以

1805
01:22:09,570 --> 01:22:12,030
change, and then it's going to wait for a response.
改变，然后等待响应。

1806
01:22:12,030 --> 01:22:14,443
But this puzzle piece is a little different.
但这个拼图有点不同。

1807
01:22:14,443 --> 01:22:15,360
It's a little special.
这有点特别。

1808
01:22:15,360 --> 01:22:16,590
It comes with a freebie.
它带有免费赠品。

1809
01:22:16,590 --> 01:22:19,690
It comes with what we're going to call, technically, a "return value."
从技术上讲，它带有一个“返回值”

1810
01:22:19,690 --> 01:22:22,590
So some functions don't just do something on the screen.
有些函数不只是在屏幕上做一些事情。

1811
01:22:22,590 --> 01:22:25,620
They hand you back, so to speak, a value that you
可以这么说，他们还给了你一个价值

1812
01:22:25,620 --> 01:22:27,570
can do anything that you want with.
可以做任何你想做的事情。

1813
01:22:27,570 --> 01:22:29,820
Nothing happens immediately unless you do something
没有什么事情会立即发生，除非你做些什么

1814
01:22:29,820 --> 01:22:31,750
with that so-called return value.
具有所谓的返回值。

1815
01:22:31,750 --> 01:22:35,633
So let me go ahead and drag this thing over here, ask, "What's your name?"
我把这个拖到这里，问"你叫什么名字?"

1816
01:22:35,633 --> 01:22:37,050
And I'll use the default question.
我将使用默认问题。

1817
01:22:37,050 --> 01:22:38,675
That seems a reasonable place to start.
这似乎是一个合理的起点。

1818
01:22:38,675 --> 01:22:41,970
I'm not going to override that default. And now let me go ahead and zoom out.
我不会重写这个默认值。现在我把它缩小。

1819
01:22:41,970 --> 01:22:43,890
Let me go back to Looks.
让我回到外观。

1820
01:22:43,890 --> 01:22:46,320
Let me go to Say.
让我去说。

1821
01:22:46,320 --> 01:22:48,850
And let me just form the English sentence I want.
让我来组成我想要的英语句子。

1822
01:22:48,850 --> 01:22:53,730
So let me zoom in here and type in "hello," maybe comma, space.
让我放大这里，输入"hello "也许是逗号，空格。

1823
01:22:53,730 --> 01:22:56,580
I could do "David," but that's obviously not right
我可以叫大卫，但那显然不对

1824
01:22:56,580 --> 01:22:58,830
because I'm asking for a name, and then I'm like,
因为我想要一个名字，然后我说，

1825
01:22:58,830 --> 01:23:00,270
in advance, hard-coding my name.
事先，硬编码我的名字。

1826
01:23:00,270 --> 01:23:01,228
That's not what I want.
那不是我想要的。

1827
01:23:01,228 --> 01:23:02,610
I just want, "hello," comma.
我只想要，“你好，”逗号。

1828
01:23:02,610 --> 01:23:06,180
And now let me zoom out and grab one more Say block.
现在我把它缩小，再抓取一个block。

1829
01:23:06,180 --> 01:23:07,500
Let me maybe Say here.
让我在这里说。

1830
01:23:07,500 --> 01:23:09,180
OK, I don't want to say, "Hello, hello."
好吧，我不想说，“你好，你好。

1831
01:23:09,180 --> 01:23:11,722
I don't want to just type in my own name because, again, then
我不想只输入自己的名字，因为

1832
01:23:11,722 --> 01:23:14,230
what's the point of asking the user for their name?
问用户名字有什么意义?

1833
01:23:14,230 --> 01:23:15,300
But notice this.
但请注意这一点。

1834
01:23:15,300 --> 01:23:19,950
If I go back to the sensing block, this is where that oval that's blue,
如果我回到感应块，这就是那个蓝色的椭圆形，

1835
01:23:19,950 --> 01:23:22,080
called Answer, is useful.
叫答案，是有用的。

1836
01:23:22,080 --> 01:23:25,280
This will be the so-called "return value" of that function.
这将是该函数的所谓“返回值”。

1837
01:23:25,280 --> 01:23:27,780
So I'm just going to go ahead and do this and drag and drop.
我要做这个，拖放。

1838
01:23:27,780 --> 01:23:30,600
Even though it's not the right size, it is the right shape.
虽然它的大小不对，但它的形状是对的。

1839
01:23:30,600 --> 01:23:32,670
And so Scratch will be smart about it and grow
所以Scratch会很聪明，并且会成长

1840
01:23:32,670 --> 01:23:34,620
to fill that puzzle piece for you.
为你填补这块拼图。

1841
01:23:34,620 --> 01:23:35,820
Let me zoom out now.
现在让我缩小。

1842
01:23:35,820 --> 01:23:37,607
And now let me click the Green Flag.
现在让我点击绿旗。

1843
01:23:37,607 --> 01:23:40,440
You'll see that Scratch is indeed prompting me with a speech bubble,
你会看到Scratch确实在用一个语音泡泡提示我，

1844
01:23:40,440 --> 01:23:41,232
"What's your name?"
“你叫什么名字？”

1845
01:23:41,232 --> 01:23:44,320
Notice the little text box below the cat is asking, what's your name?
注意猫下面的小文本框在问，你叫什么名字?

1846
01:23:44,320 --> 01:23:46,590
So I'm going to type in D-A-V-I-D and hit Enter.
所以我要输入D-A-V-I-D然后回车。

1847
01:23:46,590 --> 01:23:48,120
Or I can click the blue check.
或者我可以点击蓝色复选标记。

1848
01:23:48,120 --> 01:23:50,310
Enter.
进入。

1849
01:23:50,310 --> 01:23:51,802
OK, it's a little weird.
好吧，这有点奇怪。

1850
01:23:51,802 --> 01:23:53,760
I wanted him to say, "hello," not just my name.
我想让他打招呼，而不仅仅是叫我的名字。

1851
01:23:53,760 --> 01:23:55,020
So let me Stop.
所以让我停下来。

1852
01:23:55,020 --> 01:23:56,190
Let me start it again.
让我重新开始。

1853
01:23:56,190 --> 01:23:57,648
All right, hello, what's your name?
好吧，你好，你叫什么名字？

1854
01:23:57,648 --> 01:24:00,230
D-A-V-I-D. Enter.
D-A-V-I-D.进入。

1855
01:24:00,230 --> 01:24:02,490
Huh-- kind of rude.
呵呵——有点粗鲁。

1856
01:24:02,490 --> 01:24:04,890
Why is there this bug?
为什么会有这个错误？

1857
01:24:04,890 --> 01:24:07,920
Like, I wanted to say, "Hello, David," not just "David."
我想说"你好，大卫"而不仅仅是"大卫"

1858
01:24:07,920 --> 01:24:11,550
And yet twice it has failed to do so.
然而，它两次未能做到这一点。

1859
01:24:11,550 --> 01:24:12,560
Yeah--
是的--

1860
01:24:12,560 --> 01:24:13,577
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1861
01:24:13,577 --> 01:24:16,160
DAVID J. MALAN: Yeah, the computer's processing my directions,
DAVID J. MALAN：是的，计算机正在处理我的方向，

1862
01:24:16,160 --> 01:24:17,658
my actions, really quickly.
我的行动，真的很快。

1863
01:24:17,658 --> 01:24:18,950
And so it actually is doing it.
所以它实际上正在这样做。

1864
01:24:18,950 --> 01:24:20,510
It's just, you and I, in the room, are just way
只是，你和我，在这个房间里，只是

1865
01:24:20,510 --> 01:24:23,220
too slow to notice that it said-- (QUICKLY) "Hello, David."
太慢了，没有注意到上面写着——(迅速地)“你好,大卫。”

1866
01:24:23,220 --> 01:24:25,470
It just seems to have just said, "David."
上面好像只写了"大卫"

1867
01:24:25,470 --> 01:24:26,910
So all right, how can I fix this?
那么好吧，我该如何解决这个问题？

1868
01:24:26,910 --> 01:24:28,640
Well, here's where you start to poke around and think
好吧，这就是你开始摸索和思考的地方

1869
01:24:28,640 --> 01:24:29,940
about how you might solve this.
关于如何解决这个问题。

1870
01:24:29,940 --> 01:24:31,100
Let me go back under Looks.
让我回到外观下。

1871
01:24:31,100 --> 01:24:33,330
Maybe there's a smarter way to do this.
也许有一种更聪明的方法可以做到这一点。

1872
01:24:33,330 --> 01:24:34,520
Maybe I could do--
也许我能做到——

1873
01:24:34,520 --> 01:24:35,540
OK, I could do this.
好的，我可以这样做。

1874
01:24:35,540 --> 01:24:37,490
How about instead of just Say "hello," there's
别只说"你好"了怎么样

1875
01:24:37,490 --> 01:24:41,060
apparently another puzzle piece where I can time it so I can maybe slow things
显然是另一个我可以计时的拼图，这样我就可以放慢速度

1876
01:24:41,060 --> 01:24:42,150
down a little bit.
往下一点。

1877
01:24:42,150 --> 01:24:43,110
So let me do this.
所以让我来做这个。

1878
01:24:43,110 --> 01:24:45,810
Let me throw away all of this.
让我抛弃这一切。

1879
01:24:45,810 --> 01:24:49,140
Let me drag a Say "hello" for 2 seconds.
让我拖一个说“你好”2秒钟。

1880
01:24:49,140 --> 01:24:51,870
Let me drag another Say "hello" for 2 seconds.
让我再拖一个，说“你好”2秒钟。

1881
01:24:51,870 --> 01:24:54,500
Let me change the first one to, indeed, "hello" comma.
我把第一个改成，"hello"逗号。

1882
01:24:54,500 --> 01:24:57,530
And then let me go back to Sensing.
然后让我回到感应。

1883
01:24:57,530 --> 01:25:00,460
Let me grab that same answer because I threw it away a second ago,
让我抓住同样的答案，因为我刚把它扔掉了，

1884
01:25:00,460 --> 01:25:01,460
and I'll just change it.
我会改变它。

1885
01:25:01,460 --> 01:25:02,960
I don't even have to delete "hello."
我什至不必删除“你好”。

1886
01:25:02,960 --> 01:25:04,740
I can just overwrite it like this.
我可以这样覆盖它。

1887
01:25:04,740 --> 01:25:08,360
So now I think we'll kind of pump the brakes and see things more slowly.
所以现在我想我们应该停下脚步，慢慢地看问题。

1888
01:25:08,360 --> 01:25:09,620
Let me Stop.
让我停下来。

1889
01:25:09,620 --> 01:25:10,550
Let me start.
让我开始吧。

1890
01:25:10,550 --> 01:25:12,050
D-A-V-I-D, Enter.
D-A-V-I-D，输入。

1891
01:25:12,050 --> 01:25:14,600
Hello, David.
你好，大卫。

1892
01:25:14,600 --> 01:25:18,120
OK, so it's better, like it seems to be working.
好了，看起来好多了，好像起作用了。

1893
01:25:18,120 --> 01:25:21,255
I think your hypothesis was right, just looks kind of stupid, right?
我认为你的假设是对的，只是看起来有点傻，对吧?

1894
01:25:21,255 --> 01:25:22,880
Like, the fact that it's saying Hello--
就像，它在说你好——

1895
01:25:22,880 --> 01:25:24,170
[PAUSE]
[暂停]

1896
01:25:24,170 --> 01:25:25,640
--David, like we can do better.
--大卫，好像我们可以做得更好。

1897
01:25:25,640 --> 01:25:29,000
And like, literally every piece of software on your phone or Mac or PC
就像你手机、Mac或PC上的每一个软件一样

1898
01:25:29,000 --> 01:25:29,930
is better than that.
比这更好。

1899
01:25:29,930 --> 01:25:33,750
It adds words together in the user interfaces you and I are familiar with.
它在你和我都熟悉的用户界面中添加单词。

1900
01:25:33,750 --> 01:25:35,480
So let's go a little more fishing here.
所以让我们在这里多钓鱼一点。

1901
01:25:35,480 --> 01:25:36,950
Let me throw away these.
让我扔掉这些。

1902
01:25:36,950 --> 01:25:39,860
Let me go back to Looks and just get the simpler Say.
让我回到look，用更简单的Say。

1903
01:25:39,860 --> 01:25:44,060
I want this to say, "Hello" comma name, where name
我想让它说，"Hello"，逗号name, where name

1904
01:25:44,060 --> 01:25:45,720
comes from that Answer return value.
来自该答案返回值。

1905
01:25:45,720 --> 01:25:46,740
So how can I do this?
那么我该怎么做呢？

1906
01:25:46,740 --> 01:25:49,440
Well, let me go under Operations, which we haven't been before.
那就让我去行动组吧，我们以前从没去过。

1907
01:25:49,440 --> 01:25:50,732
There's a lot of stuff in here.
这里面有很多东西。

1908
01:25:50,732 --> 01:25:53,720
Some of it's mathematically related, adding, subtracting, and so forth.
有些是数学相关的，加减法，等等。

1909
01:25:53,720 --> 01:25:56,280
You can generate random numbers which might be useful.
你可以生成随机数，这可能很有用。

1910
01:25:56,280 --> 01:25:59,810
And if I keep scrolling down, there's this Join "apple" and "banana."
如果我继续往下滚动，就会看到"苹果"和"香蕉"

1911
01:25:59,810 --> 01:26:01,280
But that's just placeholder text.
但这只是占位符文本。

1912
01:26:01,280 --> 01:26:04,837
You can join one piece of text with another piece of text,
你可以把一段文字和另一段文字连接起来，

1913
01:26:04,837 --> 01:26:06,170
by default "apple" and "banana."
默认情况下，“苹果”和“香蕉”。

1914
01:26:06,170 --> 01:26:08,480
But let's change it to "hello" and my name.
但让我们把它改成"你好"和我的名字。

1915
01:26:08,480 --> 01:26:11,120
So this, too, wrong size but right shape.
所以这个也是，大小不对但形状正确。

1916
01:26:11,120 --> 01:26:13,190
So let me let it snap into place.
所以让我让它卡入到位。

1917
01:26:13,190 --> 01:26:15,920
Let me go ahead now and do "hello" comma.
让我继续写"hello"逗号。

1918
01:26:15,920 --> 01:26:20,840
And now I think I just want to go grab that Answer return value.
现在我想去获取那个Answer返回值。

1919
01:26:20,840 --> 01:26:23,780
Let me drag the same oval as before, clobber--
我再拖一个和之前一样的椭圆

1920
01:26:23,780 --> 01:26:25,280
that is, overwrite-- banana.
也就是说，覆盖 - 香蕉。

1921
01:26:25,280 --> 01:26:28,430
So now I'm kind of composing functions.
所以现在我有点组合函数。

1922
01:26:28,430 --> 01:26:31,700
The output of one function, Join, is going
函数Join的输出是这样的

1923
01:26:31,700 --> 01:26:33,972
to be the input of another function, Say.
作为另一个函数的输入，比如说。

1924
01:26:33,972 --> 01:26:36,680
So let's see what happens now that they're kind of stacked on top
让我们看看现在发生了什么它们堆在了上面

1925
01:26:36,680 --> 01:26:38,660
of each other or nested, so to speak.
可以这么说，彼此或嵌套。

1926
01:26:38,660 --> 01:26:42,440
Click the Green Flag, D-A-V-I-D. Enter.
单击绿色旗帜，D-A-V-I-D。进入。

1927
01:26:42,440 --> 01:26:43,357
"Hello, David."
“你好，大卫。”

1928
01:26:43,357 --> 01:26:44,690
All right, that was pretty fast.
好吧，这很快。

1929
01:26:44,690 --> 01:26:45,680
Let's just do it once more.
让我们再做一次。

1930
01:26:45,680 --> 01:26:46,310
Stop.
停。

1931
01:26:46,310 --> 01:26:47,270
Start.
开始。

1932
01:26:47,270 --> 01:26:49,545
Here we go, D-A-V-I-D. Enter.
我们开始了，D-A-V-I-D。进入。

1933
01:26:49,545 --> 01:26:50,045
OK.
还行。

1934
01:26:50,045 --> 01:26:52,650
All right, it's not the most exciting program in the world.
好吧，这不是世界上最刺激的节目。

1935
01:26:52,650 --> 01:26:53,750
But it's more correct.
但它更正确。

1936
01:26:53,750 --> 01:26:56,090
It's better designed just because that's what you would kind of expect
它设计得更好，因为这是你所期望的

1937
01:26:56,090 --> 01:26:59,450
the software to do and not be some kind of lame user interface that's just
软件的功能，而不是一些蹩脚的用户界面，只是

1938
01:26:59,450 --> 01:27:02,540
inserting random delays to just make it kind of work, like that's
插入随机延迟来让它正常工作，就像这样

1939
01:27:02,540 --> 01:27:03,962
a workaround, a hack, if you will.
一个解决方法，一个黑客，如果你愿意的话。

1940
01:27:03,962 --> 01:27:06,170
But there's some cool things you can do with Scratch.
但是你可以用Scratch做一些很酷的事情。

1941
01:27:06,170 --> 01:27:08,030
And we won't really go down the rabbit hole
我们不会真的掉进兔子洞

1942
01:27:08,030 --> 01:27:10,940
of all of the fun and family-friendly features that it has.
所有的有趣和适合家庭的功能。

1943
01:27:10,940 --> 01:27:12,810
But there is one that's kind of cool here.
但这里有一个很酷。

1944
01:27:12,810 --> 01:27:16,550
Let me go into the Extensions button at the bottom left of my screen.
让我进入屏幕左下角的扩展按钮。

1945
01:27:16,550 --> 01:27:17,720
And this one's kind of cool.
这个有点酷。

1946
01:27:17,720 --> 01:27:19,575
Let me go to Text to Speech.
让我转到文本到语音。

1947
01:27:19,575 --> 01:27:22,700
And you'll notice that this one requires internet because it's cloud based.
你会注意到这个需要互联网，因为它是基于云的。

1948
01:27:22,700 --> 01:27:27,715
But this just gave me some new puzzle pieces in a new category,
但这只是给了我一个新类别的新拼图，

1949
01:27:27,715 --> 01:27:28,340
Text to Speech.
文本到语音转换。

1950
01:27:28,340 --> 01:27:30,710
And these green ones do exactly what they say.
而这些绿色的确实言出必行。

1951
01:27:30,710 --> 01:27:31,860
So let me do this.
所以让我来做这个。

1952
01:27:31,860 --> 01:27:33,120
Let me zoom out again.
让我再缩小一下。

1953
01:27:33,120 --> 01:27:34,543
Let me keep the Join block.
让我保留联接块。

1954
01:27:34,543 --> 01:27:36,710
And I'm just going to temporarily toss it over here.
我暂时把它扔到这里。

1955
01:27:36,710 --> 01:27:39,252
It's not going to delete itself because I didn't drag it over
它不会自我删除，因为我没有拖拽它

1956
01:27:39,252 --> 01:27:40,070
to the other side.
到另一边。

1957
01:27:40,070 --> 01:27:42,800
But I'm going to get rid of the Say block, in purple.
但是我要把Say方块去掉，用紫色表示。

1958
01:27:42,800 --> 01:27:47,570
I'm going to do the Speak block here, in green, and let it snap into place.
我要在这里画出Speak方块，用绿色，让它固定到位。

1959
01:27:47,570 --> 01:27:50,990
And then I'm going to drag and drop this onto the input to Speak.
然后我要把这个拖放到Speak的输入上。

1960
01:27:50,990 --> 01:27:54,290
And now, perhaps a little more adorably, let's try this.
现在，也许更可爱一点，让我们试试这个。

1961
01:27:54,290 --> 01:27:56,270
Green Flag, what's your name?
绿旗，你叫什么名字？

1962
01:27:56,270 --> 01:27:57,710
D-A-V-I-D. Enter.
D-A-V-I-D.进入。

1963
01:27:57,710 --> 01:27:58,460
And--
和--

1964
01:27:58,460 --> 01:28:00,578
COMPUTER: Hello, David.
计算机：你好，大卫。

1965
01:28:00,578 --> 01:28:01,370
DAVID J. MALAN: OK.
DAVID J. MALAN：好的。

1966
01:28:01,370 --> 01:28:02,370
[LAUGHTER]
[笑声]

1967
01:28:02,370 --> 01:28:03,890
It's a little robotic.
有点机器人。

1968
01:28:03,890 --> 01:28:05,917
But at least now it has synthesized speech.
但至少现在它有了合成语音。

1969
01:28:05,917 --> 01:28:08,750
And I've kind of got my own, like, Siri or Google Assistant or Alexa
我也有自己的Siri、谷歌助手或Alexa

1970
01:28:08,750 --> 01:28:12,020
thing going on here now, where it's now recognized whatever text
现在这里发生的事情，现在可以识别任何文本

1971
01:28:12,020 --> 01:28:13,550
it is, and it's played it.
它是，它被播放了。

1972
01:28:13,550 --> 01:28:17,480
Well, let's make this an actual cat that doesn't talk in that weird human voice.
好吧，让我们把它变成一只真正的猫，它不会用那种奇怪的人类声音说话。

1973
01:28:17,480 --> 01:28:19,610
Let me go ahead and get rid of most of this stuff.
让我先把这些东西擦掉。

1974
01:28:19,610 --> 01:28:22,730
And let's get the cat to actually meow, like a cat tends to.
让这只猫真正地喵喵叫，就像猫一样。

1975
01:28:22,730 --> 01:28:24,650
And let me go under the Sounds block.
让我进入声音块。

1976
01:28:24,650 --> 01:28:28,343
Now MIT gives you a few sounds for free because it's designed around a cat,
现在麻省理工学院给你一些免费的声音，因为它是围绕一只猫设计的，

1977
01:28:28,343 --> 01:28:30,260
by default. And I'm going to go ahead and grab
默认情况下。我将继续抓取

1978
01:28:30,260 --> 01:28:33,080
this one, Play Sound Meow until done.
这个，播放声音喵喵直到完成。

1979
01:28:33,080 --> 01:28:36,860
And now-- and we heard a teaser for this earlier in the crowd--
现在——我们之前在人群中听到了一个预告片——

1980
01:28:36,860 --> 01:28:38,982
[MEOW]
[喵]

1981
01:28:38,982 --> 01:28:40,440
It's a little piercing, admittedly.
诚然，这有点刺耳。

1982
01:28:40,440 --> 01:28:42,460
Maybe we can lower the volume a little bit there.
也许我们可以把这里的音量调低一点。

1983
01:28:42,460 --> 01:28:45,710
But notice, if I want the cat to meow a second time, I'll just click it again.
但请注意，如果我想让猫再次喵喵叫，我只需再次点击它。

1984
01:28:45,710 --> 01:28:46,905
[MEOW]
[喵]

1985
01:28:46,905 --> 01:28:48,690
OK, and over there, too, I hear--
好吧，在那边，我也听到了——

1986
01:28:48,690 --> 01:28:50,320
[MEOW]
[喵]

1987
01:28:50,320 --> 01:28:50,820
OK.
还行。

1988
01:28:50,820 --> 01:28:51,320
[MEOW]
[喵]

1989
01:28:51,320 --> 01:28:53,500
All right, so it's kind of cute now, right?
好了，现在看起来挺可爱的，对吧?

1990
01:28:53,500 --> 01:28:54,960
So it's just meow--
所以只是喵喵——

1991
01:28:54,960 --> 01:28:56,610
OK, yes, echo, echo.
好的，是的，回声，回声。

1992
01:28:56,610 --> 01:28:59,767
So it's meowing now every time I hit the Green Flag.
所以现在每次我打到绿旗它都会叫。

1993
01:28:59,767 --> 01:29:02,100
Now, that's great, but even a kid is probably going to--
这很好，但即使是孩子也可能会

1994
01:29:02,100 --> 01:29:02,730
[MEOW]
[喵]

1995
01:29:02,730 --> 01:29:03,780
--like would prefer that it--
--喜欢它--

1996
01:29:03,780 --> 01:29:03,840
[MEOW]
[喵]

1997
01:29:03,840 --> 01:29:06,790
--just meow, perhaps, like again and again, without having to keep--
——只是喵喵，也许，就像一遍又一遍，不用保持——

1998
01:29:06,790 --> 01:29:07,290
[MEOW]
[喵]

1999
01:29:07,290 --> 01:29:08,165
--hitting the button.
--按下按钮。

2000
01:29:08,165 --> 01:29:09,880
So how might we do this?
那么我们该怎么做呢？

2001
01:29:09,880 --> 01:29:13,470
All right, well, if I want it to meow multiple times, why don't I just, like,
好吧，如果我想让它多次喵喵叫，为什么我不直接，比如，

2002
01:29:13,470 --> 01:29:16,570
grab it another time and another time?
再抓一次又一次？

2003
01:29:16,570 --> 01:29:19,350
Alternatively, you can Right-click or Control-click a puzzle piece
或者，你可以右键单击或Control-click拼图块

2004
01:29:19,350 --> 01:29:21,725
and just duplicate it from a little menu that drops down.
然后从下拉菜单中复制它。

2005
01:29:21,725 --> 01:29:22,920
So here we go, three meows.
所以我们来了，三声喵喵。

2006
01:29:22,920 --> 01:29:25,090
[MEOWING]
[喵喵]

2007
01:29:25,090 --> 01:29:25,960


2008
01:29:25,960 --> 01:29:27,730
All right, that's not really a happy cat.
好吧，这只猫可不怎么开心。

2009
01:29:27,730 --> 01:29:29,200
It sounds maybe hungry.
听起来可能饿了。

2010
01:29:29,200 --> 01:29:31,240
So can we slow that down?
那么我们可以放慢速度吗？

2011
01:29:31,240 --> 01:29:32,380
Well, maybe.
好吧，也许吧。

2012
01:29:32,380 --> 01:29:34,630
In fact, if I poke around, let me go under Control.
事实上，如果我四处乱戳，让我在控制下。

2013
01:29:34,630 --> 01:29:36,850
It looks like there's a Wait block.
看起来有一个等待块。

2014
01:29:36,850 --> 01:29:40,630
Wait 1 Second, by default. And notice, Scratch will be pretty accommodating.
缺省值为1秒。注意，Scratch是很方便的。

2015
01:29:40,630 --> 01:29:44,410
If you just hover in between blocks, it will grow to fill that too.
如果你只是悬停在块之间，它也会填满。

2016
01:29:44,410 --> 01:29:47,095
So I could change it to 1 or 2 or anything, seconds.
所以我可以把它改成1或2或任何东西，秒。

2017
01:29:47,095 --> 01:29:48,970
I'll just leave it at the default for now, 1.
我现在让它保持默认值，1。

2018
01:29:48,970 --> 01:29:50,680
And now I'll go ahead and do this.
现在我继续做这个。

2019
01:29:50,680 --> 01:29:52,838
[MEOWING]
[喵喵]

2020
01:29:52,838 --> 01:29:55,580


2021
01:29:55,580 --> 01:29:58,790
OK, so cuter and less hungry and just more friendly.
好吧，更可爱，更不饿，更友好。

2022
01:29:58,790 --> 01:30:00,740
But this isn't the best design.
但这不是最好的设计。

2023
01:30:00,740 --> 01:30:01,460
It is correct.
这是正确的。

2024
01:30:01,460 --> 01:30:02,960
And let's use that as a term of art.
让我们把它作为一个艺术术语。

2025
01:30:02,960 --> 01:30:05,720
Correct means the code does what you want it to do.
正确意味着代码做了你想让它做的事情。

2026
01:30:05,720 --> 01:30:08,090
I want the cat to meow three times slowly.
我想让猫慢慢地喵喵叫三次。

2027
01:30:08,090 --> 01:30:08,720
And it did.
它确实做到了。

2028
01:30:08,720 --> 01:30:10,370
So I'd wager this is correct.
所以我敢打赌这是正确的。

2029
01:30:10,370 --> 01:30:12,380
But it's not the best design.
但这不是最好的设计。

2030
01:30:12,380 --> 01:30:14,810
And this is where things get more subjective, right?
这就是事情变得更加主观的地方，对吧?

2031
01:30:14,810 --> 01:30:18,630
Like, you could write accurate sentences in an essay for an English class,
比如，你可以在英语课的作文中写出准确的句子，

2032
01:30:18,630 --> 01:30:20,663
but otherwise, it's just completely a mess.
但除此之外，它完全是一团乱。

2033
01:30:20,663 --> 01:30:23,580
Like, your arguments here and there, and you don't say anything wrong,
比如，你的争论到处都是，你没有说错任何话，

2034
01:30:23,580 --> 01:30:24,830
but you don't say it well.
但你说得不好。

2035
01:30:24,830 --> 01:30:28,110
In the context of code, we can do better than this.
在代码上下文中，我们可以做得更好。

2036
01:30:28,110 --> 01:30:31,340
And Copy/Paste or repeating yourself again and again tends
复制/粘贴或者一遍又一遍地重复

2037
01:30:31,340 --> 01:30:32,340
to be bad practice.
是不好的做法。

2038
01:30:32,340 --> 01:30:32,840
Why?
为什么？

2039
01:30:32,840 --> 01:30:37,188
Suppose that you want to change the Wait to 2 seconds instead of 1.
假设你希望将Wait更改为2秒而不是1秒。

2040
01:30:37,188 --> 01:30:38,480
It's admittedly not a big deal.
诚然，这没什么大不了的。

2041
01:30:38,480 --> 01:30:40,400
Fine, I click there, I change it to 2.
很好，我单击那里，将其更改为 2。

2042
01:30:40,400 --> 01:30:41,990
I click there, I change it to 2.
我单击那里，将其更改为 2。

2043
01:30:41,990 --> 01:30:43,820
But what if you meow 5 times, 10 times?
但是如果你喵喵叫 5 次、10 次怎么办？

2044
01:30:43,820 --> 01:30:46,858
Now I have to change the Wait, like, in 5, 10 different places.
现在我得改一下等等，大概要改5到10个地方。

2045
01:30:46,858 --> 01:30:47,900
Like, that's just stupid.
就像，那只是愚蠢的。

2046
01:30:47,900 --> 01:30:51,395
It's taking unnecessary human time, and you're going to screw up eventually,
这会占用不必要的人力时间，而且你最终会搞砸的，

2047
01:30:51,395 --> 01:30:53,270
especially if your program is getting longer.
特别是如果你的节目越来越长。

2048
01:30:53,270 --> 01:30:54,740
You're going to miss one of the inputs.
你将错过其中一个输入。

2049
01:30:54,740 --> 01:30:56,365
You're going to leave the number wrong.
你会把数字留错。

2050
01:30:56,365 --> 01:30:57,080
And that's a bug.
这是一个错误。

2051
01:30:57,080 --> 01:30:59,030
So just based on what you've seen already
基于你们已经看到的

2052
01:30:59,030 --> 01:31:01,760
or if you've program before, which a few of you have,
或者如果你以前编过程序，你们中的一些人编过，

2053
01:31:01,760 --> 01:31:04,050
what's the term of art here that will solve this?
解决这个问题的术语是什么?

2054
01:31:04,050 --> 01:31:06,095
How can we design this better?
我们如何才能更好地设计它？

2055
01:31:06,095 --> 01:31:07,230
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2056
01:31:07,230 --> 01:31:08,563
DAVID J. MALAN: I heard it here.
DAVID J. MALAN：我在这里听到了。

2057
01:31:08,563 --> 01:31:12,110
Yeah, so a loop-- a loop, some kind of cycle that says, do that again.
是的，一个循环，一个循环，某种循环说，再做一次。

2058
01:31:12,110 --> 01:31:15,140
Do that again-- not infinitely many times, necessarily,
再做一次——不一定是无限次，

2059
01:31:15,140 --> 01:31:16,430
but some finite number.
而是一些有限的数字。

2060
01:31:16,430 --> 01:31:18,740
Well, you can perhaps see a spoiler on the screen.
嗯，你可能会在屏幕上看到剧透。

2061
01:31:18,740 --> 01:31:22,760
Under the same orange Control category is a Repeat block.
在同一个橙色控制类别下是一个重复块。

2062
01:31:22,760 --> 01:31:24,320
And by default, it's proposing 10.
默认情况下，它建议 10 个。

2063
01:31:24,320 --> 01:31:25,440
But we can change that.
但我们可以改变这一点。

2064
01:31:25,440 --> 01:31:26,280
So let me do this.
所以让我来做这个。

2065
01:31:26,280 --> 01:31:29,930
I'm going to throw away most of this Copy/Paste as redundant.
我打算把复制/粘贴的大部分内容都扔掉，因为它们是多余的。

2066
01:31:29,930 --> 01:31:33,470
I'm going to detach this temporarily just to make room for something else.
我要暂时把这个分离出来给别的东西腾出空间。

2067
01:31:33,470 --> 01:31:37,590
And I'm going to drag a Repeat block over here and let that snap into place.
我要拖一个Repeat block到这里让它固定在这里。

2068
01:31:37,590 --> 01:31:40,340
And I'm going to change it for now, just to be 3, for consistency.
为了一致性，我现在把它改成3。

2069
01:31:40,340 --> 01:31:42,715
And this is the correct shape even though it's too small,
这是正确的形状，尽管它太小了，

2070
01:31:42,715 --> 01:31:44,660
but Scratch will accommodate that for us.
但是Scratch会为我们解决这个问题。

2071
01:31:44,660 --> 01:31:50,370
And now-- same output but arguably better designed.
而现在——同样的输出，但可以说是更好的设计。

2072
01:31:50,370 --> 01:31:50,870
Why?
为什么？

2073
01:31:50,870 --> 01:31:53,953
Because if I want to change the number of meows, I change it in one place,
因为如果我想改变喵喵叫的数量，我在一个地方改变它，

2074
01:31:53,953 --> 01:31:55,040
no Copy/Paste messiness.
没有复制/粘贴混乱。

2075
01:31:55,040 --> 01:31:56,867
If I want to change the waiting, one place.
如果我想改变等待，一个地方。

2076
01:31:56,867 --> 01:31:59,450
I don't have to change it in multiple places and not screw up.
我不需要在很多地方修改它而不搞砸。

2077
01:31:59,450 --> 01:32:00,920
So let me hit the Green Flag.
所以让我打绿旗。

2078
01:32:00,920 --> 01:32:03,405
[MEOWING]
[喵喵]

2079
01:32:03,405 --> 01:32:05,890


2080
01:32:05,890 --> 01:32:06,940
All right, so-- nice.
好吧，所以 - 很好。

2081
01:32:06,940 --> 01:32:11,140
Now, it would have been nice if MIT had just given us a meow block that
现在，如果麻省理工学院给我们一个这样的“喵”块就好了

2082
01:32:11,140 --> 01:32:12,970
just automates all of this for us.
只是为我们自动化了所有这些。

2083
01:32:12,970 --> 01:32:15,910
Let me wager, they gave us the low-level implementation details.
我敢打赌，他们给了我们底层的实现细节。

2084
01:32:15,910 --> 01:32:18,400
They gave us the Play Sound Meow.
他们给了我们播放声音喵喵。

2085
01:32:18,400 --> 01:32:21,100
But I had to implement a decent number of blocks
但我必须实现相当数量的块

2086
01:32:21,100 --> 01:32:23,120
just to get a cat to meow again and again.
只是为了让猫一遍又一遍地喵喵叫。

2087
01:32:23,120 --> 01:32:26,350
I feel like we should have gotten that for free from MIT.
我觉得我们应该从麻省理工免费得到这个。

2088
01:32:26,350 --> 01:32:30,100
Well, they don't have to be the only ones that invent blocks for us to use.
他们不一定是唯一发明积木供我们使用的人。

2089
01:32:30,100 --> 01:32:33,920
You can write your own functions, your own verbs or actions.
你可以编写自己的函数，自己的动词或动作。

2090
01:32:33,920 --> 01:32:35,180
So how can we do this?
那么我们该怎么做呢？

2091
01:32:35,180 --> 01:32:39,640
Let's make our own puzzle piece, called Meow, that uses this code
让我们制作自己的拼图，叫做“喵”，使用这个代码

2092
01:32:39,640 --> 01:32:42,650
but creates it in such a way that it's reusable elsewhere.
但是以一种可以在其他地方重复使用的方式来创建它。

2093
01:32:42,650 --> 01:32:43,420
So let me do this.
所以让我来做这个。

2094
01:32:43,420 --> 01:32:46,660
Under my blocks in pink here, I'm going to go ahead and click,
在粉色方块下面，我要点击，

2095
01:32:46,660 --> 01:32:48,310
literally, Make a Block.
从字面上看，做一个块。

2096
01:32:48,310 --> 01:32:51,100
Now, here's an interface by which I can give the block a name.
现在，这里有一个接口，我可以通过它给块命名。

2097
01:32:51,100 --> 01:32:53,410
M-E-O-W will be the name of this block.
M-E-O-W 将是这个区块的名称。

2098
01:32:53,410 --> 01:32:55,810
And I'm just going to go ahead and quickly click OK.
我要继续，快速点击确定。

2099
01:32:55,810 --> 01:32:58,780
That just gives me a very generic, pink puzzle piece
这就给了我一个非常普通的粉红色拼图

2100
01:32:58,780 --> 01:33:01,390
that starts with the word Define because scratch
以Define开头，因为scratch

2101
01:33:01,390 --> 01:33:04,750
is asking me to define, that is, implement or create,
要求我定义，也就是实现或创造，

2102
01:33:04,750 --> 01:33:06,717
this new puzzle piece for me.
对我来说，这是一块新的拼图。

2103
01:33:06,717 --> 01:33:08,050
Well, what does it mean to Meow?
那么，这对喵喵意味着什么？

2104
01:33:08,050 --> 01:33:12,770
I'm going to claim that it means to do these two steps, to play the sound meow
我要说的是，它的意思是做这两步，发出喵喵的声音

2105
01:33:12,770 --> 01:33:14,890
and then just wait for 1 second.
然后等待 1 秒钟。

2106
01:33:14,890 --> 01:33:18,520
But what's powerful about this idea is look at this up top.
但这个想法的强大之处在于，看看上面这个。

2107
01:33:18,520 --> 01:33:21,970
Now that I've made a block, it exists in Scratch.
现在我已经创建了一个块，它存在于Scratch中。

2108
01:33:21,970 --> 01:33:23,710
MIT didn't need to create this for me.
麻省理工学院不需要为我创建这个。

2109
01:33:23,710 --> 01:33:27,190
I created it for myself and even you, if we end up sharing code.
我是为我自己甚至是你，如果我们最终共享代码的话。

2110
01:33:27,190 --> 01:33:30,320
So I can now drag Meow up in here.
所以我现在可以把喵喵拖到这里。

2111
01:33:30,320 --> 01:33:33,910
And what's nice about Meow is that itself is, yes, a function,
喵的好处在于，它本身就是一个函数，

2112
01:33:33,910 --> 01:33:35,680
but it's also an abstraction.
但它也是一种抽象。

2113
01:33:35,680 --> 01:33:40,060
Like, never again do I or even you need to worry or care about what
就像，我甚至你都不需要担心或关心什么

2114
01:33:40,060 --> 01:33:42,340
it means to meow or implement it.
它的意思是喵喵叫或实施它。

2115
01:33:42,340 --> 01:33:43,930
I can sort of drag it out of the way.
我可以把它拖开。

2116
01:33:43,930 --> 01:33:45,790
I didn't delete it-- drag it out of the way.
我没有删掉它，只是把它拖开了。

2117
01:33:45,790 --> 01:33:46,970
Out of sight, out of mind.
离久情疏。

2118
01:33:46,970 --> 01:33:47,470
Why?
为什么？

2119
01:33:47,470 --> 01:33:49,945
Because my code is now even better designed, in some sense,
从某种意义上说，因为我的代码现在设计得更好了，

2120
01:33:49,945 --> 01:33:51,070
because it's more readable.
因为它更具可读性。

2121
01:33:51,070 --> 01:33:51,910
What is it doing?
它在做什么？

2122
01:33:51,910 --> 01:33:55,000
When the Green Flag is clicked, repeat 3 times Meow.
点击绿旗后，重复喵喵3次。

2123
01:33:55,000 --> 01:33:56,305
It just says what it means.
它只是说它的意思。

2124
01:33:56,305 --> 01:33:58,180
And so it's a lot easier to read it, and it's
这样读起来就容易多了

2125
01:33:58,180 --> 01:33:59,930
a lot easier to think about it, especially
想起来容易多了，尤其是

2126
01:33:59,930 --> 01:34:03,040
if you're using Meow in other projects too.
如果你也在其他项目中使用喵。

2127
01:34:03,040 --> 01:34:05,380
Now, let me go ahead and click Play.
现在，让我继续并单击播放。

2128
01:34:05,380 --> 01:34:06,280
[MEOW]
[喵]

2129
01:34:06,280 --> 01:34:07,200
Same thing.
同样的事情。

2130
01:34:07,200 --> 01:34:07,700
[MEOW]
[喵]

2131
01:34:07,700 --> 01:34:09,282
So it's not really fundamentally any different.
所以本质上并没有什么不同。

2132
01:34:09,282 --> 01:34:09,830
[MEOW]
[喵]

2133
01:34:09,830 --> 01:34:13,840
But I can make this custom puzzle piece, this own function of mine, Meow,
但是我可以做这个自定义的拼图，我自己的这个功能，喵，

2134
01:34:13,840 --> 01:34:15,010
even more powerful.
甚至更强大。

2135
01:34:15,010 --> 01:34:18,520
Let me kind of rewind a bit and go to my Meow puzzle piece.
让我倒带一下，回到我的“喵”拼图。

2136
01:34:18,520 --> 01:34:21,658
And I am going to Control-click or Right-click on my pink puzzle piece.
然后ctrl -click或者右键单击我的粉色拼图。

2137
01:34:21,658 --> 01:34:22,700
And I'm going to edit it.
我要编辑它。

2138
01:34:22,700 --> 01:34:25,210
So I kind of regret making Meow so simple.
所以我有点后悔把喵喵弄得这么简单。

2139
01:34:25,210 --> 01:34:28,660
Wouldn't it be nice if Meow took an input, a.k.a.
如果喵喵有个输入，也就是。

2140
01:34:28,660 --> 01:34:31,960
an argument, that tells Meow how many times to meow.
它告诉喵喵该叫几次。

2141
01:34:31,960 --> 01:34:34,300
Then I can get rid of that loop and just tell
然后我可以去掉这个循环，然后告诉

2142
01:34:34,300 --> 01:34:36,530
Meow how many meows I actually want.
喵喵我到底想要多少喵。

2143
01:34:36,530 --> 01:34:40,390
So I'm going to click on another button here called, literally, Add an Input.
我要点击这里的另一个按钮，字面意思是，添加输入。

2144
01:34:40,390 --> 01:34:42,085
And it's going to have placeholder here.
这里会有占位符。

2145
01:34:42,085 --> 01:34:43,960
So I'm just going to put a placeholder there.
我在这里放一个占位符。

2146
01:34:43,960 --> 01:34:47,880
I keep using "n" for number, which is a go to in computer scientist terms.
我一直用“n”来表示数字，这在计算机科学家的术语中是很常见的。

2147
01:34:47,880 --> 01:34:50,380
And I'm going to add some descriptive text just so that it's
我要添加一些描述性的文字，这样

2148
01:34:50,380 --> 01:34:52,030
a little more self-explanatory.
更不言自明。

2149
01:34:52,030 --> 01:34:54,070
I'm just going to say Meow n Times.
我只想说喵喵n次。

2150
01:34:54,070 --> 01:34:55,510
But there's only one oval.
但是只有一个椭圆形。

2151
01:34:55,510 --> 01:34:57,700
Times is just going to be explanatory text.
Times只是一个解释性的文本。

2152
01:34:57,700 --> 01:34:59,290
And now notice what has happened.
现在注意发生了什么。

2153
01:34:59,290 --> 01:35:02,800
Now my puzzle piece takes an input, a.k.a.
现在我的拼图有一个输入，也就是。

2154
01:35:02,800 --> 01:35:06,580
an argument, that will tell that function to meow some number of times.
一个参数，它会告诉那个函数喵喵叫几次。

2155
01:35:06,580 --> 01:35:08,440
But it's not just going to work magically.
但它不会神奇地起作用。

2156
01:35:08,440 --> 01:35:11,110
I need to implement that lower level detail.
我需要实现那个较低级别的细节。

2157
01:35:11,110 --> 01:35:12,700
So let me zoom out.
所以让我缩小。

2158
01:35:12,700 --> 01:35:14,918
I have to remind myself what this function was.
我必须提醒自己这个函数是什么。

2159
01:35:14,918 --> 01:35:16,960
So I'm going to drag it higher up just so they're
所以我要把它往上拖，这样它们就

2160
01:35:16,960 --> 01:35:18,550
on the screen at the same time.
同时在屏幕上。

2161
01:35:18,550 --> 01:35:22,090
I'm going to go ahead now and temporarily move this over here.
我现在要把这个暂时移到这里。

2162
01:35:22,090 --> 01:35:24,190
I'm going to temporarily detach this over here.
我暂时把这个分开。

2163
01:35:24,190 --> 01:35:24,700
Why?
为什么？

2164
01:35:24,700 --> 01:35:30,130
Because what I thing I want to do is move my loop into the function itself,
因为我想做的是把循环移到函数本身，

2165
01:35:30,130 --> 01:35:33,760
move the Play and the Wait into the loop.
将播放和等待移动到循环中。

2166
01:35:33,760 --> 01:35:35,470
But I don't want a hardcode 3.
但我不想要硬编码 3。

2167
01:35:35,470 --> 01:35:39,760
Notice that n here is its own oval I can drag a copy of n
注意这里的n是它自己的椭圆，我可以拖一个n的副本

2168
01:35:39,760 --> 01:35:41,390
and just let it go there.
然后让它去那里。

2169
01:35:41,390 --> 01:35:45,700
So now I have a new version of Meow that takes an argument, n,
现在我有了一个新版本的喵，它有一个参数n，

2170
01:35:45,700 --> 01:35:48,170
that tells Meow how many times to meow.
这告诉喵喵多少次喵喵。

2171
01:35:48,170 --> 01:35:51,125
And now let me, again, drag this out of sight, out of mind,
现在让我再一次把它从视线中拖出来，从脑海中拖出来，

2172
01:35:51,125 --> 01:35:52,750
because who cares how I implemented it?
因为谁在乎我是如何实现的？

2173
01:35:52,750 --> 01:35:54,880
Once it's implemented, it's sort of done.
一旦它被实现，它就完成了。

2174
01:35:54,880 --> 01:35:58,070
Now my program is even better designed, in some sense.
从某种意义上说，现在我的程序设计得更好了。

2175
01:35:58,070 --> 01:35:58,570
Why?
为什么？

2176
01:35:58,570 --> 01:36:01,120
Because now it really just says what it means.
因为现在它只是表达了它的意思。

2177
01:36:01,120 --> 01:36:01,840
There's no loop.
没有循环。

2178
01:36:01,840 --> 01:36:04,360
There's no repeat, no implementation details.
没有重复，没有实现细节。

2179
01:36:04,360 --> 01:36:07,060
When Green Flag Clicked, Meow 3 Times.
当绿旗点击时，喵喵叫了 3 次。

2180
01:36:07,060 --> 01:36:10,840
And so functions indeed let you implement algorithms,
函数确实可以让你实现算法，

2181
01:36:10,840 --> 01:36:13,070
like they're just code that do something for you.
就好像它们只是帮你做事的代码。

2182
01:36:13,070 --> 01:36:14,930
But they're also themselves abstractions.
但它们本身也是抽象的。

2183
01:36:14,930 --> 01:36:15,430
Why?
为什么？

2184
01:36:15,430 --> 01:36:17,660
Because once a function exists, it has a name.
因为一旦函数存在，它就有了名字。

2185
01:36:17,660 --> 01:36:19,580
And you can think about it in that term.
你可以用这个术语来考虑它。

2186
01:36:19,580 --> 01:36:21,610
And you can use it by its name.
你可以用它的名字来使用它。

2187
01:36:21,610 --> 01:36:25,940
You don't have to care or remember how the function itself was built,
你不需要关心或记住函数本身是如何构建的，

2188
01:36:25,940 --> 01:36:27,730
whether it's by you or even MIT.
无论是你还是麻省理工学院。

2189
01:36:27,730 --> 01:36:29,480
So again, here I'll click the Green Flag.
再次点击绿旗。

2190
01:36:29,480 --> 01:36:30,313
It's the same thing.
这是一回事。

2191
01:36:30,313 --> 01:36:32,292
[MEOWING]
[喵喵]

2192
01:36:32,292 --> 01:36:35,130


2193
01:36:35,130 --> 01:36:38,250
So still correct, but better and better designed.
所以仍然是正确的，但是设计得越来越好。

2194
01:36:38,250 --> 01:36:41,090
And so any time, here and out, with Scratch, or soon C,
所以任何时候，在这里和外面，用Scratch，或者很快的C，

2195
01:36:41,090 --> 01:36:43,790
and eventually Python, when you find yourself doing anything
最后是Python，当你发现自己在做任何事情的时候

2196
01:36:43,790 --> 01:36:47,828
resembling Copy/Paste or again and again grabbing the same code, probably
类似于复制/粘贴或一次又一次地抓取相同的代码，可能

2197
01:36:47,828 --> 01:36:49,370
an opportunity to say, wait a minute.
有机会说，等一下。

2198
01:36:49,370 --> 01:36:52,490
Let me refactor this, so to speak, that is, rip out
让我来重构一下，也就是说，把它撕掉

2199
01:36:52,490 --> 01:36:54,697
the code that seems to be repeated again and again
代码似乎被重复了一遍又一遍

2200
01:36:54,697 --> 01:36:57,530
and put it in its own function so you can give it a descriptive name
把它放在它自己的函数里，这样你就可以给它一个描述性的名字

2201
01:36:57,530 --> 01:36:59,580
and use and reuse it.
并使用和重用它。

2202
01:36:59,580 --> 01:37:04,880
Any questions just yet on now saying or these loops or these functions
现在还有什么问题吗，关于这些循环或者这些函数

2203
01:37:04,880 --> 01:37:06,590
that we're using?
我们正在使用？

2204
01:37:06,590 --> 01:37:07,130
Yeah--
是的--

2205
01:37:07,130 --> 01:37:09,883
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2206
01:37:09,883 --> 01:37:12,300
DAVID J. MALAN: How did I make it so it meows three times?
DAVID J. MALAN：我是怎么做到让它喵喵叫三次的？

2207
01:37:12,300 --> 01:37:15,060
So I originally only had a puzzle piece called Meow.
所以我一开始只有一个叫喵的拼图。

2207
01:37:12,300 --> 01:37:15,060
So I originally only had a puzzle piece called Meow.
所以我一开始只有一个叫喵的拼图。

2208
01:37:15,060 --> 01:37:16,770
And I decided to improve it.
我决定改进它。

2209
01:37:16,770 --> 01:37:20,000
So I held down Control and I Right-clicked or Control-clicked
所以我按住Control键右键点击Control键

2210
01:37:20,000 --> 01:37:22,070
on the pink puzzle piece at top left.
在左上角的粉色拼图上。

2211
01:37:22,070 --> 01:37:23,120
And I clicked Edit.
我点了“编辑”。

2212
01:37:23,120 --> 01:37:25,070
And that brought back the original interface
这让我想起了最初的界面

2213
01:37:25,070 --> 01:37:28,790
that lets me add some arguments to the puzzle piece itself.
这样我就可以给拼图本身添加一些参数。

2214
01:37:28,790 --> 01:37:31,250
And I clicked Add an Input on the left here.
我点击左边的 Add an Input。

2215
01:37:31,250 --> 01:37:34,260
And then I clicked on Add a Label over here.
然后我点击这里添加一个标签。

2216
01:37:34,260 --> 01:37:36,960
So that just lets you customize it even further.
所以这只是让你进一步定制它。

2217
01:37:36,960 --> 01:37:38,490
All right, so we've done this.
好吧，我们已经谈过了。

2218
01:37:38,490 --> 01:37:41,900
Let's add one of those other primitives too to do something optionally.
让我们添加一个其他原语，以便可选地执行某些操作。

2219
01:37:41,900 --> 01:37:46,400
So how about we make the cat meow only if it's being petted by a human,
不如我们让猫喵喵叫只有被人类抚摸的时候,

2220
01:37:46,400 --> 01:37:50,540
as by moving the mouse to hover over the cat, like a human would pet a cat?
比如让老鼠在猫身上盘旋，就像人类会抚摸猫一样？

2221
01:37:50,540 --> 01:37:55,110
Well, let me go ahead and throw away the meowing for now.
好吧，让我先把喵喵声扔掉。

2222
01:37:55,110 --> 01:37:57,083
And let me simplify it by just using a sound.
让我用一个声音来简化它。

2223
01:37:57,083 --> 01:37:58,500
I'm going to go ahead and do this.
我要开始了。

2224
01:37:58,500 --> 01:38:02,030
I'm going to go ahead and have a Control block that
我将继续，并有一个控制块

2225
01:38:02,030 --> 01:38:06,560
says If, because I want to implement the idea of if the cursor is touching
说，如果，因为我想实现，如果光标是触摸的想法

2226
01:38:06,560 --> 01:38:08,930
the cat, then play sound meow.
猫，然后播放声音喵喵。

2227
01:38:08,930 --> 01:38:10,710
Or I could use my same pink puzzle piece.
或者我也可以用我的粉色拼图。

2228
01:38:10,710 --> 01:38:14,150
But I'm going to throw that away and focus only now on the sounds.
但是我现在要把它扔掉，把注意力集中在声音上。

2229
01:38:14,150 --> 01:38:15,840
And I'm going to do this.
我要这么做。

2230
01:38:15,840 --> 01:38:19,598
If touching mouse pointer-- so I need to sense something about the world.
如果触摸鼠标指针-，所以我需要感觉一些关于这个世界的东西。

2231
01:38:19,598 --> 01:38:20,640
And we saw this earlier--
我们之前看到过这个

2232
01:38:20,640 --> 01:38:22,500
so If Touching Mouse Pointer.
所以如果触摸鼠标指针。

2233
01:38:22,500 --> 01:38:24,810
So notice this shape here, way too big.
注意这个形状，太大了。

2234
01:38:24,810 --> 01:38:25,920
But it is the right shape.
但它的形状是正确的。

2235
01:38:25,920 --> 01:38:29,210
So if I hover just right, it'll snap into place.
所以如果我悬停得恰到好处，它就会自动到位。

2236
01:38:29,210 --> 01:38:33,410
And this now, in blue, is my Boolean expression, a yes/no question,
这个蓝色的是我的布尔表达式一个是或否的问题,

2237
01:38:33,410 --> 01:38:34,850
true false.
真假。

2238
01:38:34,850 --> 01:38:36,860
"If" is a conditional.
“如果”是一个条件。

2239
01:38:36,860 --> 01:38:38,100
And what do I want to do?
我想做什么？

2240
01:38:38,100 --> 01:38:42,290
Well, if the cat is touching the mouse pointer,
如果猫碰到了鼠标指针,

2241
01:38:42,290 --> 01:38:44,970
I want to go ahead and play sound meow until done.
我想继续播放声音喵喵直到完成。

2242
01:38:44,970 --> 01:38:46,080
So let's do this.
我们开始吧。

2243
01:38:46,080 --> 01:38:48,808
I'm going to hit Green Flag, click.
我要点击“绿旗”按钮。

2244
01:38:48,808 --> 01:38:51,350
Now nothing's happened yet because it's a conditional, right?
现在什么都没有发生，因为这是一个条件，对不对？

2245
01:38:51,350 --> 01:38:53,808
It's only supposed to do something if I'm touching the cat.
只有当我碰到猫的时候它才会有反应。

2246
01:38:53,808 --> 01:38:55,550
Let me move the cursor over to the cat.
让我把光标移到猫身上。

2247
01:38:55,550 --> 01:38:59,365
And-- wait for it.
等等。

2248
01:38:59,365 --> 01:39:02,330
Hmm-- another bug.
又一个窃听器。

2249
01:39:02,330 --> 01:39:06,200
Why is the cat not meowing even though I very explicitly
为什么猫不喵喵叫，即使我非常明确

2250
01:39:06,200 --> 01:39:09,020
said, If Touching Mouse Pointer, Meow?
说，如果触摸鼠标指针，喵？

2251
01:39:09,020 --> 01:39:10,295
Yeah, in the middle--
是的，在中间

2252
01:39:10,295 --> 01:39:11,893
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2253
01:39:11,893 --> 01:39:14,060
DAVID J. MALAN: Yeah, this is-- again, my computer's
DAVID J. MALAN：是的，这是 - 再次，我的电脑的

2254
01:39:14,060 --> 01:39:15,440
just so darn fast, like yours.
太快了，就像你一样。

2255
01:39:15,440 --> 01:39:17,317
I click the Green Flag, it asks the question,
我点击绿旗，它会提问,

2256
01:39:17,317 --> 01:39:18,650
am I touching the mouse pointer?
我碰到鼠标指针了吗？

2257
01:39:18,650 --> 01:39:21,350
Well, no, because my cursor was up there, not touching the cat.
没有，因为我的光标在上面，没碰到猫。

2258
01:39:21,350 --> 01:39:22,370
It's too late.
太迟了。

2259
01:39:22,370 --> 01:39:23,570
The cat's out of the bag.
秘密已经泄露了。

2260
01:39:23,570 --> 01:39:28,490
And so we have to instead solve this by some other means.
所以我们必须用其他方法来解决这个问题。

2261
01:39:28,490 --> 01:39:29,940
How can we fix this?
我们该怎么补救？

2262
01:39:29,940 --> 01:39:31,470
How do we fix that sort of race?
我们如何解决这种种族问题？

2263
01:39:31,470 --> 01:39:31,970
Yeah--
是啊

2264
01:39:31,970 --> 01:39:32,690
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2265
01:39:32,690 --> 01:39:34,648
DAVID J. MALAN: Yeah, so why don't we just keep
DAVID J. MALAN：是的，那我们为什么不保留

2266
01:39:34,648 --> 01:39:38,570
asking the question until I eventually am or am not actually petting the cat?
问这个问题，直到我最终是不是真的在抚摸这只猫？

2267
01:39:38,570 --> 01:39:40,610
So let me detach this temporarily.
让我暂时把这个分开。

2268
01:39:40,610 --> 01:39:42,050
Let me go under Control.
让我去控制。

2269
01:39:42,050 --> 01:39:45,098
Let me go under-- instead of repeat some finite number of times,
让我重复一遍，不要重复有限次数,

2270
01:39:45,098 --> 01:39:46,140
let's just do it forever.
我们就永远这样吧。

2271
01:39:46,140 --> 01:39:49,070
So sometimes loops that do work forever are a good thing.
所以有时候永远有效的循环是件好事。

2272
01:39:49,070 --> 01:39:51,140
The clock on your phone, that's in a loop
你手机上的时钟在循环

2273
01:39:51,140 --> 01:39:53,510
forever because you want it to always tell time and not
因为你想让它永远显示时间

2274
01:39:53,510 --> 01:39:54,720
stop at the end of the day.
在一天结束的时候停下来。

2275
01:39:54,720 --> 01:39:58,913
So sometimes you do want code to loop forever, as in this case.
所以有时候你确实希望代码永远循环下去，就像这个例子一样。

2276
01:39:58,913 --> 01:40:00,830
So let me go ahead and drag and drop it there.
所以让我继续把它拖到那里。

2277
01:40:00,830 --> 01:40:02,750
Let me, again, click the Green Flag.
让我再次点击绿旗。

2278
01:40:02,750 --> 01:40:03,900
Nothing's happening yet.
什么都没发生。

2279
01:40:03,900 --> 01:40:06,300
But notice, the program is still running.
但请注意，程序仍在运行。

2280
01:40:06,300 --> 01:40:10,700
And so if I move my cursor, move my cursor, move my cursor, and--
如果我移动光标，移动光标，移动光标，然后..

2281
01:40:10,700 --> 01:40:12,880
[MEOWING]
[喵喵]

2282
01:40:12,880 --> 01:40:14,550
OK, so maybe we could add some Waiting.
好吧，也许我们可以加点“等待”。

2283
01:40:14,550 --> 01:40:17,750
But the cat does not want to be pet, in this case.
但在这种情况下，猫不想被宠物。

2284
01:40:17,750 --> 01:40:20,220
But it's indeed conditional.
但这确实是有条件的。

2285
01:40:20,220 --> 01:40:22,380
So there we have an incarnation in Scratch
所以，我们有一个化身在刮擦

2286
01:40:22,380 --> 01:40:24,290
of doing something conditionally.
有条件地做某事。

2287
01:40:24,290 --> 01:40:26,790
Now, we can make this really cool, really fast, if you will.
如果你愿意的话，我们可以让这个变得很酷，很快。

2288
01:40:26,790 --> 01:40:28,440
Let me stop this version.
让我停止这个版本。

2289
01:40:28,440 --> 01:40:31,270
Let me go ahead and do this.
让我来吧。

2290
01:40:31,270 --> 01:40:33,270
Let me go ahead and throw all of this away.
让我把这一切都扔掉。

2291
01:40:33,270 --> 01:40:36,210
Let me go into my little Extensions bucket over here.
让我进入我的小扩展桶在这里。

2292
01:40:36,210 --> 01:40:40,020
And let me do Video Sensing, since most laptops or phones these days have
让我来做视频传感，因为现在大多数笔记本电脑或手机都有

2293
01:40:40,020 --> 01:40:40,620
cameras.
摄像头。

2294
01:40:40,620 --> 01:40:44,190
And there, indeed, I am, with Sanders behind me.
我确实在那里，桑德斯在我身后。

2295
01:40:44,190 --> 01:40:45,780
And let me do this.
让我来吧。

2296
01:40:45,780 --> 01:40:48,900
When Video Motion-- and let me get out of the way.
当视频运动-让我离开的方式。

2297
01:40:48,900 --> 01:40:51,820
When Video Motion is Greater Than some value.
当视频运动大于某个值时。

2298
01:40:51,820 --> 01:40:55,920
So 10 is the default. This is just a number that measures how much motion
所以默认值是10，这是一个测量运动量的数字

2299
01:40:55,920 --> 01:40:56,670
there is or isn't.
不管有没有。

2300
01:40:56,670 --> 01:40:58,290
So small number is like no motion.
所以小数字就像没有运动。

2301
01:40:58,290 --> 01:40:59,920
Big number is lots of motion.
大数字意味着大量的运动。

2302
01:40:59,920 --> 01:41:03,120
So I'm going to choose 50, somewhat arbitrarily here-- so 50.
所以我要选择50，这里有点随意，所以是50。

2303
01:41:03,120 --> 01:41:05,370
This is not normal to program off to the side.
在一边编程是不正常的。

2304
01:41:05,370 --> 01:41:08,130
But I'm now going to say this.
但我现在要说的是。

2305
01:41:08,130 --> 01:41:14,460
When Video Motion is 50, go ahead and Play Sound Meow like this.
当视频运动为 50 时，继续像这样播放声音喵喵。

2306
01:41:14,460 --> 01:41:16,170
So the cat is still in that world.
所以猫还在那个世界。

2307
01:41:16,170 --> 01:41:18,970
I'm going to stop the program and rerun it.
我将停止程序并重新运行它。

2308
01:41:18,970 --> 01:41:21,090
So here we go, Green Flag.
所以我们开始了，绿旗。

2309
01:41:21,090 --> 01:41:24,780
And now here comes-- all right, this is a little creepy,
现在来了——好吧，这有点令人毛骨悚然，

2310
01:41:24,780 --> 01:41:27,120
the way I'm petting the cat, but--
我抚摸猫的方式，但是——

2311
01:41:27,120 --> 01:41:30,640
and-- [SIGH]
还有——[叹息]

2312
01:41:30,640 --> 01:41:31,600


2313
01:41:31,600 --> 01:41:32,940
[MEOWING]
[喵喵]

2314
01:41:32,940 --> 01:41:33,440
OK.
还行。

2315
01:41:33,440 --> 01:41:35,750
[LAUGHTER]
[笑声]

2316
01:41:35,750 --> 01:41:36,290
There we go.
我们开始吧。

2317
01:41:36,290 --> 01:41:37,910
OK, so 50 was too big of a number.
好吧，所以50是一个太大的数字。

2318
01:41:37,910 --> 01:41:39,500
I have to pet the cat faster.
我必须更快地抚摸猫。

2319
01:41:39,500 --> 01:41:41,925
[MEOWING]
[喵喵]

2320
01:41:41,925 --> 01:41:42,900


2321
01:41:42,900 --> 01:41:44,940
Whereas this, if--
而这，如果——

2322
01:41:44,940 --> 01:41:46,410
I don't know--
我不知道--

2323
01:41:46,410 --> 01:41:48,330
[LAUGHTER]
[笑声]

2324
01:41:48,330 --> 01:41:49,924
Yeah, so--
是的，所以——

2325
01:41:49,924 --> 01:41:50,710
[MEOW]
[喵]

2326
01:41:50,710 --> 01:41:53,618
OK, so you can make things even more interactive in this way
好的，所以你可以用这种方式使事情更具交互性

2327
01:41:53,618 --> 01:41:55,410
by just assembling different puzzle pieces.
只需组装不同的拼图。

2328
01:41:55,410 --> 01:41:58,050
And honestly, there are so many different puzzle pieces in here.
老实说，这里有许多不同的拼图。

2329
01:41:58,050 --> 01:42:00,610
We're not going to even scratch the surface of a lot of them.
我们甚至不会触及其中很多的表面。

2330
01:42:00,610 --> 01:42:02,940
But they generally just do what they say.
但他们通常只是按照他们说的去做。

2331
01:42:02,940 --> 01:42:06,480
And indeed, when you see on the screen here this pallet
事实上，当你在屏幕上看到这个托盘时

2332
01:42:06,480 --> 01:42:09,330
of puzzle pieces, really a lot of programming, especially early on,
的拼图，真的很多编程，尤其是在早期，

2333
01:42:09,330 --> 01:42:12,970
when learning a language, is just trying different things and try and fail.
在学习一门语言时，只是尝试不同的事情并尝试失败。

2334
01:42:12,970 --> 01:42:17,070
And if it doesn't work quite right, look for an alternative solution
如果它不能正常工作，请寻找替代解决方案

2335
01:42:17,070 --> 01:42:20,000
there too, as even I just had to do a moment ago.
那里也是，就像我刚才不得不做的那样。

2336
01:42:20,000 --> 01:42:23,250
Well, let's go ahead and use, actually, how about another example of something
好吧，让我们继续使用，实际上，另一个例子怎么样

2337
01:42:23,250 --> 01:42:24,720
a predecessor of yours made?
你的前辈做了？

2338
01:42:24,720 --> 01:42:28,830
Let me go ahead and grab a program I opened in advance here called
让我继续拿一个我在这里提前打开的程序，叫做

2339
01:42:28,830 --> 01:42:32,520
Whack-A-Mole Might we get a brave volunteer to come up,
打鼹鼠 愿我们找一个勇敢的志愿者上来，

2340
01:42:32,520 --> 01:42:38,895
who is willing to whack a mole with their head, virtually?
谁愿意用他们的头打鼹鼠，虚拟？

2341
01:42:38,895 --> 01:42:40,770
Maybe-- OK, let's see, how about in way back?
也许——好吧，让我们看看，回去怎么样？

2342
01:42:40,770 --> 01:42:42,300
You want to come on down?
你想下来吗？

2343
01:42:42,300 --> 01:42:45,327
All right, come on down.
好了，下来吧。

2344
01:42:45,327 --> 01:42:47,160
Sure, a round of applause for our volunteer.
当然，为我们的志愿者鼓掌。

2345
01:42:47,160 --> 01:42:49,382
[APPLAUSE]
[掌声]

2346
01:42:49,382 --> 01:42:52,130


2347
01:42:52,130 --> 01:42:56,835
All right, so here we have--
好了，我们来了——

2348
01:42:56,835 --> 01:42:59,930


2349
01:42:59,930 --> 01:43:01,178
come on down.
下来吧。

2350
01:43:01,178 --> 01:43:01,970
AUDIENCE: Hi there.
观众：你好。

2351
01:43:01,970 --> 01:43:02,720
DAVID J. MALAN: What's your name?
DAVID J. MALAN：你叫什么名字？

2352
01:43:02,720 --> 01:43:03,320
AUDIENCE: I'm Josh.
观众：我是乔希。

2353
01:43:03,320 --> 01:43:05,695
DAVID J. MALAN: Oh, actually, say it into the microphone.
DAVID J. MALAN：哦，实际上，对着麦克风说。

2354
01:43:05,695 --> 01:43:06,950
AUDIENCE: Hi, I'm Josh.
观众：嗨，我是乔希。

2355
01:43:06,950 --> 01:43:07,670
DAVID J. MALAN: OK, nice.
DAVID J. MALAN：好的，很好。

2356
01:43:07,670 --> 01:43:08,240
Welcome, Josh.
欢迎你，乔希。

2357
01:43:08,240 --> 01:43:08,782
Come on over.
过来吧。

2358
01:43:08,782 --> 01:43:10,850
[APPLAUSE]
[掌声]

2359
01:43:10,850 --> 01:43:12,892
All right, so same idea here--
好吧，这里的想法是一样的——

2360
01:43:12,892 --> 01:43:13,850
I'll take the mic back.
我把麦克风拿回来。

2361
01:43:13,850 --> 01:43:15,230
You'll have to stand in front of the camera.
你必须站在镜头前。

2362
01:43:15,230 --> 01:43:18,105
In just a moment, you're going to have to position your head in a box
在短短一会儿，你将不得不将你的头放在一个盒子里。

2363
01:43:18,105 --> 01:43:20,150
that your classmate from yesteryear created.
你过去的同学创造的。

2364
01:43:20,150 --> 01:43:22,340
[MUSIC PLAYING]
[放歌！]

2365
01:43:22,340 --> 01:43:22,840


2366
01:43:22,840 --> 01:43:24,490
And we'll start with Beginner.
我们将从初学者开始。

2367
01:43:24,490 --> 01:43:25,180
AUDIENCE: OK.
观众：好的。

2368
01:43:25,180 --> 01:43:28,166
DAVID J. MALAN: So line your head up in the box in a moment.
DAVID J. MALAN：所以一会儿把你的头放在盒子里。

2369
01:43:28,166 --> 01:43:29,142
AUDIENCE: All right.
观众：好的。

2370
01:43:29,142 --> 01:43:37,438


2371
01:43:37,438 --> 01:43:39,878
[LAUGHTER]
[笑声]

2372
01:43:39,878 --> 01:43:43,800


2373
01:43:43,800 --> 01:43:45,390
DAVID J. MALAN: Nice.
DAVID J. MALAN：很好。

2374
01:43:45,390 --> 01:43:46,155
12 seconds.
12秒。

2375
01:43:46,155 --> 01:43:52,500


2376
01:43:52,500 --> 01:43:53,790
5 seconds.
5秒。

2377
01:43:53,790 --> 01:43:55,710
Notice the score's up to 18 already.
请注意，分数已经达到了 18。

2378
01:43:55,710 --> 01:43:58,410
Pretty good.
相当不错。

2379
01:43:58,410 --> 01:44:00,990
All right, a round of applause for Josh, if we could.
好吧，如果可以的话，为乔希鼓掌。

2380
01:44:00,990 --> 01:44:03,440
[APPLAUSE]
[掌声]

2381
01:44:03,440 --> 01:44:06,380


2382
01:44:06,380 --> 01:44:09,020
So notice how using some fairly simple primitives,
所以请注意如何使用一些相当简单的基元，

2383
01:44:09,020 --> 01:44:11,330
things do get interesting pretty fast.
事情确实很快变得有趣。

2384
01:44:11,330 --> 01:44:12,560
And how was that implemented?
这是如何实施的？

2385
01:44:12,560 --> 01:44:14,560
Well, there were probably at least four sprites.
嗯，可能至少有四个精灵。

2386
01:44:14,560 --> 01:44:16,222
So you're not confined to just one cat.
所以你不仅限于一只猫。

2387
01:44:16,222 --> 01:44:18,930
You can create more and more sprites, change what they look like.
你可以创建越来越多的精灵，更改它们的外观。

2388
01:44:18,930 --> 01:44:20,930
So they actually look like a mole, in this case.
所以在这种情况下，它们实际上看起来像一颗痣。

2389
01:44:20,930 --> 01:44:23,990
There's probably some conditionals in there, some loops for 30 seconds.
里面可能有一些条件，一些循环 30 秒。

2390
01:44:23,990 --> 01:44:27,200
That's checking if Josh's head's movement is exceeding
这是在检查乔希的头部是否超过。

2391
01:44:27,200 --> 01:44:29,210
some value over this way or over this way,
一些价值超过这种方式或这种方式，

2392
01:44:29,210 --> 01:44:31,550
then increment something called a variable.
然后递增称为变量的东西。

2393
01:44:31,550 --> 01:44:32,450
We'll see those too.
我们也会看到这些。

2394
01:44:32,450 --> 01:44:34,490
Just like in algebra you might have x and y
就像在代数中一样，你可能有 x 和 y

2395
01:44:34,490 --> 01:44:37,700
and z, storing values like numbers, so can computer programs,
z，存储数字等值，计算机程序也可以，

2396
01:44:37,700 --> 01:44:42,350
have variables called x or y or z, or more descriptively called Score,
有称为 x 或 y 或 z 的变量，或者更描述地称为 Score，

2397
01:44:42,350 --> 01:44:44,810
as in this case at top right, or another variable
如本例中的右上角或其他变量

2398
01:44:44,810 --> 01:44:47,780
called Countdown, typically one word in code, but in this case
称为倒计时，通常在代码中是一个单词，但在这种情况下

2399
01:44:47,780 --> 01:44:49,632
two words, that just store some value.
两个词，只是存储一些价值。

2400
01:44:49,632 --> 01:44:51,590
So there's probably some math going on in there
所以那里可能有一些数学问题

2401
01:44:51,590 --> 01:44:55,040
whereby the author of this program just is incrementing, that is,
因此，该程序的作者只是递增，即

2402
01:44:55,040 --> 01:44:59,060
adding 1 and 1 every time it detected that a mole had been whacked,
每次检测到鼹鼠被殴打时加 1 和 1，

2403
01:44:59,060 --> 01:45:00,570
in this case, with movement.
在这种情况下，有运动。

2404
01:45:00,570 --> 01:45:04,910
So back in the day, I, myself, actually implemented my very first program
所以回到过去，我，我自己，实际上实施了我的第一个程序

2405
01:45:04,910 --> 01:45:08,180
in Scratch when I was a graduate student, actually, at MIT--
在我读研究生的时候，在麻省理工学院——

2406
01:45:08,180 --> 01:45:11,290
cross-registered at MIT, taking a class from MIT's Media Lab,
在麻省理工学院交叉注册，从麻省理工学院媒体实验室上课，

2407
01:45:11,290 --> 01:45:14,540
specifically, the lifelong kindergarten group, which is the group that created
具体来说，终身幼儿园组，即创建

2408
01:45:14,540 --> 01:45:15,500
Scratch, itself.
划痕，本身。

2409
01:45:15,500 --> 01:45:19,580
And the program I wrote all those years ago and still
还有我多年前写的程序，现在仍然

2410
01:45:19,580 --> 01:45:22,040
rather cling to is a little something here
宁愿坚持在这里有点东西

2411
01:45:22,040 --> 01:45:26,620
called Oscartime, that I thought I'd play just a quick excerpt of myself
叫奥斯卡时间，我以为我只是播放自己的一个快速摘录

2412
01:45:26,620 --> 01:45:27,120
here.
这里。

2413
01:45:27,120 --> 01:45:30,530
So in this case, consider, as the music starts playing,
所以在这种情况下，当音乐开始播放时，请考虑一下，

2414
01:45:30,530 --> 01:45:33,800
how this program, which is much more sophisticated, certainly,
当然，这个程序如何更加复杂，

2415
01:45:33,800 --> 01:45:38,060
than the earliest "Say hello" examples we just did might also be implemented.
比我们刚刚做的最早的“打招呼”示例也可能实现。

2416
01:45:38,060 --> 01:45:40,745
Let me go ahead now and click the Green Flag.
现在让我继续并单击绿旗。

2417
01:45:40,745 --> 01:45:44,950
[MUSIC - OSCAR THE GROUCH, "I LOVE  TRASH"]
[音乐 - 奥斯卡·格鲁奇，“我爱垃圾”]

2418
01:45:44,950 --> 01:45:46,973
OSCAR THE GROUCH: (SINGING) Oh, I love trash.
OSCAR THE GROUCH：（唱）哦，我喜欢垃圾。

2419
01:45:46,973 --> 01:45:50,140
DAVID J. MALAN: OK, so some trash is moving, presumably in some kind of loop
DAVID J. MALAN：好的，所以一些垃圾正在移动，大概是在某种循环中

2420
01:45:50,140 --> 01:45:51,970
from the top.
从顶部。

2421
01:45:51,970 --> 01:45:56,440
If I'm touching the mouse cursor, it follows me.
如果我触摸鼠标光标，它会跟随我。

2422
01:45:56,440 --> 01:45:59,920
If I hover over the trash can, it responds.
如果我将鼠标悬停在垃圾桶上，它会做出响应。

2423
01:45:59,920 --> 01:46:04,600
If I let go, in some kind of loop, Oscar pops out,
如果我放手，在某种循环中，奥斯卡会弹出，

2424
01:46:04,600 --> 01:46:06,910
creates a variable with the current score.
创建具有当前分数的变量。

2425
01:46:06,910 --> 01:46:07,900
And it happens again.
它再次发生。

2426
01:46:07,900 --> 01:46:09,983
OSCAR THE GROUCH: (SINGING) It's awful, the holes.
OSCAR THE GROUCH：（唱）太糟糕了，洞。

2427
01:46:09,983 --> 01:46:11,950
And the laces are torn.
而且鞋带被撕裂了。

2428
01:46:11,950 --> 01:46:16,030
A gift from my mother the day I was born.
我出生那天母亲送给我的礼物。

2429
01:46:16,030 --> 01:46:20,050
I love it because it's trash.
我喜欢它，因为它是垃圾。

2430
01:46:20,050 --> 01:46:21,070
Oh, I--
哦，我——

2431
01:46:21,070 --> 01:46:24,050
DAVID J. MALAN: It's pretty easy at first but--
DAVID J. MALAN：一开始很容易，但是——

2432
01:46:24,050 --> 01:46:26,410
OSCAR THE GROUCH: (SINGING) --anything dirty or dingy--
奥斯卡：（唱）--任何肮脏或肮脏的东西---任何肮脏的东西-

2433
01:46:26,410 --> 01:46:28,980
DAVID J. MALAN: So I don't need to keep playing this up
DAVID J. MALAN：所以我不需要继续玩这个

2434
01:46:28,980 --> 01:46:30,230
on stage in front of everyone.
在所有人面前的舞台上。

2435
01:46:30,230 --> 01:46:32,950
So my score is already now up to some 6 or so.
所以我的分数现在已经达到了6分左右。

2436
01:46:32,950 --> 01:46:35,900
But in a moment, too, you'll see that it's going to escalate.
但过一会儿，你也会看到它会升级。

2437
01:46:35,900 --> 01:46:38,080
So I'm taking into account some time apparently.
所以我显然正在考虑一些时间。

2438
01:46:38,080 --> 01:46:38,980
So now--
所以现在——

2439
01:46:38,980 --> 01:46:42,343
OSCAR THE GROUCH: (SINGING) I have here some newspaper, 13 months old.
OSCAR THE GROUCH：（唱）我这里有一些报纸，13个月大。

2440
01:46:42,343 --> 01:46:45,010
DAVID J. MALAN: So more and more sprites are suddenly appearing.
DAVID J. MALAN：所以越来越多的精灵突然出现。

2441
01:46:45,010 --> 01:46:46,540
And notice, that each time they're appearing
请注意，每次它们出现时

2442
01:46:46,540 --> 01:46:48,040
from a different part of the screen.
从屏幕的不同部分。

2443
01:46:48,040 --> 01:46:49,840
That's an illusion, perhaps, too, that--
那是一种错觉，也许，那也是——

2444
01:46:49,840 --> 01:46:52,270
pick a random number between x and y.
在 x 和 y 之间选择一个随机数。

2445
01:46:52,270 --> 01:46:54,490
So you can actually pick some range of values
因此，你实际上可以选择一些值范围

2446
01:46:54,490 --> 01:46:56,032
to have the game constantly changing.
让游戏不断变化。

2447
01:46:56,032 --> 01:46:58,073
And indeed, I'm going to go ahead and click Stop,
事实上，我将继续并单击“停止”，

2448
01:46:58,073 --> 01:47:00,860
since I spent like eight hours plus, years ago, making this.
因为我花了大约八个多小时，几年前，制作这个。

2449
01:47:00,860 --> 01:47:02,602
And I can never listen to the song again,
我再也不能听这首歌了，

2450
01:47:02,602 --> 01:47:04,810
not that I should be anyway at this point in my life.
并不是说我应该在我生命中的这个时刻。

2451
01:47:04,810 --> 01:47:09,670
But this song is synchronized then with a lot of the actions that's happening.
但是这首歌与正在发生的许多动作同步。

2452
01:47:09,670 --> 01:47:12,130
And ultimately, there's just a lot of building blocks.
最终，有很多构建块。

2453
01:47:12,130 --> 01:47:15,610
But I didn't sit down and implement Oscartime, as I called it, all at once.
但我并没有坐下来实施奥斯卡时间，正如我所说的那样，一下子。

2454
01:47:15,610 --> 01:47:17,500
I really did take baby steps, so to speak.
可以这么说，我确实采取了一些小步骤。

2455
01:47:17,500 --> 01:47:21,970
And I figured out, well, how could I decompose this vision I had at the time
我想通了，好吧，我怎么能分解我当时的这个愿景。

2456
01:47:21,970 --> 01:47:24,220
to create this game ultimately?
最终创造这个游戏？

2457
01:47:24,220 --> 01:47:26,470
And how do I bite off maybe the easiest parts first?
我如何先咬掉最简单的部分？

2458
01:47:26,470 --> 01:47:29,912
And honestly, the first thing I did was I found this image, and I just dragged
老实说，我做的第一件事就是我找到了这张图片，我只是拖了

2459
01:47:29,912 --> 01:47:31,120
and dropped it into Scratch--
并把它放进了Scratch——

2460
01:47:31,120 --> 01:47:33,580
OK, done-- like, lamppost is installed.
好了，完成了——就像安装了灯柱一样。

2461
01:47:33,580 --> 01:47:34,575
It doesn't do anything.
它什么都不做。

2462
01:47:34,575 --> 01:47:35,450
It's not interactive.
它不是交互式的。

2463
01:47:35,450 --> 01:47:37,995
But I at least set the stage, so to speak, for the program.
但我至少为该计划奠定了基础。

2464
01:47:37,995 --> 01:47:39,370
Then what else might I have done?
那我还能做什么呢？

2465
01:47:39,370 --> 01:47:40,640
Well, let me do this.
好吧，让我来做这个。

2466
01:47:40,640 --> 01:47:44,290
Let me go ahead and open up in another editor here
让我继续在这里的另一个编辑器中打开

2467
01:47:44,290 --> 01:47:48,980
an early incarnation of Oscartime by doing this.
奥斯卡的早期化身。

2468
01:47:48,980 --> 01:47:51,220
Let me go into Oscartime here.
让我在这里进入奥斯卡时间。

2469
01:47:51,220 --> 01:47:52,510
Let me full screen this.
让我全屏显示这个。

2470
01:47:52,510 --> 01:47:54,190
And here you have--
而这里你——

2471
01:47:54,190 --> 01:47:56,080
let me hide the trash for just a moment--
让我把垃圾藏一会儿——

2472
01:47:56,080 --> 01:48:00,010
is what I might call the second version of my program, wherein,
是我可能称之为我的程序的第二个版本，其中，

2473
01:48:00,010 --> 01:48:03,220
at the top right of the stage here, I had the lamppost, which I just
在舞台的右上角，我有一根灯柱，我刚刚

2474
01:48:03,220 --> 01:48:06,267
dragged and dropped and got going, but then I added an actual sprite.
拖放并开始，但随后我添加了一个实际的精灵。

2475
01:48:06,267 --> 01:48:09,100
And it has to be a sprite if you want it to do things interactively.
如果你想让它以交互方式做事，它必须是一个精灵。

2476
01:48:09,100 --> 01:48:10,420
The lamppost-- not a sprite.
灯柱——不是精灵。

2477
01:48:10,420 --> 01:48:13,240
It's just an image a costume, if you will, for the whole
这只是一个图像，一个服装，如果你愿意的话，对于整个

2478
01:48:13,240 --> 01:48:14,680
stage itself, a backdrop.
舞台本身，一个背景。

2479
01:48:14,680 --> 01:48:16,780
But this thing is indeed a sprite because it
但这东西确实是精灵，因为它

2480
01:48:16,780 --> 01:48:20,240
needs to respond to code and events, like dragging and dropping.
需要响应代码和事件，例如拖放。

2481
01:48:20,240 --> 01:48:23,960
So what might I have done early on with that code?
那么我早期可能会用这些代码做什么呢？

2482
01:48:23,960 --> 01:48:26,350
Well, maybe the first version would have been
好吧，也许第一个版本是

2483
01:48:26,350 --> 01:48:30,250
something like this, whereby my very first version of Oscartime
像这样的东西，我的第一个版本的奥斯卡时间

2484
01:48:30,250 --> 01:48:32,170
might have said something like, oh, this.
可能会说，哦，这个。

2485
01:48:32,170 --> 01:48:35,500
How about, let me control the program as before-- or, rather, events.
怎么样，让我像以前一样控制程序 - 或者更确切地说，事件。

2486
01:48:35,500 --> 01:48:38,630
When the Green Flag is clicked, what do I want to do?
单击绿旗时，我想做什么？

2487
01:48:38,630 --> 01:48:43,600
Well, I want to go ahead and forever do something like this.
好吧，我想继续做这样的事情。

2488
01:48:43,600 --> 01:48:46,687
Forever-- so I want the lid to open up if I touch it.
永远——所以我希望如果我触摸它，盖子就会打开。

2489
01:48:46,687 --> 01:48:49,270
So if the cursor gets near the lid, I want the lid to open up.
因此，如果光标靠近盖子，我希望盖子打开。

2490
01:48:49,270 --> 01:48:51,340
And then if I move away, I want it to close.
然后如果我搬走，我希望它关闭。

2491
01:48:51,340 --> 01:48:52,640
So how can I do that?
那我该怎么做呢？

2492
01:48:52,640 --> 01:48:56,080
I want an If, but I just don't want one question, I really want two,
我想要一个如果，但我只是不想要一个问题，我真的想要两个，

2493
01:48:56,080 --> 01:48:59,200
a fork in the road that goes left or right, so to speak.
可以这么说，向左或向右的岔路口。

2494
01:48:59,200 --> 01:49:02,830
And let me grab this puzzle piece here, as I did long ago.
让我在这里抓住这个拼图，就像我很久以前所做的那样。

2495
01:49:02,830 --> 01:49:04,690
So notice, it grows to fill.
所以请注意，它长到填充。

2496
01:49:04,690 --> 01:49:06,430
What's the question I want to ask?
我想问什么问题？

2497
01:49:06,430 --> 01:49:08,680
Well, under Sensing, I'm going to go ahead here
好吧，在感应下，我将在这里继续

2498
01:49:08,680 --> 01:49:12,670
and say If this trashcan is Touching the Mouse Pointer--
并说如果这个垃圾桶在触摸鼠标指针——

2499
01:49:12,670 --> 01:49:13,863
what do I want to do?
我想做什么？

2500
01:49:13,863 --> 01:49:16,030
Well, I want to change what the trashcan looks like.
好吧，我想改变垃圾桶的样子。

2501
01:49:16,030 --> 01:49:17,740
And this part, I did in advance of class.
而这部分，我在上课前做了。

2502
01:49:17,740 --> 01:49:21,040
If you go up here to Costumes, this is where all the graphical stuff happens.
如果你去看服装，这是所有图形发生的地方。

2503
01:49:21,040 --> 01:49:25,720
And you'll see that I imported a whole bunch of different costumes
你会看到我进口了一大堆不同的服装。

2504
01:49:25,720 --> 01:49:29,080
that effectively, much like a video, when you play them quickly,
这很有效，就像视频一样，当你快速播放它们时，

2505
01:49:29,080 --> 01:49:31,423
creates the illusion of movement, some animation.
创造运动的错觉，一些动画。

2506
01:49:31,423 --> 01:49:33,340
But it's really just dot, dot, dot, dot, dot--
但它真的只是点，点，点，点，点——

2507
01:49:33,340 --> 01:49:35,320
different images showing on the screen.
屏幕上显示不同的图像。

2508
01:49:35,320 --> 01:49:39,250
Well, some of these costumes are called like Oscar1, Oscar2.
嗯，其中一些服装被称为奥斯卡1，奥斯卡2。

2509
01:49:39,250 --> 01:49:40,810
Oscar1 is closed.
奥斯卡1已关闭。

2510
01:49:40,810 --> 01:49:42,070
Oscar2 is open.
奥斯卡2开放。

2511
01:49:42,070 --> 01:49:43,730
So let's just deal with those first.
因此，让我们先处理这些。

2512
01:49:43,730 --> 01:49:48,100
So if I'm touching the mouse pointer, let me go under-- how about Looks?
所以，如果我触摸鼠标指针，让我进入 - 外观怎么样？

2513
01:49:48,100 --> 01:49:50,680
And we didn't use this before, but there's this block,
我们以前没有使用过这个，但是有这个块，

2514
01:49:50,680 --> 01:49:52,870
Switch Costume to Something Else.
将服装换成其他东西。

2515
01:49:52,870 --> 01:49:55,150
I'm going to drag and drop this inside of the If.
我要把它拖放到If中。

2516
01:49:55,150 --> 01:49:57,070
And notice it's a little bit indented.
请注意，它有点缩进。

2517
01:49:57,070 --> 01:50:00,730
I'm going to change it not to Oscar8, but Oscar2.
我不会把它改成奥斯卡8，而是奥斯卡2。

2518
01:50:00,730 --> 01:50:03,340
Otherwise, If Not Touching the Mouse Pointer--
否则，如果不触摸鼠标指针——

2519
01:50:03,340 --> 01:50:05,890
this is the other direction in the fork in the road--
这是岔路口的另一个方向——

2520
01:50:05,890 --> 01:50:10,840
let's go ahead and switch the costume back to what I described as Oscar1.
让我们继续将服装切换回我所描述的奥斯卡1。

2521
01:50:10,840 --> 01:50:12,400
So let me run this program.
所以让我运行这个程序。

2522
01:50:12,400 --> 01:50:14,900
And not much of interest is happening yet.
而且还没有太多的兴趣发生。

2523
01:50:14,900 --> 01:50:18,550
But notice, if I move the cursor up, down--
但请注意，如果我向上、向下移动光标——

2524
01:50:18,550 --> 01:50:20,030
but how is that working?
但这是如何工作的呢？

2525
01:50:20,030 --> 01:50:22,940
It's just changing the costume that's being overlaid on the sprite.
它只是改变了覆盖在精灵上的服装。

2526
01:50:22,940 --> 01:50:24,790
So it looks like interactivity, but you are really
所以它看起来像互动性，但你真的是

2527
01:50:24,790 --> 01:50:25,998
just changing the aesthetics.
只是改变美学。

2528
01:50:25,998 --> 01:50:29,135
And we humans are just kind of assuming, oh, it's opening up.
我们人类只是假设，哦，它正在开放。

2529
01:50:29,135 --> 01:50:30,760
Well, no, it's just changing a costume.
嗯，不，只是换了一套服装。

2530
01:50:30,760 --> 01:50:31,802
So here's the difference.
所以这就是区别。

2531
01:50:31,802 --> 01:50:34,210
The high-level abstraction-- trashcan opening.
高级抽象——垃圾桶打开。

2532
01:50:34,210 --> 01:50:36,850
The lower-level implementation detail-- costume
较低级别的实现细节——服装

2533
01:50:36,850 --> 01:50:38,500
changing, creating that illusion.
改变，创造那种错觉。

2534
01:50:38,500 --> 01:50:41,680
And if I want it to look prettier, I could just have many other costumes
如果我想让它看起来更漂亮，我可以有很多其他的服装。

2535
01:50:41,680 --> 01:50:45,220
and go boom, boom, boom, boom, boom to create more frames per second,
然后去轰隆隆，轰隆隆，轰隆隆，轰隆隆，

2536
01:50:45,220 --> 01:50:46,130
if you will.
如果你愿意的话。

2537
01:50:46,130 --> 01:50:48,820
So I need to do one other thing.
所以我需要做另一件事。

2538
01:50:48,820 --> 01:50:51,130
Maybe if I accidentally leave the trashcan open,
也许如果我不小心把垃圾桶打开了，

2539
01:50:51,130 --> 01:50:52,750
let me make one change here.
让我在这里做一个改变。

2540
01:50:52,750 --> 01:50:54,730
Let me make sure that the very first thing
让我确保第一件事

2541
01:50:54,730 --> 01:50:58,360
I do when the Green Flag is clicked, is always start with the trashcan
当绿旗被点击时，我总是从垃圾桶开始

2542
01:50:58,360 --> 01:51:01,810
closed because otherwise, you might accidentally leave it open.
已关闭，否则，你可能会意外将其保持打开状态。

2543
01:51:01,810 --> 01:51:03,590
So this gets me into some default state.
所以这让我进入了一些默认状态。

2544
01:51:03,590 --> 01:51:08,133
So now it's always closed until I manually hover over it instead.
所以现在它总是关闭，直到我手动将鼠标悬停在它上面。

2545
01:51:08,133 --> 01:51:09,550
Well, what might I have done next?
那么，我接下来可能会做什么？

2546
01:51:09,550 --> 01:51:13,587
Well, if I wanted to introduce something like the trash, I need a second sprite.
好吧，如果我想引入垃圾之类的东西，我需要第二个精灵。

2547
01:51:13,587 --> 01:51:15,670
And here, in advance, I grabbed the image already.
在这里，提前，我已经抓住了图像。

2548
01:51:15,670 --> 01:51:18,310
Let me pretend that this never happened.
让我假装这从未发生过。

2549
01:51:18,310 --> 01:51:20,260
Let me drag this away here.
让我把这个拖到这里。

2550
01:51:20,260 --> 01:51:24,033
And now I have nothing in my code area for this piece of trash.
现在我的代码区域中没有这个垃圾。

2551
01:51:24,033 --> 01:51:25,200
But it is the second sprite.
但它是第二个精灵。

2552
01:51:25,200 --> 01:51:27,900
And all I did was I clicked on the little cat plus icon here,
我所做的只是点击这里的小猫加图标，

2553
01:51:27,900 --> 01:51:29,190
created a second sprite.
创建了第二个精灵。

2554
01:51:29,190 --> 01:51:30,330
I named it trash.
我把它命名为垃圾。

2555
01:51:30,330 --> 01:51:32,250
I added a costume for it.
我为它添加了一套服装。

2556
01:51:32,250 --> 01:51:34,170
Sort of the aesthetic stuff, I did in advance.
有点美学的东西，我提前做了。

2557
01:51:34,170 --> 01:51:36,360
But here I'll do now the code.
但是在这里，我现在将执行代码。

2558
01:51:36,360 --> 01:51:37,720
How do I want to do this?
我想怎么做？

2559
01:51:37,720 --> 01:51:42,160
Well, how about when the Green Flag is clicked, for the trash can,
好吧，当绿旗被点击时，对于垃圾桶，

2560
01:51:42,160 --> 01:51:45,090
I want the trash can in parallel to do--
我要垃圾桶并行做——

2561
01:51:45,090 --> 01:51:48,190
I want the trash, the piece of trash, to do its own thing.
我希望垃圾，垃圾，做自己的事情。

2562
01:51:48,190 --> 01:51:52,500
So what I want it to do is maybe let's do Motion, how about?
所以我希望它做的是也许让我们做Motion，怎么样？

2563
01:51:52,500 --> 01:51:54,240
And let's go to a specific coordinate.
让我们转到一个特定的坐标。

2564
01:51:54,240 --> 01:51:55,750
Now, there's a lot of options here.
现在，这里有很多选择。

2565
01:51:55,750 --> 01:52:00,870
There's Turning, Go to a Random Position, Go to x,y, Glide,
有转弯，去一个随机的位置，去x，y，滑行，

2566
01:52:00,870 --> 01:52:01,740
more elegantly.
更优雅。

2567
01:52:01,740 --> 01:52:03,990
There's a lot of different ways to implement movement.
有很多不同的方法可以实现运动。

2568
01:52:03,990 --> 01:52:06,310
I just want it to go to a very specific location first.
我只是想让它先去一个非常具体的位置。

2569
01:52:06,310 --> 01:52:09,000
So I'm just going to go to x,y first.
所以我要先去x，y。

2570
01:52:09,000 --> 01:52:13,350
And I'm going to say x, how about, will be--
我要说x，怎么样，将会是——

2571
01:52:13,350 --> 01:52:14,470
let's not hardcode this.
我们不要对此进行硬编码。

2572
01:52:14,470 --> 01:52:18,120
Let's just have it be-- well, let's do it at 0, initially, and then 240.
让我们就这样吧——好吧，让我们在 0 开始，然后是 240。

2573
01:52:18,120 --> 01:52:21,360
So-- whoops-- let's do 0,240 so that this piece of trash
所以 - 哎呀 - 让我们做0,240，这样这块垃圾

2574
01:52:21,360 --> 01:52:23,410
always starts at the top middle of the screen.
始终从屏幕的顶部中间开始。

2575
01:52:23,410 --> 01:52:26,160
If you think back to that coordinate system, 0,0 is in the middle.
如果你回想一下那个坐标系，0,0 在中间。

2576
01:52:26,160 --> 01:52:28,230
240 is straight above it.
240 在它的正上方。

2577
01:52:28,230 --> 01:52:31,150
All right, now, after I do that, what do I want to do?
好吧，现在，在我这样做之后，我想做什么？

2578
01:52:31,150 --> 01:52:34,980
Well, how about I control this thing by forever falling.
好吧，我通过永远坠落来控制这个东西怎么样。

2579
01:52:34,980 --> 01:52:36,427
Now, how do I make the trash move?
现在，我该如何让垃圾移动？

2580
01:52:36,427 --> 01:52:38,010
We haven't seen this puzzle piece yet.
我们还没有看到这个拼图。

2581
01:52:38,010 --> 01:52:42,390
But under Motion, the very first thing is called Move Some Number of Steps.
但是在“运动”下，第一件事称为“移动一些步骤数”。

2582
01:52:42,390 --> 01:52:43,380
By default, it's 10.
默认情况下，它是 10。

2583
01:52:43,380 --> 01:52:44,880
But we'll do it more simply.
但我们会做得更简单。

2584
01:52:44,880 --> 01:52:47,790
Let me go ahead and move--
让我继续前进——

2585
01:52:47,790 --> 01:52:48,660
oh, sorry.
哦，对不起。

2586
01:52:48,660 --> 01:52:52,350
Move is going to move it in whatever direction it's facing.
移动将把它移动到它面对的任何方向。

2587
01:52:52,350 --> 01:52:53,753
I only want it to move down.
我只希望它向下移动。

2588
01:52:53,753 --> 01:52:56,670
So here, even I'm getting confused as to how many different ways there
所以在这里，即使我也对有多少种不同的方式感到困惑

2589
01:52:56,670 --> 01:52:57,540
are to do things.
是做事。

2590
01:52:57,540 --> 01:52:59,680
What I thing I want to do is this.
我想做的就是这个。

2591
01:52:59,680 --> 01:53:03,670
Let me only change my y-axis as follows.
让我只更改我的 y 轴，如下所示。

2592
01:53:03,670 --> 01:53:06,060
So here's another puzzle piece called Change y.
所以这是另一个拼图，叫做改变y。

2593
01:53:06,060 --> 01:53:07,680
So again, y is the vertical.
所以同样，y是垂直的。

2594
01:53:07,680 --> 01:53:11,400
So let me just change y by one pixel downward
所以让我把y向下改变一个像素

2595
01:53:11,400 --> 01:53:14,170
at a time, so -1 one pixel at a time.
一次，所以一次 -1 一个像素。

2596
01:53:14,170 --> 01:53:15,540
So it's kind of slow.
所以它有点慢。

2597
01:53:15,540 --> 01:53:17,010
And I think now--
我现在想——

2598
01:53:17,010 --> 01:53:17,890
I think that's it.
我想就是这样。

2599
01:53:17,890 --> 01:53:18,990
Let me hit Stop.
让我按停止。

2600
01:53:18,990 --> 01:53:21,700
Notice that my trashcan is still going to be interactive.
请注意，我的垃圾桶仍然是交互式的。

2601
01:53:21,700 --> 01:53:23,370
I haven't changed or deleted that code.
我没有更改或删除该代码。

2602
01:53:23,370 --> 01:53:26,850
I've just added now code for my piece of trash.
我现在刚刚为我的垃圾添加了代码。

2603
01:53:26,850 --> 01:53:30,120
If I click the Green Flag, notice that--
如果我点击绿旗，请注意——

2604
01:53:30,120 --> 01:53:32,920
after I enable it-- let me start that again.
启用它后 - 让我重新开始。

2605
01:53:32,920 --> 01:53:34,320
I had it hidden for before class.
我把它藏起来了，直到上课前。

2606
01:53:34,320 --> 01:53:35,403
But let me enable it now--
但是现在让我启用它——

2607
01:53:35,403 --> 01:53:40,080
Green Flag, notice it starts dead center, at x equals 0, y equals 240,
绿旗，注意它从死点开始，x 等于 0，y 等于 240，

2608
01:53:40,080 --> 01:53:42,750
and it's dropping one pixel at a time.
它一次下降一个像素。

2609
01:53:42,750 --> 01:53:46,470
If that seems a little boring, we can change it to -10 pixels at a time
如果这看起来有点无聊，我们可以一次将其更改为 -10 像素

2610
01:53:46,470 --> 01:53:47,530
and, boom, it's done.
而且，轰，它完成了。

2611
01:53:47,530 --> 01:53:49,780
So that's how you might change the speed of a program.
所以这就是你可以改变程序速度的方式。

2612
01:53:49,780 --> 01:53:51,750
But I'm going to leave it more simply as -1.
但是我将更简单地将其保留为-1。

2613
01:53:51,750 --> 01:53:54,708
And honestly, it would be nice if it doesn't always start from the top.
老实说，如果它并不总是从顶部开始，那就太好了。

2614
01:53:54,708 --> 01:53:57,083
Otherwise, this game is not going to be very interactive.
否则，这个游戏不会有很强的互动性。

2615
01:53:57,083 --> 01:54:00,580
I'm literally going to be grabbing the trash from the same place every time.
我每次都会从同一个地方抓垃圾。

2616
01:54:00,580 --> 01:54:03,250
So why don't I, instead, Stop this.
那么我为什么不，相反，阻止这个。

2617
01:54:03,250 --> 01:54:06,550
Let me go under Operators, and let's pick a random number.
让我在运算符下，让我们选择一个随机数。

2618
01:54:06,550 --> 01:54:08,370
So let me change the hardcoded--
所以让我改变硬编码——

2619
01:54:08,370 --> 01:54:12,210
the manually inputted-- 0, and let's make x be somewhere between 0,
手动输入的 -- 0，让我们让 x 介于 0 之间，

2620
01:54:12,210 --> 01:54:15,660
so in the middle and all the way over to--
所以在中间，一直到——

2621
01:54:15,660 --> 01:54:18,000
what was it-- oh, I got my numbers wrong--
那是什么——哦，我弄错了数字——

2622
01:54:18,000 --> 01:54:20,970
240 and my y will be 180.
240，我的y将是180。

2623
01:54:20,970 --> 01:54:23,560
Sorry, I got my x and my y confused.
对不起，我把我的 x 和我的 y 弄糊涂了。

2624
01:54:23,560 --> 01:54:25,420
So let me play this again.
所以让我再玩一遍。

2625
01:54:25,420 --> 01:54:27,645
And now we have a game that's more like games
现在我们有了一款更像游戏的游戏。

2626
01:54:27,645 --> 01:54:29,520
you might have played growing up or even now,
你可能在成长过程中甚至现在都玩过，

2627
01:54:29,520 --> 01:54:30,978
like there's some randomness to it.
就像它有一些随机性。

2628
01:54:30,978 --> 01:54:33,660
So the CPU, so to speak, is doing something more interesting.
所以可以说，CPU正在做一些更有趣的事情。

2629
01:54:33,660 --> 01:54:34,570
Let me run it again.
让我再运行一次。

2630
01:54:34,570 --> 01:54:35,820
Now it's a little to the left.
现在它有点左边。

2631
01:54:35,820 --> 01:54:36,600
Let me run it again.
让我再运行一次。

2632
01:54:36,600 --> 01:54:38,058
Now it's a little more to the left.
现在它更靠左一点。

2633
01:54:38,058 --> 01:54:39,630
Again-- now it's back to the right.
再说一遍，现在它又回到了右边。

2634
01:54:39,630 --> 01:54:41,640
So randomness just makes games more interesting.
所以随机性只会让游戏更有趣。

2635
01:54:41,640 --> 01:54:44,130
And this is why when you play any video game, if different things are
这就是为什么当你玩任何视频游戏时，如果不同的东西是

2636
01:54:44,130 --> 01:54:46,172
happening, there's probably just some randomness.
发生时，可能只是一些随机性。

2637
01:54:46,172 --> 01:54:48,360
And it's quantized as just a simple number.
它被量化为一个简单的数字。

2638
01:54:48,360 --> 01:54:52,050
Now, I think I just need one final flourish here, if I may.
现在，我想我只需要在这里最后一次繁荣，如果可以的话。

2639
01:54:52,050 --> 01:54:54,060
Let me go ahead and add this.
让我继续添加这个。

2640
01:54:54,060 --> 01:54:57,570
How about Events-- or rather--
事件怎么样 - 或者更确切地说 -

2641
01:54:57,570 --> 01:54:58,380
yes, Events.
是的，事件。

2642
01:54:58,380 --> 01:55:02,700
When Green Flag is clicked, I can do multiple things within the same sprite.
当绿旗被点击时，我可以在同一精灵中做多件事。

2643
01:55:02,700 --> 01:55:05,190
They don't all have to be attached to the same one.
它们不必都附加到同一个。

2644
01:55:05,190 --> 01:55:10,110
Let me go ahead and forever go ahead and do something else.
让我继续前进，永远继续做别的事情。

2645
01:55:10,110 --> 01:55:13,470
How about, Whenever the Trash is--
怎么样，每当垃圾在的时候——

2646
01:55:13,470 --> 01:55:17,500
how about-- Touching the Trash Can--
怎么样——摸垃圾桶——

2647
01:55:17,500 --> 01:55:20,850
so Forever If-- let's see, I need a Sensing block.
所以永远如果 - 让我们看看，我需要一个感应块。

2648
01:55:20,850 --> 01:55:24,000
So how about, Is Touching--
那么怎么样，感人是——

2649
01:55:24,000 --> 01:55:28,530
not the Mouse Pointer, this time, but Touching Oscar himself there.
这次不是鼠标指针，而是触摸奥斯卡本人。

2650
01:55:28,530 --> 01:55:30,810
Now let's see what happens.
现在让我们看看会发生什么。

2651
01:55:30,810 --> 01:55:33,750
All right, so let's go ahead and click the Green Flag.
好的，让我们继续点击绿旗。

2652
01:55:33,750 --> 01:55:37,560
Now I go down over here and let go.
现在我到这边去放手。

2653
01:55:37,560 --> 01:55:41,340
OK, I kind of want it to go into the trash can.
好吧，我有点想让它进入垃圾桶。

2654
01:55:41,340 --> 01:55:43,620
How do I make it go into the trash can?
如何让它进入垃圾桶？

2655
01:55:43,620 --> 01:55:47,610
How can we take this high-level idea, put trash into the trash can,
我们怎么能把这个高层次的想法，把垃圾扔进垃圾桶，

2656
01:55:47,610 --> 01:55:49,950
and make it seem to disappear?
让它看起来消失了？

2657
01:55:49,950 --> 01:55:51,520
Logically, what could we do?
从逻辑上讲，我们能做什么？

2658
01:55:51,520 --> 01:55:52,370
Yeah--
是的--

2659
01:55:52,370 --> 01:55:53,245
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2660
01:55:53,245 --> 01:55:56,037
DAVID J. MALAN: OK, so when it touches it, let's have it disappear.
DAVID J. MALAN：好的，所以当它碰到它时，让我们让它消失。

2661
01:55:56,037 --> 01:55:56,910
So I could hide it.
所以我可以隐藏它。

2662
01:55:56,910 --> 01:55:59,490
Or honestly, if the game is going to be ongoing, like it was,
或者老实说，如果游戏要继续下去，就像以前一样，

2663
01:55:59,490 --> 01:56:01,980
letting me drop more and more trash, let me just
让我扔越来越多的垃圾，让我只是

2664
01:56:01,980 --> 01:56:04,380
have it go ahead and pick a new random location.
让它继续并选择一个新的随机位置。

2665
01:56:04,380 --> 01:56:05,560
So let me do this.
所以让我来做这个。

2666
01:56:05,560 --> 01:56:09,073
Let me go ahead and Copy this puzzle piece up here and Duplicate.
让我继续将这个拼图复制到这里并复制。

2667
01:56:09,073 --> 01:56:10,740
And I don't want the whole thing, sorry.
而且我不想要整件事，对不起。

2668
01:56:10,740 --> 01:56:12,400
Let me get rid of this.
让我摆脱这个。

2669
01:56:12,400 --> 01:56:13,540
Let me just do this.
让我这样做。

2670
01:56:13,540 --> 01:56:16,720
Let me go back to some random location at the top.
让我回到顶部的某个随机位置。

2671
01:56:16,720 --> 01:56:17,940
So now notice what happens.
所以现在注意会发生什么。

2672
01:56:17,940 --> 01:56:19,950
If I click and drag on it-- here it goes--
如果我点击并拖动它 - 在这里 -

2673
01:56:19,950 --> 01:56:23,730
and I let go, it looks like it's going into the trash can
我松开手，看起来它要进垃圾桶了

2674
01:56:23,730 --> 01:56:26,318
because it snaps back up to some random location.
因为它会回扣到某个随机位置。

2675
01:56:26,318 --> 01:56:29,610
Now, the only thing I'm not doing really is keeping track of any kind of score.
现在，我唯一没有做的就是跟踪任何类型的分数。

2676
01:56:29,610 --> 01:56:33,150
And it turns out, if I full screen this, it's not going to be draggable,
事实证明，如果我全屏显示，它将无法拖动，

2677
01:56:33,150 --> 01:56:33,940
by default.
默认情况下。

2678
01:56:33,940 --> 01:56:35,940
So just as a corner case, so to speak, something
所以就像一个角落的情况，可以这么说，一些东西

2679
01:56:35,940 --> 01:56:40,860
that you might trip over otherwise, let me go ahead and under, let's
否则你可能会绊倒，让我继续下去，让我们

2680
01:56:40,860 --> 01:56:45,960
see, Sensing, it turns out I also need this for the piece of trash.
看，感应，原来我也需要这个垃圾。

2681
01:56:45,960 --> 01:56:49,500
There's this way of setting, in Scratch, a sprite
在Scratch中，有这种设置精灵的方式

2682
01:56:49,500 --> 01:56:51,540
to be draggable or not draggable.
可拖动或不可拖动。

2683
01:56:51,540 --> 01:56:53,490
I need to explicitly make it draggable so
我需要明确地使其可拖动，以便

2684
01:56:53,490 --> 01:56:55,560
that when I do full screen this thing now,
当我现在全屏做这件事时，

2685
01:56:55,560 --> 01:56:58,320
it still remains draggable and someone like myself
它仍然可以拖动，像我这样的人

2686
01:56:58,320 --> 01:57:00,240
can play it again and again.
可以一遍又一遍地播放。

2687
01:57:00,240 --> 01:57:03,120
Well, how about we supplement this with one final flourish?
好吧，我们用最后的繁荣来补充一下怎么样？

2688
01:57:03,120 --> 01:57:06,010
Why don't we keep track now of the user score?
为什么我们现在不跟踪用户分数？

2689
01:57:06,010 --> 01:57:10,560
So how about, when the user actually drags the piece of trash
那么，当用户实际拖动垃圾时呢？

2690
01:57:10,560 --> 01:57:13,020
to the trash can, let me go under Variables here,
到垃圾桶，让我在这里的变量下，

2691
01:57:13,020 --> 01:57:16,590
where, in advance, I've already made myself a variable called Score.
事先，我已经给自己做了一个叫做分数的变量。

2692
01:57:16,590 --> 01:57:20,100
I could have called it x or y or z or ABC, but that's not very descriptive.
我本可以称它为x或y或z或ABC，但这不是很具有描述性。

2693
01:57:20,100 --> 01:57:23,070
In programming, you typically give things a more descriptive English,
在编程中，你通常会给事物一个更具描述性的英语，

2694
01:57:23,070 --> 01:57:24,450
or some other language, name.
或其他语言，名称。

2695
01:57:24,450 --> 01:57:26,200
So I called this one Score.
所以我称这个为分数。

2696
01:57:26,200 --> 01:57:28,710
So how do I want to do this in my Score?
那么我想如何在我的分数中做到这一点呢？

2697
01:57:28,710 --> 01:57:31,890
Well, let me go ahead and initially set this game
好吧，让我继续，初步设置这个游戏

2698
01:57:31,890 --> 01:57:35,880
score to 0 at the very top of one of these scripts--
在其中一个脚本的最顶部得分为 0——

2699
01:57:35,880 --> 01:57:37,470
one of these programs up here.
这些程序之一在这里。

2700
01:57:37,470 --> 01:57:42,570
And then any time my piece of trash is touching
然后每当我的垃圾接触时

2701
01:57:42,570 --> 01:57:49,630
Oscar, let's not just jump to the top, let's change the score by 1 up here.
奥斯卡，让我们不要只是跳到顶部，让我们在这里将分数改变 1 分。

2702
01:57:49,630 --> 01:57:52,680
So now notice, If Touching Oscar, Change the Score-- that is,
所以现在请注意，如果触摸奥斯卡，改变分数——也就是说，

2703
01:57:52,680 --> 01:57:54,000
Add 1 to the Score--
分数加1——

2704
01:57:54,000 --> 01:57:55,920
and then Pick a new Random location.
，然后选择一个新的随机位置。

2705
01:57:55,920 --> 01:57:58,290
And now Green Flag--
现在绿旗——

2706
01:57:58,290 --> 01:57:59,520
let's do this slowly.
让我们慢慢来。

2707
01:57:59,520 --> 01:58:00,540
Here it goes.
来了。

2708
01:58:00,540 --> 01:58:01,590
The trashcan opens.
垃圾桶打开。

2709
01:58:01,590 --> 01:58:02,520
I let go.
我放手了。

2710
01:58:02,520 --> 01:58:06,660
And now notice, at the top left of my program, notice the score is now 2.
现在请注意，在我的程序的左上角，请注意分数现在是 2。

2711
01:58:06,660 --> 01:58:10,140
Notice the score, if I do this again, is about to become 3.
请注意，如果我再次这样做，分数即将变为 3。

2712
01:58:10,140 --> 01:58:12,870
And so here we have building blocks, literally,
所以在这里我们有构建块，从字面上看，

2713
01:58:12,870 --> 01:58:15,910
of making this program better and better and better.
使这个程序越来越好，越来越好。

2714
01:58:15,910 --> 01:58:20,610
And so, indeed, that's how you generally approach solving any problem with code,
所以，事实上，这就是你通常如何用代码解决任何问题，

2715
01:58:20,610 --> 01:58:22,530
be it in Scratch or C or Python or some other.
无论是在Scratch，C或Python或其他一些东西中。

2716
01:58:22,530 --> 01:58:24,975
You take this vision you might have or some vision
你采取你可能有的这个愿景或一些愿景

2717
01:58:24,975 --> 01:58:26,850
you've been assigned in a homework assignment
你被分配了家庭作业

2718
01:58:26,850 --> 01:58:29,490
and try to break it down into these constituent parts
并尝试将其分解为这些组成部分

2719
01:58:29,490 --> 01:58:31,530
and just pluck off the easy ones first.
然后先拔掉容易的。

2720
01:58:31,530 --> 01:58:33,390
Put the lamp post there first, and at least
先把灯柱放在那里，至少

2721
01:58:33,390 --> 01:58:34,980
feel like you're making some progress.
感觉你正在取得一些进展。

2722
01:58:34,980 --> 01:58:37,188
Then pluck off something like the trash can, and just
然后拔掉垃圾桶之类的东西，然后

2723
01:58:37,188 --> 01:58:38,457
make it do a little thing.
让它做一件小事。

2724
01:58:38,457 --> 01:58:40,540
And it doesn't have to be in some same order here.
而且它在这里不必按相同的顺序排列。

2725
01:58:40,540 --> 01:58:42,750
I could have done this in a million different ways.
我本可以用一百万种不同的方式做到这一点。

2726
01:58:42,750 --> 01:58:46,410
But figure out what the small pieces are that, ultimately,
但是弄清楚小块是什么，最终，

2727
01:58:46,410 --> 01:58:50,760
like a few of the problems we've solved today, assemble into a greater solution
就像我们今天解决的一些问题一样，组装成一个更好的解决方案

2728
01:58:50,760 --> 01:58:52,380
there too.
那里也是。

2729
01:58:52,380 --> 01:58:56,410
So that you have now a mental model for these types of blocks and others,
这样你现在就有了这些类型的块和其他块的心智模型，

2730
01:58:56,410 --> 01:58:58,470
let's return for a moment to this.
让我们回到这个。

2731
01:58:58,470 --> 01:59:02,100
We saw a moment ago that when I started saying, "Hello, David,"
我们刚才看到，当我开始说，“你好，大卫，”

2732
01:59:02,100 --> 01:59:06,670
and nesting those puzzle pieces, we had a whole different paradigm altogether.
嵌套这些拼图，我们有一个完全不同的范式。

2733
01:59:06,670 --> 01:59:10,630
My input for that second version of, "Hello, world," was to now pass in,
我对第二个版本的输入，“你好，世界”，现在是传入，

2734
01:59:10,630 --> 01:59:12,300
for instance, "What's Your Name?"
例如，“你叫什么名字？

2735
01:59:12,300 --> 01:59:15,000
into my function, called Ask.
进入我的函数，称为询问。

2736
01:59:15,000 --> 01:59:17,610
That gave me not a side effect, but what I called,
这给我的不是副作用，而是我所说的，

2737
01:59:17,610 --> 01:59:21,690
again, a return value, called Answer, by default, in Scratch.
同样，返回值，默认情况下称为 Answer，在 Scratch 中。

2738
01:59:21,690 --> 01:59:25,710
And now notice and recall, when I had that same output
现在注意并回忆，当我有相同的输出时

2739
01:59:25,710 --> 01:59:31,260
become the input to my next block, it looked a little something like this--
成为我下一个块的输入，它看起来有点像这样——

2740
01:59:31,260 --> 01:59:32,100
Say.
说。

2741
01:59:32,100 --> 01:59:36,240
So how does this type of block and this nesting, this stacking of blocks,
那么这种类型的块和这种嵌套，这种块的堆叠是如何进行的，

2742
01:59:36,240 --> 01:59:37,710
fit into the same mental model?
适合同一个心智模式？

2743
01:59:37,710 --> 01:59:42,660
Well, same idea-- my input for that part of the story is now taking in not one
嗯，同样的想法 - 我对故事的那部分的投入现在没有接受一个

2744
01:59:42,660 --> 01:59:43,790
input but two--
输入但两个——

2745
01:59:43,790 --> 01:59:47,190
two arguments-- "hello" and the answer from before.
两个论点 - “你好”和之前的答案。

2746
01:59:47,190 --> 01:59:50,010
The function, in this case, is that new block called Join.
在本例中，函数是名为 Join 的新块。

2747
01:59:50,010 --> 01:59:53,640
The output thereof is, "Hello, David," which itself became--
它的输出是，“你好，大卫”，它本身变成了——

2748
01:59:53,640 --> 01:59:55,170
if we sort of animate this--
如果我们把这个动画化——

2749
01:59:55,170 --> 02:00:00,840
the input to my final function, which indeed was still Say.
我的最终函数的输入，确实仍然是 Say。

2750
02:00:00,840 --> 02:00:03,150
And this is only to say-- no pun intended--
这只是说——没有双关语的意思——

2751
02:00:03,150 --> 02:00:06,570
that almost everything that you do with these puzzle pieces,
你用这些拼图做的几乎所有事情，

2752
02:00:06,570 --> 02:00:09,605
be it in the context of Oscartime or the mole whacking
无论是在奥斯卡时代还是鼹鼠鼬的背景下

2753
02:00:09,605 --> 02:00:11,730
or even just something simple like, "Hello, world,"
甚至只是一些简单的东西，比如“你好，世界，”

2754
02:00:11,730 --> 02:00:16,320
will ultimately fit into that relatively simple mental model there.
最终会适合那里相对简单的心智模型。

2755
02:00:16,320 --> 02:00:20,220
Now, I thought we'd end by taking a look at just a couple of final examples.
现在，我想我们最后看几个最后的例子。

2756
02:00:20,220 --> 02:00:22,950
These ones, too, made by some of your predecessors.
这些也是你的一些前辈做的。

2757
02:00:22,950 --> 02:00:26,010
And for this, I thought we would not write code together,
为此，我认为我们不会一起编写代码，

2758
02:00:26,010 --> 02:00:27,760
but read it instead.
而是阅读它。

2759
02:00:27,760 --> 02:00:30,960
And so allow me to open up one other example here
因此，请允许我在这里打开另一个例子

2760
02:00:30,960 --> 02:00:34,770
that will show us a few different versions of a program
这将向我们展示程序的几个不同版本

2761
02:00:34,770 --> 02:00:36,720
that a predecessor made.
前辈做出的。

2762
02:00:36,720 --> 02:00:38,340
Give me just a moment here.
给我一点时间。

2763
02:00:38,340 --> 02:00:42,960
And we'll see how we might build up to something even more interactive.
我们将看到如何构建更具交互性的东西。

2764
02:00:42,960 --> 02:00:44,940
And in just a moment, we'll see something
一会儿，我们会看到一些东西

2765
02:00:44,940 --> 02:00:51,090
they called Ivy's Hardest Game, focused here on these particular mechanics.
他们称之为常春藤最难的游戏，专注于这些特殊的机制。

2766
02:00:51,090 --> 02:00:55,110
So here is version 0, so to speak, of this program, wherein
所以这是该程序的版本 0，可以这么说，其中

2767
02:00:55,110 --> 02:00:58,560
the goal was to create a game where you have to get out of some kind of maze.
我们的目标是创建一个游戏，你必须走出某种迷宫。

2768
02:00:58,560 --> 02:01:01,800
And you have to get out, in this case, the Harvard crest from this maze.
在这种情况下，你必须从这个迷宫中走出哈佛的徽章。

2769
02:01:01,800 --> 02:01:04,170
Let me go ahead and just hit Play on this Green Flag
让我继续，点击这个绿旗上的播放

2770
02:01:04,170 --> 02:01:08,040
so you can see what the first building block for this program might have been.
因此，你可以看到该程序的第一个构建块可能是什么。

2771
02:01:08,040 --> 02:01:12,990
Notice that my hand here is actually on the Arrow keys on my keyboard.
请注意，我的手实际上在键盘上的箭头键上。

2772
02:01:12,990 --> 02:01:16,800
And it seems that by moving up, down, left, or right,
似乎通过向上、向下、向左或向右移动，

2773
02:01:16,800 --> 02:01:20,432
this little crest on the screen responds in exactly that way.
屏幕上的这个小波峰正是以这种方式响应的。

2774
02:01:20,432 --> 02:01:22,140
Now, let's hypothesize for just a moment.
现在，让我们假设一下。

2775
02:01:22,140 --> 02:01:24,900
Even though we've not done anything quite like this before,
即使我们以前没有做过这样的事情，

2776
02:01:24,900 --> 02:01:27,260
how might this code be implemented?
如何实现此代码？

2777
02:01:27,260 --> 02:01:30,740
How do you get a sprite, be it a cat or a crest,
你如何得到一个精灵，无论是猫还是徽章，

2778
02:01:30,740 --> 02:01:34,220
to respond to keys on a keyboard-- might you think intuitively?
响应键盘上的键 - 你可以直观地思考吗？

2779
02:01:34,220 --> 02:01:34,730
Yeah--
是的--

2780
02:01:34,730 --> 02:01:36,983
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2781
02:01:36,983 --> 02:01:38,900
DAVID J. MALAN: Yeah, there could be something
DAVID J. MALAN：是的，可能有一些东西

2782
02:01:38,900 --> 02:01:40,410
sensing what key you're pressing on.
感应你按下的键。

2783
02:01:40,410 --> 02:01:42,230
And if you do it again in forever a loop,
如果你在永远循环中再做一次，

2784
02:01:42,230 --> 02:01:44,600
you'll just constantly be listening for keystrokes.
你只会不断聆听击键。

2785
02:01:44,600 --> 02:01:47,240
And this is how, like, every piece of software nowadays works.
这就是现在每个软件的工作方式。

2786
02:01:47,240 --> 02:01:49,910
It's constantly waiting for your phone to be tapped
它一直在等待你的手机被窃听

2787
02:01:49,910 --> 02:01:51,690
or something to be typed on the screen.
或要在屏幕上键入的内容。

2788
02:01:51,690 --> 02:01:55,400
So let me go ahead and look inside of this existing program here.
因此，让我继续查看此现有程序的内部。

2789
02:01:55,400 --> 02:01:57,890
And there's more going on, but we'll take a quick glance
还有更多的事情要做，但我们会快速浏览一下

2790
02:01:57,890 --> 02:01:59,730
what's actually going on.
到底是怎么回事。

2791
02:01:59,730 --> 02:02:02,000
Well, up here at top left, notice, we just
好吧，在左上角，请注意，我们只是

2792
02:02:02,000 --> 02:02:04,850
have Go To x Equals 0 and y Equals 0.
有 转到 x 等于 0 和 y 等于 0。

2793
02:02:04,850 --> 02:02:07,850
That means put the Harvard crest dead center in the middle of the stage.
这意味着将哈佛的徽章死中心放在舞台中间。

2794
02:02:07,850 --> 02:02:10,460
Then we have Forever two functions that we
然后我们有永远的两个函数，我们

2795
02:02:10,460 --> 02:02:13,130
made in advance as custom functions--
预先制作为自定义功能--

2796
02:02:13,130 --> 02:02:15,500
Listen for Keyboard, Feel for Walls.
听键盘，感受墙壁。

2797
02:02:15,500 --> 02:02:17,190
So it's doing two things at once.
所以它同时做两件事。

2798
02:02:17,190 --> 02:02:19,403
It's forever listening for the keyboard-- up,
它永远在听键盘——向上，

2799
02:02:19,403 --> 02:02:21,320
down, left, right-- and feeling for the walls,
向下，向左，向右 - 对墙壁的感觉，

2800
02:02:21,320 --> 02:02:23,278
in the sense that if I get too far to the left,
从某种意义上说，如果我向左走得太远，

2801
02:02:23,278 --> 02:02:26,010
I don't want it to keep moving past that black wall.
我不希望它一直越过那堵黑墙。

2802
02:02:26,010 --> 02:02:28,520
And if it moves too far to the right, I don't want it to blow through that wall
如果它向右移动得太远，我不希望它吹穿那堵墙。

2803
02:02:28,520 --> 02:02:29,060
either.
也。

2804
02:02:29,060 --> 02:02:32,300
So it's going to do two things constantly, listening for keyboard
所以它会不断地做两件事，听键盘。

2805
02:02:32,300 --> 02:02:34,250
and feeling for walls, so to speak.
可以这么说，对墙壁的感觉。

2806
02:02:34,250 --> 02:02:35,870
And how are those implemented?
这些是如何实施的？

2807
02:02:35,870 --> 02:02:37,190
Well, this one's a bit long.
嗯，这个有点长。

2808
02:02:37,190 --> 02:02:40,080
But on the left here is Listen for Keyboard.
但是在左边是听键盘。

2809
02:02:40,080 --> 02:02:43,760
So this pink puzzle piece, Listen for Keyboard,
所以这个粉红色的拼图，听键盘，

2810
02:02:43,760 --> 02:02:47,420
first checks If the Key Up Arrow is Pressed, question mark,
首先检查 如果按下向上键箭头，问号，

2811
02:02:47,420 --> 02:02:50,570
Boolean expression in a conditional, Change y By 1.
条件中的布尔表达式，将 y 更改为 1。

2812
02:02:50,570 --> 02:02:52,040
That means, move it up 1.
这意味着，将其向上移动 1。

2813
02:02:52,040 --> 02:02:56,840
Else If the Key Down Arrow is Pressed, then Change y by -1,
否则，如果按下向下键，则将 y 更改为 -1，

2814
02:02:56,840 --> 02:02:59,540
and similar for Left Arrow, similar for Right Arrow.
左箭头类似，右箭头类似。

2815
02:02:59,540 --> 02:03:02,660
And even though there's not a loop in this pink function,
即使这个粉红色函数中没有循环，

2816
02:03:02,660 --> 02:03:04,310
there is where I'm using it.
有我正在使用它的地方。

2817
02:03:04,310 --> 02:03:06,860
So it's constantly being asked again and again.
所以它不断地被问到一次又一次。

2818
02:03:06,860 --> 02:03:08,420
How about feeling for walls?
对墙壁的感觉怎么样？

2819
02:03:08,420 --> 02:03:10,010
Well, over here to the right--
好吧，右边这边——

2820
02:03:10,010 --> 02:03:13,970
it's a little cut off-- but here you have, If Touching Left Wall,
它有点切断 - 但这里有，如果触摸左墙，

2821
02:03:13,970 --> 02:03:15,260
Change x by 1.
将 x 更改为 1。

2822
02:03:15,260 --> 02:03:17,200
So if you hit the wall, it's too late.
所以如果你碰壁，为时已晚。

2823
02:03:17,200 --> 02:03:18,950
You're kind of blowing through it already.
你已经有点吹过它了。

2824
02:03:18,950 --> 02:03:23,000
So I want to move it back one pixel so it's no longer touching that wall.
所以我想把它移回一个像素，这样它就不会再碰到那堵墙了。

2825
02:03:23,000 --> 02:03:26,670
Similarly, if it's touching the right wall, I want to back it up one pixel
同样，如果它碰到右墙，我想备份一个像素。

2826
02:03:26,670 --> 02:03:28,220
so it's no longer touching that wall.
所以它不再碰到那堵墙。

2827
02:03:28,220 --> 02:03:31,070
So it's kind of like bouncing off ever so slightly so that it
所以这有点像稍微反弹，这样它

2828
02:03:31,070 --> 02:03:33,110
doesn't slip through that actual wall.
不会穿过那堵真正的墙。

2829
02:03:33,110 --> 02:03:34,340
And what are those walls?
那些墙是什么？

2830
02:03:34,340 --> 02:03:38,870
Well, notice down here, it's just a simple sprite with a black line
好吧，注意这里，它只是一个带有黑线的简单精灵

2831
02:03:38,870 --> 02:03:41,790
that I've oriented vertically instead of horizontally.
我垂直而不是水平方向。

2832
02:03:41,790 --> 02:03:45,230
And that's just so that I can ask questions of these other two sprites.
这只是为了让我可以问另外两个精灵的问题。

2833
02:03:45,230 --> 02:03:47,570
Now, that gives me that form of interactivity.
现在，这给了我这种形式的交互性。

2834
02:03:47,570 --> 02:03:49,200
What more can I now do?
我现在还能做什么？

2835
02:03:49,200 --> 02:03:52,410
Well, what if we make things a little more interactive here?
好吧，如果我们在这里让事情更具互动性呢？

2836
02:03:52,410 --> 02:03:55,640
Let me go ahead and see inside version 1 our second.
让我继续查看我们的第二个版本 1 内部。

2837
02:03:55,640 --> 02:03:58,860
And let me propose what's going to happen here.
让我提出这里将要发生的事情。

2838
02:03:58,860 --> 02:04:02,600
Well, how might we add a little something like Yale into the mix?
那么，我们如何在组合中添加一些像耶鲁这样的东西呢？

2839
02:04:02,600 --> 02:04:07,460
Well, what's Yale going to do when I hit the Green Flag now based on this code?
那么，当我现在根据这段代码击中绿旗时，耶鲁大学会怎么做？

2840
02:04:07,460 --> 02:04:09,920
Any hunches?
有什么预感吗？

2841
02:04:09,920 --> 02:04:13,250
Here is the code for my Yale sprite.
这是我的耶鲁精灵的代码。

2842
02:04:13,250 --> 02:04:13,820
Yeah--
是的--

2843
02:04:13,820 --> 02:04:14,570
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2844
02:04:14,570 --> 02:04:15,650
DAVID J. MALAN: Yeah, it's kind of going to be
DAVID J. MALAN：是的，它将会是

2845
02:04:15,650 --> 02:04:18,203
an adversarially by blocking my path, theoretically,
理论上，通过阻挡我的路径来对抗，

2846
02:04:18,203 --> 02:04:19,370
if I keep writing more code.
如果我继续编写更多的代码。

2847
02:04:19,370 --> 02:04:20,030
So why?
为什么呢？

2848
02:04:20,030 --> 02:04:22,160
It too goes to the middle of the screen.
它也到了屏幕中间。

2849
02:04:22,160 --> 02:04:23,940
It points in direction 90 degrees.
它指向 90 度的方向。

2850
02:04:23,940 --> 02:04:26,520
So similarly, there's a whole degree system as well.
所以同样，还有一个完整的学位系统。

2851
02:04:26,520 --> 02:04:27,710
And it forever asks this.
它永远问这个。

2852
02:04:27,710 --> 02:04:29,750
If Touching the Left Wall Or--
如果触摸左墙或——

2853
02:04:29,750 --> 02:04:30,920
notice the green block--
注意绿色块——

2854
02:04:30,920 --> 02:04:33,900
Touching the Right Wall, then just Turn around 180 Degrees.
触摸右墙，然后只需转180度。

2855
02:04:33,900 --> 02:04:35,900
And indeed, if you think this through logically,
事实上，如果你从逻辑上考虑这一点，

2856
02:04:35,900 --> 02:04:38,570
that just means you're bouncing this way and this way
那只是意味着你以这种方式和这种方式弹跳

2857
02:04:38,570 --> 02:04:42,860
by just flipping yourself around 180 degrees for just this Yale sprite.
只需将自己翻转 180 度，只为这个耶鲁精灵。

2858
02:04:42,860 --> 02:04:46,550
So if I go ahead and zoom in on this and click the Green Flag,
因此，如果我继续放大并单击绿旗，

2859
02:04:46,550 --> 02:04:48,350
I can still move up and down.
我仍然可以上下移动。

2860
02:04:48,350 --> 02:04:52,170
But Yale is just kind of doing this all day long, back and forth
但耶鲁只是整天这样做，来来回回

2861
02:04:52,170 --> 02:04:53,490
and back and forth, forever.
来来回回，永远。

2862
02:04:53,490 --> 02:04:55,710
Nothing bad happens if I try to go through it.
如果我尝试经历它，就不会发生任何不好的事情。

2863
02:04:55,710 --> 02:04:58,010
But we could add that, certainly, to the mix.
但是，我们当然可以将其添加到组合中。

2864
02:04:58,010 --> 02:05:01,760
In fact, let's add one final feature before we play this particular game.
事实上，在玩这个特定的游戏之前，让我们添加一个最后一个功能。

2865
02:05:01,760 --> 02:05:06,320
And let me go ahead and open up the final version of these building blocks
让我继续打开这些构建块的最终版本

2866
02:05:06,320 --> 02:05:08,640
that adds MIT to the mix.
这增加了麻省理工学院。

2867
02:05:08,640 --> 02:05:10,940
So here is MIT.
这是麻省理工学院。

2868
02:05:10,940 --> 02:05:13,182
Someone want to explain what this code does?
有人想解释一下这段代码的作用吗？

2869
02:05:13,182 --> 02:05:14,390
And this is what we're doing.
这就是我们正在做的。

2870
02:05:14,390 --> 02:05:15,470
This itself is a skill.
这本身就是一种技能。

2871
02:05:15,470 --> 02:05:17,810
Reading someone else's code and understanding it
阅读并理解别人的代码

2872
02:05:17,810 --> 02:05:20,640
is half of the part of programming besides writing.
是除了写作之外的一半编程部分。

2873
02:05:20,640 --> 02:05:21,140
Yeah--
是的--

2874
02:05:21,140 --> 02:05:22,015
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2875
02:05:22,015 --> 02:05:24,960
DAVID J. MALAN: Yeah, it's chasing down the Harvard logo outline.
DAVID J. MALAN：是的，它正在追逐哈佛的标志轮廓。

2876
02:05:24,960 --> 02:05:26,870
So this is apparently the name of the costume
所以这显然是服装的名称

2877
02:05:26,870 --> 02:05:30,050
that this student made, Harvard logo outline.
这个学生做的，哈佛标志勾勒出来。

2878
02:05:30,050 --> 02:05:32,600
And apparently, it goes to a random position first.
显然，它首先进入随机位置。

2879
02:05:32,600 --> 02:05:34,700
But then it forever points to Harvard.
但它永远指向哈佛。

2880
02:05:34,700 --> 02:05:36,830
So no matter where I'm moving it, up, down, left,
所以无论我把它移到哪里，向上、向下、向左，

2881
02:05:36,830 --> 02:05:39,413
or right, MIT is being a little more strategic than Yale,
或者对，麻省理工学院比耶鲁更具战略意义，

2882
02:05:39,413 --> 02:05:40,830
bouncing back and forth like this.
像这样来回蹦蹦跳跳。

2883
02:05:40,830 --> 02:05:43,440
So let's go ahead and play this one in full screen.
因此，让我们继续全屏播放此游戏。

2884
02:05:43,440 --> 02:05:45,540
And here we have a Green Flag.
在这里，我们有一面绿旗。

2885
02:05:45,540 --> 02:05:50,750
So if I move up, MIT, rather strategically,
因此，如果我上升，麻省理工学院，相当战略性地，

2886
02:05:50,750 --> 02:05:53,210
is following me no matter where I go.
无论我走到哪里，都跟着我。

2887
02:05:53,210 --> 02:05:55,190
All right, so still, nothing bad happens.
好吧，所以仍然没有发生任何不好的事情。

2888
02:05:55,190 --> 02:05:56,940
But now it's struggling, right?
但现在它正在挣扎，对吧？

2889
02:05:56,940 --> 02:05:58,190
It's going up, down, up, down.
它正在上升，下降，上升，下降。

2890
02:05:58,190 --> 02:06:00,950
It's trying to follow me even though I'm not moving.
它试图跟着我，即使我不动。

2891
02:06:00,950 --> 02:06:02,630
So we need some final flourishes.
因此，我们需要一些最后的繁荣。

2892
02:06:02,630 --> 02:06:06,740
And so I think, for this, we need perhaps one final volunteer.
所以我认为，为此，我们也许需要最后一个志愿者。

2893
02:06:06,740 --> 02:06:09,830
After this, cake awaits for everyone outside,
在这之后，蛋糕在外面等待着每个人，

2894
02:06:09,830 --> 02:06:11,990
as is an end of first lecture CS50 tradition.
这是第一讲CS50传统的结束。

2895
02:06:11,990 --> 02:06:14,840
Would you like to come up and be our volunteer?
你想上来做我们的志愿者吗？

2896
02:06:14,840 --> 02:06:17,230
[APPLAUSE]
[掌声]

2897
02:06:17,230 --> 02:06:23,450


2898
02:06:23,450 --> 02:06:24,040
All right.
好吧。

2899
02:06:24,040 --> 02:06:28,330
And so this will be the actual version but written by one of your predecessors
所以这将是实际的版本，但由你的一位前任写的

2900
02:06:28,330 --> 02:06:30,040
that I'll full screen here.
我会在这里全屏显示。

2901
02:06:30,040 --> 02:06:33,040
It's going to stitch together all of these same primitives and more,
它将把所有这些相同的基元拼接在一起，甚至更多，

2902
02:06:33,040 --> 02:06:36,430
but add the notion of scores and lives so that there's actually
但是加上分数和生活的概念，这样实际上就有了

2903
02:06:36,430 --> 02:06:41,260
a goal, which in this case is to move the Harvard crest to constantly pursue
一个目标，在这种情况下是移动哈佛徽章不断追求

2904
02:06:41,260 --> 02:06:44,650
the character on the right-hand side so that your sprite touches that one.
右侧的角色，以便你的角色触摸该角色。

2905
02:06:44,650 --> 02:06:46,533
Would you like to introduce yourself?
你想自我介绍一下吗？

2906
02:06:46,533 --> 02:06:47,950
AUDIENCE: Hi, my name is Mohammed.
观众：嗨，我叫穆罕默德。

2907
02:06:47,950 --> 02:06:49,000
DAVID J. MALAN: All right, wonderful.
DAVID J. MALAN：好的，太好了。

2908
02:06:49,000 --> 02:06:49,630
Welcome aboard.
欢迎登船。

2909
02:06:49,630 --> 02:06:51,910
And here we come with some instructions and final
在这里，我们提供一些说明和最终

2910
02:06:51,910 --> 02:06:56,048
flourish if we want to keep the lights up but perhaps increase the music.
如果我们想保持灯光，但也许增加音乐，那就繁荣起来。

2911
02:06:56,048 --> 02:06:58,236
[MUSIC PLAYING]
[放歌！]

2912
02:06:58,236 --> 02:06:58,736


2913
02:06:58,736 --> 02:07:00,486
[MUSIC - MC HAMMER, "U CAN'T TOUCH  THIS"]
[音乐 - MC HAMMER，“U CAN'T TOUCH THIS”]

2914
02:07:00,486 --> 02:07:02,150
MC HAMMER: (SINGING) You can't this.
MC HAMMER：（唱）你不能这样。

2915
02:07:02,150 --> 02:07:03,025
You can't touch this.
你不能碰这个。

2916
02:07:03,025 --> 02:07:05,567
DAVID J. MALAN: Notice he is using the up, down, left, right.
DAVID J. MALAN：注意他使用的是上、下、左、右。

2917
02:07:05,567 --> 02:07:07,320
But there's many more walls now.
但现在有更多的墙。

2918
02:07:07,320 --> 02:07:08,730
First level's pretty easy.
第一级很容易。

2919
02:07:08,730 --> 02:07:13,560
But now Yale's in the mix, bouncing back and forth.
但现在耶鲁在混合中，来回蹦蹦跳跳。

2920
02:07:13,560 --> 02:07:15,420
Again, pretty easy.
同样，很容易。

2921
02:07:15,420 --> 02:07:22,290
Now there's two Yale's at slightly different positions.
现在有两个耶鲁大学的位置略有不同。

2922
02:07:22,290 --> 02:07:23,730
MIT is coming soon.
麻省理工学院即将到来。

2923
02:07:23,730 --> 02:07:25,432
But first, we have three Yales.
但首先，我们有三个耶鲁大学。

2924
02:07:25,432 --> 02:07:26,640
MC HAMMER: (SINGING) As such.
MC HAMMER：（唱）因此。

2925
02:07:26,640 --> 02:07:28,542
And this is a beat, uh, you can't touch.
这是一个节拍，呃，你不能碰。

2926
02:07:28,542 --> 02:07:29,625
DAVID J. MALAN: Very nice.
DAVID J. MALAN：非常好。

2927
02:07:29,625 --> 02:07:30,125
[APPLAUSE]
[掌声]

2928
02:07:30,125 --> 02:07:33,100
MC HAMMER: (SINGING) I told you, homeboy, you can't touch this.
MC HAMMER：（唱）我告诉过你，老家伙，你不能碰这个。

2929
02:07:33,100 --> 02:07:36,820
Yeah, that's how it look when you know you can't touch this.
是的，当你知道你不能碰这个时，这就是它的样子。

2930
02:07:36,820 --> 02:07:40,798
Look at my eyes, man, you can't touch this.
看看我的眼睛，伙计，你不能碰这个。

2931
02:07:40,798 --> 02:07:43,090
Yo, let me bust the funky lyrics. you can't touch this.
哟，让我打破时髦的歌词。你不能碰这个。

2932
02:07:43,090 --> 02:07:45,171
Fresh new kicks and pants, you got to like that.
新鲜的新踢腿和裤子，你必须喜欢这样。

2933
02:07:45,171 --> 02:07:46,504
Now, you know you want to dance.
现在，你知道你想跳舞了。

2934
02:07:46,504 --> 02:07:48,570
So move out of your seat and get a fly--
所以离开你的座位，去飞一只苍蝇——

2935
02:07:48,570 --> 02:07:49,290
DAVID J. MALAN: You got to go quick.
DAVID J. MALAN：你必须快点。

2936
02:07:49,290 --> 02:07:51,623
MC HAMMER: (SINGING) Catch this beat while it's rolling.
MC HAMMER：（唱）在滚动时抓住这个节拍。

2937
02:07:51,623 --> 02:07:52,130
Hold on.
坚持。

2938
02:07:52,130 --> 02:07:55,490
Pump a little bit, and let them know what's going on, like that, like that.
抽一点，让他们知道发生了什么，像那样，那样。

2939
02:07:55,490 --> 02:07:57,056
Cold on a mission, so fall on back.
在任务中冷漠，所以落在后面。

2940
02:07:57,056 --> 02:08:02,800
Let them know that you're too much and this a beat, uh, they can't touch.
让他们知道你太过分了，这是一个节拍，呃，他们不能碰。

2941
02:08:02,800 --> 02:08:03,627
Yo, I told you.
哟，我告诉过你。

2942
02:08:03,627 --> 02:08:04,502
You can't touch this.
你不能碰这个。

2943
02:08:04,502 --> 02:08:06,882
[APPLAUSE]
[掌声]

2944
02:08:06,882 --> 02:08:08,790


2945
02:08:08,790 --> 02:08:09,810
Yo, sound the bell.
哟，按铃。

2946
02:08:09,810 --> 02:08:10,975
School's in, sucker.
学校来了，傻瓜。

2947
02:08:10,975 --> 02:08:11,850
You can't touch this.
你不能碰这个。

2948
02:08:11,850 --> 02:08:13,432
Give me a song, a rhythm.
给我一首歌，一种节奏。

2949
02:08:13,432 --> 02:08:15,390
Making them sweat, that's what I'm giving them.
让他们出汗，这就是我给他们的。

2950
02:08:15,390 --> 02:08:17,892
Now they know, you talk about the Hammer,
现在他们知道了，你谈论锤子，

2951
02:08:17,892 --> 02:08:20,810
you talking about a show that's hyped and tight.
你说的是一个炒作和紧张的节目。

2952
02:08:20,810 --> 02:08:24,018
Singers are sweating, so pass them a wipe or a tape to learn.
歌手们汗流浃背，所以给他们擦拭或磁带来学习。

2953
02:08:24,018 --> 02:08:25,060
What's it going to take--
这需要什么——

2954
02:08:25,060 --> 02:08:27,040
DAVID J. MALAN: Second-to-last level.
DAVID J. MALAN：倒数第二级。

2955
02:08:27,040 --> 02:08:28,165
MC HAMMER: (SINGING) Legit.
MC HAMMER：（唱）合法。

2956
02:08:28,165 --> 02:08:30,065
Either work hard or you might as well quit.
要么努力工作，要么退出。

2957
02:08:30,065 --> 02:08:31,410
That's word because you know--
这是这个词，因为你知道——

2958
02:08:31,410 --> 02:08:32,535
DAVID J. MALAN: Last level.
DAVID J. MALAN：最后一关。

2959
02:08:32,535 --> 02:08:35,652
MC HAMMER: (SINGING) You can't touch this.
MC HAMMER：（唱）你不能碰这个。

2960
02:08:35,652 --> 02:08:37,124
DAVID J. MALAN: Hey!
DAVID J. MALAN：嘿！

2961
02:08:37,124 --> 02:08:37,624
[LAUGHS]
[笑]

2962
02:08:37,624 --> 02:08:39,710
[APPLAUSE]
[掌声]

2963
02:08:39,710 --> 02:08:40,210
Congrats.
恭喜。

2964
02:08:40,210 --> 02:08:45,170


2965
02:08:45,170 --> 02:08:47,570
All right, that's it for CS50.
好的，这就是CS50。

2966
02:08:47,570 --> 02:08:48,410
Welcome.
欢迎。

2967
02:08:48,410 --> 02:08:49,820
Cake is now served.
蛋糕现在上桌了。

2968
02:08:49,820 --> 02:08:51,950
We'll see you next time.
我们下次再见。

2969
02:08:51,950 --> 02:08:53,450
[PROJECTOR CLICKING]
[投影仪点击]

2970
02:08:53,450 --> 02:08:56,800
